// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.PlayerDataStorage
{
	/// <summary>
	/// The result information for a request to write data to a file
	/// </summary>
	public struct WriteFileCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// The result code for the operation.
		/// <see cref="Result.Success" />: The request was successful.
		/// <see cref="Result.Canceled" />: The request was canceled.
		/// <see cref="Result.TooManyRequests" />: There are too many requests in progress for the local user at this time.
		/// <see cref="Result.AlreadyPending" />: There is another requests in progress for the specified file by this user.
		/// <see cref="Result.CacheDirectoryMissing" />: The cache directory was not set when calling <see cref="Platform.PlatformInterface.Create" />.
		/// <see cref="Result.CacheDirectoryInvalid" />: The cache directory provided when calling <see cref="Platform.PlatformInterface.Create" /> was invalid.
		/// <see cref="Result.PlayerDataStorageUserThrottled" />: There were too many requests to the Data Storage service recently by the local user. The application must wait some time before trying again.
		/// <see cref="Result.PlayerDataStorageEncryptionKeyNotSet" />: The encryption key value was not set when calling <see cref="Platform.PlatformInterface.Create" />.
		/// <see cref="Result.InvalidState" />: The read operation is not allowed (e.g. when application is suspended).
		/// <see cref="Result.UnexpectedError" />: An unexpected error occurred either downloading, or reading the downloaded file. This most commonly means there were file IO issues such as: permission issues, disk is full, etc. (potentially retryable)
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// Client-specified data passed into the file write request
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the local user who initiated this request
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The file name that is being written to
		/// </summary>
		public Utf8String Filename { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return ResultCode;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct WriteFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<WriteFileCallbackInfo>
	{
		private Result m_ResultCode;
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_Filename;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out WriteFileCallbackInfo other)
		{
			other = default;
			
			other.ResultCode = m_ResultCode;
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			Utf8String FilenamePublic;
			Helper.Get(m_Filename, out FilenamePublic);
			other.Filename = FilenamePublic;
		}
	}
}

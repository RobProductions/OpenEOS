// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.PlayerDataStorage
{
	/// <summary>
	/// Input data for the <see cref="PlayerDataStorageInterface.DuplicateFile" /> function
	/// </summary>
	public struct DuplicateFileOptions
	{
		/// <summary>
		/// The Product User ID of the local user who authorized the duplication of the requested file; must be the original file's owner
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The name of the existing file to duplicate
		/// </summary>
		public Utf8String SourceFilename { get; set; }

		/// <summary>
		/// The name of the new file
		/// </summary>
		public Utf8String DestinationFilename { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct DuplicateFileOptionsInternal : ISettable<DuplicateFileOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_SourceFilename;
		private IntPtr m_DestinationFilename;

		public void Set(ref DuplicateFileOptions other)
		{
			Dispose();

			m_ApiVersion = PlayerDataStorageInterface.DUPLICATEFILE_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.SourceFilename, ref m_SourceFilename);
			Helper.Set(other.DestinationFilename, ref m_DestinationFilename);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_SourceFilename);
			Helper.Dispose(ref m_DestinationFilename);
		}
	}
}

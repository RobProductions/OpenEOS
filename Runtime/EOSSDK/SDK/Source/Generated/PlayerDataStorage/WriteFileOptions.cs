// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.PlayerDataStorage
{
	/// <summary>
	/// Input data for the <see cref="PlayerDataStorageInterface.WriteFile" /> function
	/// </summary>
	public struct WriteFileOptions
	{
		/// <summary>
		/// The Product User ID of the local user who is writing the requested file to the cloud
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The name of the file to write; if this file already exists, the contents will be replaced if the write request completes successfully
		/// </summary>
		public Utf8String Filename { get; set; }

		/// <summary>
		/// Requested maximum amount of data (in bytes) that can be written to the file per tick
		/// </summary>
		public uint ChunkLengthBytes { get; set; }

		/// <summary>
		/// Callback function that provides chunks of data to be written into the requested file
		/// </summary>
		public OnWriteFileDataCallback WriteFileDataCallback { get; set; }

		/// <summary>
		/// Optional callback function to inform the application of upload progress; will be called at least once if set
		/// </summary>
		public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct WriteFileOptionsInternal : ISettable<WriteFileOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_Filename;
		private uint m_ChunkLengthBytes;
		private IntPtr m_WriteFileDataCallback;
		private IntPtr m_FileTransferProgressCallback;

		public void Set(ref WriteFileOptions other)
		{
			Dispose();

			m_ApiVersion = PlayerDataStorageInterface.WRITEFILE_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.Filename, ref m_Filename);
			m_ChunkLengthBytes = other.ChunkLengthBytes;
			m_WriteFileDataCallback = other.WriteFileDataCallback != null ? Marshal.GetFunctionPointerForDelegate(OnWriteFileDataCallbackInternalImplementation.Delegate) : IntPtr.Zero;
			m_FileTransferProgressCallback = other.FileTransferProgressCallback != null ? Marshal.GetFunctionPointerForDelegate(OnFileTransferProgressCallbackInternalImplementation.Delegate) : IntPtr.Zero;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_Filename);
		}
	}
}

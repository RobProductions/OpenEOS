// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Friends
{
	public sealed partial class FriendsInterface : Handle
	{
		public FriendsInterface()
		{
		}

		public FriendsInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="AcceptInvite" /> API.
		/// </summary>
		public const int ACCEPTINVITE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyBlockedUsersUpdate" /> API.
		/// </summary>
		public const int ADDNOTIFYBLOCKEDUSERSUPDATE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyFriendsUpdate" /> API.
		/// </summary>
		public const int ADDNOTIFYFRIENDSUPDATE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetBlockedUserAtIndex" /> API.
		/// </summary>
		public const int GETBLOCKEDUSERATINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetBlockedUsersCount" /> API.
		/// </summary>
		public const int GETBLOCKEDUSERSCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetFriendAtIndex" /> API.
		/// </summary>
		public const int GETFRIENDATINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetFriendsCount" /> API.
		/// </summary>
		public const int GETFRIENDSCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetStatus" /> API.
		/// </summary>
		public const int GETSTATUS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="QueryFriends" /> API.
		/// </summary>
		public const int QUERYFRIENDS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="RejectInvite" /> API.
		/// </summary>
		public const int REJECTINVITE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="SendInvite" /> API.
		/// </summary>
		public const int SENDINVITE_API_LATEST = 1;

		/// <summary>
		/// Starts an asynchronous task that accepts a friend invitation from another user. The completion delegate is executed after the backend response has been received.
		/// </summary>
		/// <param name="options">
		/// structure containing the logged in account and the inviting account
		/// </param>
		/// <param name="clientData">
		/// arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// a callback that is fired when the async operation completes, either successfully or in error
		/// </param>
		public void AcceptInvite(ref AcceptInviteOptions options, object clientData, OnAcceptInviteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AcceptInviteOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Friends_AcceptInvite(InnerHandle, ref optionsInternal, clientDataPointer, OnAcceptInviteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Listen for changes to blocklist for a particular account.
		/// </summary>
		/// <param name="options">
		/// Information about the API version which is being used.
		/// </param>
		/// <param name="clientData">
		/// This value is returned to the caller when BlockedUsersUpdateHandler is invoked.
		/// </param>
		/// <param name="blockedUsersUpdateHandler">
		/// The callback to be invoked when a blocklist changes.
		/// </param>
		/// <returns>
		/// A valid notification ID if successfully bound, or <see cref="Common.INVALID_NOTIFICATIONID" /> otherwise.
		/// </returns>
		public ulong AddNotifyBlockedUsersUpdate(ref AddNotifyBlockedUsersUpdateOptions options, object clientData, OnBlockedUsersUpdateCallback blockedUsersUpdateHandler)
		{
			if (blockedUsersUpdateHandler == null)
			{
				throw new ArgumentNullException("blockedUsersUpdateHandler");
			}

			var optionsInternal = default(AddNotifyBlockedUsersUpdateOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, blockedUsersUpdateHandler);

			var callResult = Bindings.EOS_Friends_AddNotifyBlockedUsersUpdate(InnerHandle, ref optionsInternal, clientDataPointer, OnBlockedUsersUpdateCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Listen for changes to friends for a particular account.
		/// </summary>
		/// <param name="options">
		/// Information about who would like notifications.
		/// </param>
		/// <param name="clientData">
		/// This value is returned to the caller when FriendsUpdateHandler is invoked.
		/// </param>
		/// <param name="friendsUpdateHandler">
		/// The callback to be invoked when a change to any friend status changes.
		/// </param>
		/// <returns>
		/// A valid notification ID if successfully bound, or <see cref="Common.INVALID_NOTIFICATIONID" /> otherwise
		/// </returns>
		public ulong AddNotifyFriendsUpdate(ref AddNotifyFriendsUpdateOptions options, object clientData, OnFriendsUpdateCallback friendsUpdateHandler)
		{
			if (friendsUpdateHandler == null)
			{
				throw new ArgumentNullException("friendsUpdateHandler");
			}

			var optionsInternal = default(AddNotifyFriendsUpdateOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, friendsUpdateHandler);

			var callResult = Bindings.EOS_Friends_AddNotifyFriendsUpdate(InnerHandle, ref optionsInternal, clientDataPointer, OnFriendsUpdateCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Retrieves the Epic Account ID of an entry from the blocklist that has already been retrieved by the <see cref="QueryFriends" /> API.
		/// <see cref="QueryFriends" />
		/// <see cref="GetBlockedUsersCount" />
		/// </summary>
		/// <param name="options">
		/// structure containing the Epic Account ID of the owner of the blocklist and the index into the list.
		/// </param>
		/// <returns>
		/// the Epic Account ID of the blocked user. Note that if the index provided is out of bounds, the returned Epic Account ID will be a "null" account ID.
		/// </returns>
		public EpicAccountId GetBlockedUserAtIndex(ref GetBlockedUserAtIndexOptions options)
		{
			var optionsInternal = default(GetBlockedUserAtIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Friends_GetBlockedUserAtIndex(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			EpicAccountId callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Retrieves the number of blocked users on the blocklist that has already been retrieved by the <see cref="QueryFriends" /> API.
		/// <see cref="QueryFriends" />
		/// </summary>
		/// <param name="options">
		/// structure containing the Epic Account ID of user who owns the blocklist.
		/// </param>
		/// <returns>
		/// the number of users on the blocklist.
		/// </returns>
		public int GetBlockedUsersCount(ref GetBlockedUsersCountOptions options)
		{
			var optionsInternal = default(GetBlockedUsersCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Friends_GetBlockedUsersCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Retrieves the Epic Account ID of an entry from the friends list that has already been retrieved by the <see cref="QueryFriends" /> API.
		/// The Epic Account ID returned by this function may belong to an account that has been invited to be a friend or that has invited the local user to be a friend.
		/// To determine if the Epic Account ID returned by this function is a friend or a pending friend invitation, use the <see cref="GetStatus" /> function.
		/// <see cref="GetFriendsCount" />
		/// <see cref="GetStatus" />
		/// </summary>
		/// <param name="options">
		/// structure containing the Epic Account ID of the owner of the friends list and the index into the list
		/// </param>
		/// <returns>
		/// the Epic Account ID of the friend. Note that if the index provided is out of bounds, the returned Epic Account ID will be a "null" account ID.
		/// </returns>
		public EpicAccountId GetFriendAtIndex(ref GetFriendAtIndexOptions options)
		{
			var optionsInternal = default(GetFriendAtIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Friends_GetFriendAtIndex(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			EpicAccountId callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Retrieves the number of friends on the friends list that has already been retrieved by the <see cref="QueryFriends" /> API.
		/// <see cref="GetFriendAtIndex" />
		/// </summary>
		/// <param name="options">
		/// structure containing the Epic Account ID of user who owns the friends list
		/// </param>
		/// <returns>
		/// the number of friends on the list
		/// </returns>
		public int GetFriendsCount(ref GetFriendsCountOptions options)
		{
			var optionsInternal = default(GetFriendsCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Friends_GetFriendsCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Retrieve the friendship status between the local user and another user.
		/// <see cref="FriendsStatus" />
		/// </summary>
		/// <param name="options">
		/// structure containing the Epic Account ID of the friend list to check and the account of the user to test friendship status
		/// </param>
		/// <returns>
		/// A value indicating whether the two accounts have a friendship, pending invites in either direction, or no relationship
		/// <see cref="FriendsStatus.Friends" /> is returned for two users that have confirmed friendship
		/// <see cref="FriendsStatus.InviteSent" /> is returned when the local user has sent a friend invitation but the other user has not accepted or rejected it
		/// <see cref="FriendsStatus.InviteReceived" /> is returned when the other user has sent a friend invitation to the local user
		/// <see cref="FriendsStatus.NotFriends" /> is returned when there is no known relationship
		/// </returns>
		public FriendsStatus GetStatus(ref GetStatusOptions options)
		{
			var optionsInternal = default(GetStatusOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Friends_GetStatus(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Starts an asynchronous task that reads the user's friends list and blocklist from the backend service, caching it for future use.
		/// When the Social Overlay is enabled then this will be called automatically. The Social Overlay is enabled by default (see <see cref="Platform.PlatformFlags.DisableSocialOverlay" />).
		/// </summary>
		/// <param name="options">
		/// structure containing the account for which to retrieve the friends list
		/// </param>
		/// <param name="clientData">
		/// arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// a callback that is fired when the async operation completes, either successfully or in error
		/// </param>
		public void QueryFriends(ref QueryFriendsOptions options, object clientData, OnQueryFriendsCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryFriendsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Friends_QueryFriends(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryFriendsCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Starts an asynchronous task that rejects a friend invitation from another user. The completion delegate is executed after the backend response has been received.
		/// </summary>
		/// <param name="options">
		/// structure containing the logged in account and the inviting account
		/// </param>
		/// <param name="clientData">
		/// arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// a callback that is fired when the async operation completes, either successfully or in error
		/// </param>
		public void RejectInvite(ref RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(RejectInviteOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Friends_RejectInvite(InnerHandle, ref optionsInternal, clientDataPointer, OnRejectInviteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Stop listening for blocklist changes on a previously bound handler.
		/// </summary>
		/// <param name="notificationId">
		/// The previously bound notification ID.
		/// </param>
		public void RemoveNotifyBlockedUsersUpdate(ulong notificationId)
		{
			Bindings.EOS_Friends_RemoveNotifyBlockedUsersUpdate(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Stop listening for friends changes on a previously bound handler.
		/// </summary>
		/// <param name="notificationId">
		/// The previously bound notification ID.
		/// </param>
		public void RemoveNotifyFriendsUpdate(ulong notificationId)
		{
			Bindings.EOS_Friends_RemoveNotifyFriendsUpdate(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Starts an asynchronous task that sends a friend invitation to another user. The completion delegate is executed after the backend response has been received.
		/// It does not indicate that the target user has responded to the friend invitation.
		/// </summary>
		/// <param name="options">
		/// structure containing the account to send the invite from and the account to send the invite to
		/// </param>
		/// <param name="clientData">
		/// arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// a callback that is fired when the async operation completes, either successfully or in error
		/// </param>
		public void SendInvite(ref SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(SendInviteOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Friends_SendInvite(InnerHandle, ref optionsInternal, clientDataPointer, OnSendInviteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTC
{
	/// <summary>
	/// This struct is passed in with a call to <see cref="RTCInterface.BlockParticipant" />.
	/// </summary>
	public struct BlockParticipantOptions
	{
		/// <summary>
		/// Product User ID of the user trying to request this operation.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The room the users should be blocked on.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// Product User ID of the participant to block
		/// </summary>
		public ProductUserId ParticipantId { get; set; }

		/// <summary>
		/// Block or unblock the participant
		/// </summary>
		public bool Blocked { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct BlockParticipantOptionsInternal : ISettable<BlockParticipantOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_RoomName;
		private IntPtr m_ParticipantId;
		private int m_Blocked;

		public void Set(ref BlockParticipantOptions other)
		{
			Dispose();

			m_ApiVersion = RTCInterface.BLOCKPARTICIPANT_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.RoomName, ref m_RoomName);
			Helper.Set(other.ParticipantId, ref m_ParticipantId);
			Helper.Set(other.Blocked, ref m_Blocked);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_RoomName);
			Helper.Dispose(ref m_ParticipantId);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTC
{
	/// <summary>
	/// This struct is passed in with a call to <see cref="RTCInterface.AddNotifyParticipantStatusChanged" /> registered event.
	/// </summary>
	public struct ParticipantStatusChangedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into <see cref="RTCInterface.AddNotifyParticipantStatusChanged" />.
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the user who initiated this request.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The room associated with this event.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// The participant whose status changed.
		/// </summary>
		public ProductUserId ParticipantId { get; set; }

		/// <summary>
		/// What status change occurred
		/// </summary>
		public RTCParticipantStatus ParticipantStatus { get; set; }

		/// <summary>
		/// The participant metadata items.
		/// This is only set for the first notification where ParticipantStatus is <see cref="RTCParticipantStatus.Joined" />. Subsequent notifications
		/// such as when bParticipantInBlocklist changes will not contain any metadata.
		/// </summary>
		public ParticipantMetadata[] ParticipantMetadata { get; set; }

		/// <summary>
		/// The participant's block list status, if ParticipantStatus is <see cref="RTCParticipantStatus.Joined" />.
		/// This is set to <see langword="true" /> if the participant is in any of the local user's applicable block lists,
		/// such Epic block list or any of the current platform's block lists.
		/// It can be used to detect when an internal automatic RTC block is applied because of trust and safety restrictions.
		/// </summary>
		public bool ParticipantInBlocklist { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct ParticipantStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<ParticipantStatusChangedCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_RoomName;
		private IntPtr m_ParticipantId;
		private RTCParticipantStatus m_ParticipantStatus;
		private uint m_ParticipantMetadataCount;
		private IntPtr m_ParticipantMetadata;
		private int m_ParticipantInBlocklist;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out ParticipantStatusChangedCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			Utf8String RoomNamePublic;
			Helper.Get(m_RoomName, out RoomNamePublic);
			other.RoomName = RoomNamePublic;
			ProductUserId ParticipantIdPublic;
			Helper.Get(m_ParticipantId, out ParticipantIdPublic);
			other.ParticipantId = ParticipantIdPublic;
			other.ParticipantStatus = m_ParticipantStatus;
			ParticipantMetadata[] ParticipantMetadataPublic;
			Helper.Get<ParticipantMetadataInternal, ParticipantMetadata>(m_ParticipantMetadata, out ParticipantMetadataPublic, m_ParticipantMetadataCount, false);
			other.ParticipantMetadata = ParticipantMetadataPublic;
			bool ParticipantInBlocklistPublic;
			Helper.Get(m_ParticipantInBlocklist, out ParticipantInBlocklistPublic);
			other.ParticipantInBlocklist = ParticipantInBlocklistPublic;
		}
	}
}

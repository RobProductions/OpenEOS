// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Reports
{
	/// <summary>
	/// Input parameters for the <see cref="ReportsInterface.SendPlayerBehaviorReport" /> function.
	/// </summary>
	public struct SendPlayerBehaviorReportOptions
	{
		/// <summary>
		/// Product User ID of the reporting player
		/// </summary>
		public ProductUserId ReporterUserId { get; set; }

		/// <summary>
		/// Product User ID of the reported player.
		/// </summary>
		public ProductUserId ReportedUserId { get; set; }

		/// <summary>
		/// Category for the player report.
		/// </summary>
		public PlayerReportsCategory Category { get; set; }

		/// <summary>
		/// Optional plain text <see cref="Utf8String" /> associated with the report as UTF-8 encoded <see langword="null" />-terminated <see cref="Utf8String" />.
		/// 
		/// The length of the message can be at maximum up to <see cref="ReportsInterface.REPORTMESSAGE_MAX_LENGTH" /> bytes
		/// and any excess characters will be truncated upon sending the report.
		/// </summary>
		public Utf8String Message { get; set; }

		/// <summary>
		/// Optional JSON <see cref="Utf8String" /> associated with the report as UTF-8 encoded <see langword="null" />-terminated <see cref="Utf8String" />.
		/// This is intended as a way to associate arbitrary structured context information with a report.
		/// 
		/// This <see cref="Utf8String" /> needs to be valid JSON, report will fail otherwise.
		/// The length of the context can be at maximum up to <see cref="ReportsInterface.REPORTCONTEXT_MAX_LENGTH" /> bytes, not including the <see langword="null" /> terminator, report will fail otherwise.
		/// </summary>
		public Utf8String Context { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct SendPlayerBehaviorReportOptionsInternal : ISettable<SendPlayerBehaviorReportOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_ReporterUserId;
		private IntPtr m_ReportedUserId;
		private PlayerReportsCategory m_Category;
		private IntPtr m_Message;
		private IntPtr m_Context;

		public void Set(ref SendPlayerBehaviorReportOptions other)
		{
			Dispose();

			m_ApiVersion = ReportsInterface.SENDPLAYERBEHAVIORREPORT_API_LATEST;
			Helper.Set(other.ReporterUserId, ref m_ReporterUserId);
			Helper.Set(other.ReportedUserId, ref m_ReportedUserId);
			m_Category = other.Category;
			Helper.Set(other.Message, ref m_Message);
			Helper.Set(other.Context, ref m_Context);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ReporterUserId);
			Helper.Dispose(ref m_ReportedUserId);
			Helper.Dispose(ref m_Message);
			Helper.Dispose(ref m_Context);
		}
	}
}

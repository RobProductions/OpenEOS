// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Metrics
{
	/// <summary>
	/// BeginPlayerSession.
	/// </summary>
	public struct BeginPlayerSessionOptions
	{
		/// <summary>
		/// The Account ID for the player whose session is beginning.
		/// </summary>
		public BeginPlayerSessionOptionsAccountId AccountId { get; set; }

		/// <summary>
		/// The in-game display name for the user as <see cref="Utf8String" />.
		/// </summary>
		public Utf8String DisplayName { get; set; }

		/// <summary>
		/// The user's game controller type.
		/// </summary>
		public UserControllerType ControllerType { get; set; }

		/// <summary>
		/// IP address of the game server hosting the game session. For a localhost session, set to <see langword="null" />.
		/// 
		/// @details Must be in either one of the following IPv4 or IPv6 <see cref="Utf8String" /> formats:
		/// * "127.0.0.1".
		/// * "1200:0000:AB00:1234:0000:2552:7777:1313".
		/// If both IPv4 and IPv6 addresses are available, use the IPv6 address.
		/// </summary>
		public Utf8String ServerIp { get; set; }

		/// <summary>
		/// Optional, application-defined custom match session identifier. If the identifier is not used, set to <see langword="null" />.
		/// 
		/// @details The game can tag each game session with a custom session match identifier,
		/// which will be shown in the Played Sessions listing at the user profile dashboard.
		/// </summary>
		public Utf8String GameSessionId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct BeginPlayerSessionOptionsInternal : ISettable<BeginPlayerSessionOptions>
	{
		private int m_ApiVersion;
		private MetricsAccountIdType m_AccountIdType;
		private BeginPlayerSessionOptionsAccountIdInternal m_AccountId;
		private IntPtr m_DisplayName;
		private UserControllerType m_ControllerType;
		private IntPtr m_ServerIp;
		private IntPtr m_GameSessionId;

		public void Set(ref BeginPlayerSessionOptions other)
		{
			Dispose();

			m_ApiVersion = MetricsInterface.BEGINPLAYERSESSION_API_LATEST;
			Helper.Set<BeginPlayerSessionOptionsAccountId, BeginPlayerSessionOptionsAccountIdInternal>(other.AccountId, ref m_AccountId);

			m_AccountIdType = other.AccountId.AccountIdType;
			Helper.Set(other.DisplayName, ref m_DisplayName);
			m_ControllerType = other.ControllerType;
			Helper.Set(other.ServerIp, ref m_ServerIp);
			Helper.Set(other.GameSessionId, ref m_GameSessionId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_AccountId);
			Helper.Dispose(ref m_DisplayName);
			Helper.Dispose(ref m_ServerIp);
			Helper.Dispose(ref m_GameSessionId);
		}
	}
}

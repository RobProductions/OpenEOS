// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Metrics
{
	/// <summary>
	/// The Account ID for the player whose session is beginning.
	/// </summary>
	public struct BeginPlayerSessionOptionsAccountId
	{
		private EpicAccountId m_Epic;
		private Utf8String m_External;
		private MetricsAccountIdType m_AccountIdType;

		/// <summary>
		/// An Epic Account ID. Set this field when AccountIdType is set to <see cref="MetricsAccountIdType.Epic" />.
		/// </summary>
		public EpicAccountId Epic
		{
			get
			{
				if (m_AccountIdType == MetricsAccountIdType.Epic)
				{
					return m_Epic;
				}

				return default;
			}
			set
			{
				m_Epic = value;
				m_AccountIdType = MetricsAccountIdType.Epic;
			}
		}

		/// <summary>
		/// An Account ID for another service. Set this field when AccountIdType is set to <see cref="MetricsAccountIdType.External" />.
		/// </summary>
		public Utf8String External
		{
			get
			{
				if (m_AccountIdType == MetricsAccountIdType.External)
				{
					return m_External;
				}

				return default;
			}
			set
			{
				m_External = value;
				m_AccountIdType = MetricsAccountIdType.External;
			}
		}
		public MetricsAccountIdType AccountIdType
		{
			get
			{
				return m_AccountIdType;
			}
		}

		public static implicit operator BeginPlayerSessionOptionsAccountId(EpicAccountId value)
		{
			return new BeginPlayerSessionOptionsAccountId() { Epic = value };
		}

		public static implicit operator BeginPlayerSessionOptionsAccountId(Utf8String value)
		{
			return new BeginPlayerSessionOptionsAccountId() { External = value };
		}

		public static implicit operator BeginPlayerSessionOptionsAccountId(string value)
		{
			return new BeginPlayerSessionOptionsAccountId() { External = value };
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	internal struct BeginPlayerSessionOptionsAccountIdInternal : ISettable<BeginPlayerSessionOptionsAccountId>
	{
		[FieldOffset(0)]
		private IntPtr m_Epic;
		[FieldOffset(0)]
		private IntPtr m_External;

		public void Set(ref BeginPlayerSessionOptionsAccountId other)
		{
			Dispose();

			if (other.AccountIdType == MetricsAccountIdType.Epic)
			{
				Helper.Set(other.Epic, ref m_Epic);
			}

			if (other.AccountIdType == MetricsAccountIdType.External)
			{
				Helper.Set(other.External, ref m_External);
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Epic);
			Helper.Dispose(ref m_External);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.UI
{
	/// <summary>
	/// Input parameters for the <see cref="UIInterface.ReportInputState" /> function.
	/// </summary>
	public struct ReportInputStateOptions
	{
		/// <summary>
		/// Flags to identify the current buttons which are pressed.
		/// </summary>
		public InputStateButtonFlags ButtonDownFlags { get; set; }

		/// <summary>
		/// Whether the current platform and configuration uses the right face button as the default accept button.
		/// When this flag is <see langword="true" />, the right face button is the accept action, and the down face button is the cancel action.
		/// When this flag is <see langword="false" />, the right face button is the cancel action, and the down face button is the accept action.
		/// </summary>
		public bool AcceptIsFaceButtonRight { get; set; }

		/// <summary>
		/// The current state of the mouse button.
		/// </summary>
		public bool MouseButtonDown { get; set; }

		/// <summary>
		/// The current x-position of the mouse.
		/// </summary>
		public uint MousePosX { get; set; }

		/// <summary>
		/// The current y-position of the mouse.
		/// </summary>
		public uint MousePosY { get; set; }

		/// <summary>
		/// The gamepad or player index
		/// </summary>
		public uint GamepadIndex { get; set; }

		/// <summary>
		/// Left analog stick horizontal movement in [-1, 1]. Negative for left, positive for right
		/// </summary>
		public float LeftStickX { get; set; }

		/// <summary>
		/// Left analog stick vertical movement in [-1, 1]. Negative for up, positive for down
		/// </summary>
		public float LeftStickY { get; set; }

		/// <summary>
		/// Right analog stick horizontal movement in [-1, 1]. Negative for left, positive for right
		/// </summary>
		public float RightStickX { get; set; }

		/// <summary>
		/// Right analog stick vertical movement in [-1, 1]. Negative for up, positive for down
		/// </summary>
		public float RightStickY { get; set; }

		/// <summary>
		/// Left trigger analog value in [0, 1]
		/// </summary>
		public float LeftTrigger { get; set; }

		/// <summary>
		/// Right trigger analog value in [0, 1]
		/// </summary>
		public float RightTrigger { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct ReportInputStateOptionsInternal : ISettable<ReportInputStateOptions>
	{
		private int m_ApiVersion;
		private InputStateButtonFlags m_ButtonDownFlags;
		private int m_AcceptIsFaceButtonRight;
		private int m_MouseButtonDown;
		private uint m_MousePosX;
		private uint m_MousePosY;
		private uint m_GamepadIndex;
		private float m_LeftStickX;
		private float m_LeftStickY;
		private float m_RightStickX;
		private float m_RightStickY;
		private float m_LeftTrigger;
		private float m_RightTrigger;

		public void Set(ref ReportInputStateOptions other)
		{
			Dispose();

			m_ApiVersion = UIInterface.REPORTINPUTSTATE_API_LATEST;
			m_ButtonDownFlags = other.ButtonDownFlags;
			Helper.Set(other.AcceptIsFaceButtonRight, ref m_AcceptIsFaceButtonRight);
			Helper.Set(other.MouseButtonDown, ref m_MouseButtonDown);
			m_MousePosX = other.MousePosX;
			m_MousePosY = other.MousePosY;
			m_GamepadIndex = other.GamepadIndex;
			m_LeftStickX = other.LeftStickX;
			m_LeftStickY = other.LeftStickY;
			m_RightStickX = other.RightStickX;
			m_RightStickY = other.RightStickY;
			m_LeftTrigger = other.LeftTrigger;
			m_RightTrigger = other.RightTrigger;
		}

		public void Dispose()
		{
		}
	}
}

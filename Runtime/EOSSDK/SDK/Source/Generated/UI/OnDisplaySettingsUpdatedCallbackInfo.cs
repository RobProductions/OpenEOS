// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.UI
{
	public struct OnDisplaySettingsUpdatedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Context that was passed into <see cref="UIInterface.AddNotifyDisplaySettingsUpdated" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// True when any portion of the overlay is visible.
		/// </summary>
		public bool IsVisible { get; set; }

		/// <summary>
		/// True when the overlay has switched to exclusive input mode.
		/// While in exclusive input mode, no keyboard or mouse input will be sent to the game.
		/// </summary>
		public bool IsExclusiveInput { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct OnDisplaySettingsUpdatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnDisplaySettingsUpdatedCallbackInfo>
	{
		private IntPtr m_ClientData;
		private int m_IsVisible;
		private int m_IsExclusiveInput;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out OnDisplaySettingsUpdatedCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			bool IsVisiblePublic;
			Helper.Get(m_IsVisible, out IsVisiblePublic);
			other.IsVisible = IsVisiblePublic;
			bool IsExclusiveInputPublic;
			Helper.Get(m_IsExclusiveInput, out IsExclusiveInputPublic);
			other.IsExclusiveInput = IsExclusiveInputPublic;
		}
	}
}

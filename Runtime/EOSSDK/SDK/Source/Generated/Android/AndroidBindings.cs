// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_EDITOR
	#define EOS_EDITOR
#endif

#if EOS_EDITOR
	#define EOS_DYNAMIC_BINDINGS
#endif

#if EOS_DYNAMIC_BINDINGS
	#if EOS_PLATFORM_WINDOWS_32
		#define EOS_DYNAMIC_BINDINGS_MANGLING_WINDOWS_32
	#elif EOS_PLATFORM_OSX || EOS_PLATFORM_IOS
		#define EOS_DYNAMIC_BINDINGS_MANGLING_APPLE
	#else
		#define EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
	#endif
#endif

#if UNITY_ANDROID || __ANDROID__
	#define EOS_PLATFORM_ANDROID
#endif

#if EOS_PLATFORM_ANDROID
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices
{
	public static partial class AndroidBindings
	{
#if EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
		private const string EOS_Initialize_AndroidName = "EOS_Initialize";
#endif

#if EOS_DYNAMIC_BINDINGS
		/// <summary>
		/// Hooks dynamic bindings.
		/// </summary>
		/// <param name="libraryHandle">A handle to the library to find functions in. The type is platform dependent, but would typically be an <see cref="IntPtr"/>.</param>
		/// <param name="getFunctionPointer">A delegate that takes a library handle and function name, and returns an <see cref="IntPtr"/> which is a pointer to the function within the library.</param>
		public static void Hook<TLibraryHandle>(TLibraryHandle libraryHandle, Func<TLibraryHandle, string, IntPtr> getFunctionPointer)
		{
			IntPtr functionPointer;

			functionPointer = getFunctionPointer(libraryHandle, EOS_Initialize_AndroidName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Initialize_AndroidName);
			EOS_Initialize_Android = (EOS_Initialize_AndroidDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Initialize_AndroidDelegate));
		}

		/// <summary>
		/// Unhooks dynamic bindings.
		/// </summary>
		public static void Unhook()
		{
			EOS_Initialize_Android = null;
		}

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Initialize_AndroidDelegate(ref Platform.AndroidInitializeOptionsInternal options);
		internal static EOS_Initialize_AndroidDelegate EOS_Initialize_Android;
#else
		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Initialize", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Initialize_Android(ref Platform.AndroidInitializeOptionsInternal options);
#endif
	}
}
#endif
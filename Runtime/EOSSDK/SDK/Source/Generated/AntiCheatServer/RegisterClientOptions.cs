// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatServer
{
	public struct RegisterClientOptions
	{
		/// <summary>
		/// Locally unique value describing the remote user (e.g. a player object <see cref="IntPtr" />)
		/// </summary>
		public IntPtr ClientHandle { get; set; }

		/// <summary>
		/// Type of remote user being registered
		/// </summary>
		public AntiCheatCommon.AntiCheatCommonClientType ClientType { get; set; }

		/// <summary>
		/// Remote user's platform, if known
		/// </summary>
		public AntiCheatCommon.AntiCheatCommonClientPlatform ClientPlatform { get; set; }

		/// <summary>
		/// DEPRECATED - New code should set this to <see langword="null" /> and specify UserId instead.
		/// 
		/// Identifier for the remote user. This is typically a <see cref="Utf8String" /> representation of an
		/// account ID, but it can be any <see cref="Utf8String" /> which is both unique (two different users will never
		/// have the same <see cref="Utf8String" />) and consistent (if the same user connects to this game session
		/// twice, the same <see cref="Utf8String" /> will be used) in the scope of a single protected game session.
		/// </summary>
		public Utf8String AccountId_DEPRECATED { get; set; }

		/// <summary>
		/// Optional IP address for the remote user. May be <see langword="null" /> if not available.
		/// IPv4 format: "0.0.0.0"
		/// IPv6 format: "0:0:0:0:0:0:0:0"
		/// </summary>
		public Utf8String IpAddress { get; set; }

		/// <summary>
		/// The Product User ID for the remote user who is being registered.
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// Reserved for future use. Must be set to 0.
		/// </summary>
		public int Reserved01 { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct RegisterClientOptionsInternal : ISettable<RegisterClientOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_ClientHandle;
		private AntiCheatCommon.AntiCheatCommonClientType m_ClientType;
		private AntiCheatCommon.AntiCheatCommonClientPlatform m_ClientPlatform;
		private IntPtr m_AccountId_DEPRECATED;
		private IntPtr m_IpAddress;
		private IntPtr m_UserId;
		private int m_Reserved01;

		public void Set(ref RegisterClientOptions other)
		{
			Dispose();

			m_ApiVersion = AntiCheatServerInterface.REGISTERCLIENT_API_LATEST;
			m_ClientHandle = other.ClientHandle;
			m_ClientType = other.ClientType;
			m_ClientPlatform = other.ClientPlatform;
			Helper.Set(other.AccountId_DEPRECATED, ref m_AccountId_DEPRECATED);
			Helper.Set(other.IpAddress, ref m_IpAddress);
			Helper.Set(other.UserId, ref m_UserId);
			m_Reserved01 = other.Reserved01;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ClientHandle);
			Helper.Dispose(ref m_AccountId_DEPRECATED);
			Helper.Dispose(ref m_IpAddress);
			Helper.Dispose(ref m_UserId);
		}
	}
}

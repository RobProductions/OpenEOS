// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatServer
{
	public struct BeginSessionOptions
	{
		/// <summary>
		/// Time in seconds to allow newly registered clients to complete anti-cheat authentication.
		/// Recommended value: 60
		/// </summary>
		public uint RegisterTimeoutSeconds { get; set; }

		/// <summary>
		/// Optional name of this game server
		/// </summary>
		public Utf8String ServerName { get; set; }

		/// <summary>
		/// Gameplay data collection APIs such as LogPlayerTick will be enabled if set to <see langword="true" />.
		/// If you do not use these APIs you should set this value to <see langword="false" /> to reduce memory use.
		/// </summary>
		public bool EnableGameplayData { get; set; }

		/// <summary>
		/// The Product User ID of the local user who is associated with this session. Dedicated servers should set this to <see langword="null" />.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct BeginSessionOptionsInternal : ISettable<BeginSessionOptions>
	{
		private int m_ApiVersion;
		private uint m_RegisterTimeoutSeconds;
		private IntPtr m_ServerName;
		private int m_EnableGameplayData;
		private IntPtr m_LocalUserId;

		public void Set(ref BeginSessionOptions other)
		{
			Dispose();

			m_ApiVersion = AntiCheatServerInterface.BEGINSESSION_API_LATEST;
			m_RegisterTimeoutSeconds = other.RegisterTimeoutSeconds;
			Helper.Set(other.ServerName, ref m_ServerName);
			Helper.Set(other.EnableGameplayData, ref m_EnableGameplayData);
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ServerName);
			Helper.Dispose(ref m_LocalUserId);
		}
	}
}

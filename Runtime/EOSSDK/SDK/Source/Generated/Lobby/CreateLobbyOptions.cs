// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	/// <summary>
	/// Input parameters for the <see cref="LobbyInterface.CreateLobby" /> function.
	/// </summary>
	public struct CreateLobbyOptions
	{
		/// <summary>
		/// The Product User ID of the local user creating the lobby; this user will automatically join the lobby as its owner
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The maximum number of users who can be in the lobby at a time
		/// </summary>
		public uint MaxLobbyMembers { get; set; }

		/// <summary>
		/// The initial permission level of the lobby
		/// </summary>
		public LobbyPermissionLevel PermissionLevel { get; set; }

		/// <summary>
		/// If <see langword="true" />, this lobby will be associated with the local user's presence information. A user's presence can only be associated with one lobby at a time.
		/// This affects the ability of the Social Overlay to show game related actions to take in the user's social graph.
		/// The Social Overlay can handle only one of the following three options at a time:
		/// * using the bPresenceEnabled flags within the Sessions interface
		/// * using the bPresenceEnabled flags within the Lobby interface
		/// * using <see cref="Presence.PresenceModification.SetJoinInfo" />
		/// <see cref="Presence.PresenceModificationSetJoinInfoOptions" />
		/// <see cref="JoinLobbyOptions" />
		/// <see cref="JoinLobbyByIdOptions" />
		/// <see cref="Sessions.CreateSessionModificationOptions" />
		/// <see cref="Sessions.JoinSessionOptions" />
		/// </summary>
		public bool PresenceEnabled { get; set; }

		/// <summary>
		/// Are members of the lobby allowed to invite others
		/// </summary>
		public bool AllowInvites { get; set; }

		/// <summary>
		/// Bucket ID associated with the lobby
		/// </summary>
		public Utf8String BucketId { get; set; }

		/// <summary>
		/// Is host migration allowed (will the lobby stay open if the original host leaves?)
		/// NOTE: <see cref="LobbyInterface.PromoteMember" /> is still allowed regardless of this setting
		/// </summary>
		public bool DisableHostMigration { get; set; }

		/// <summary>
		/// Creates a real-time communication (RTC) room for all members of this lobby. All members of the lobby will automatically join the RTC
		/// room when they connect to the lobby and they will automatically leave the RTC room when they leave or are removed from the lobby.
		/// While the joining and leaving of the RTC room is automatic, applications will still need to use the EOS RTC interfaces to handle all
		/// other functionality for the room.
		/// <see cref="LobbyInterface.GetRTCRoomName" />
		/// <see cref="LobbyInterface.AddNotifyRTCRoomConnectionChanged" />
		/// </summary>
		public bool EnableRTCRoom { get; set; }

		/// <summary>
		/// (Optional) Allows the local application to set local audio options for the RTC Room if it is enabled. Set this to <see langword="null" /> if the RTC
		/// RTC room is disabled or you would like to use the defaults.
		/// </summary>
		public LocalRTCOptions? LocalRTCOptions { get; set; }

		/// <summary>
		/// (Optional) Set to a globally unique value to override the backend assignment
		/// If not specified the backend service will assign one to the lobby. Do not mix and match override and non override settings.
		/// This value can be of size [<see cref="LobbyInterface.MIN_LOBBYIDOVERRIDE_LENGTH" />, <see cref="LobbyInterface.MAX_LOBBYIDOVERRIDE_LENGTH" />]
		/// </summary>
		public Utf8String LobbyId { get; set; }

		/// <summary>
		/// Is <see cref="LobbyInterface.JoinLobbyById" /> allowed.
		/// This is provided to support cases where an integrated platform's invite system is used.
		/// In these cases the game should provide the lobby ID securely to the invited player. Such as by attaching the
		/// lobby ID to the integrated platform's session data or sending the lobby ID within the invite data.
		/// </summary>
		public bool EnableJoinById { get; set; }

		/// <summary>
		/// Does rejoining after being kicked require an invite?
		/// When this is set, a kicked player cannot return to the session even if the session was set with
		/// <see cref="LobbyPermissionLevel.Publicadvertised" />. When this is set, a player with invite privileges must use <see cref="LobbyInterface.SendInvite" /> to
		/// allow the kicked player to return to the session.
		/// </summary>
		public bool RejoinAfterKickRequiresInvite { get; set; }

		/// <summary>
		/// Array of platform IDs indicating the player platforms allowed to register with the session. Platform IDs are
		/// found in the EOS header file, e.g. <see cref="Common.OPT_EPIC" />. For some platforms, the value will be in the EOS Platform specific
		/// header file. If <see langword="null" />, the lobby will be unrestricted.
		/// </summary>
		public uint[] AllowedPlatformIds { get; set; }

		/// <summary>
		/// This value indicates whether or not the lobby owner allows crossplay interactions. If <see langword="false" />, the lobby owner
		/// will be treated as allowing crossplay. If it is set to <see langword="true" />, AllowedPlatformIds must have a single entry that matches
		/// the platform of the lobby owner.
		/// </summary>
		public bool CrossplayOptOut { get; set; }

		/// <summary>
		/// If bEnableRTCRoom is <see langword="true" />, this value indicates the action to take against the RTC Room when joining the lobby. This may be used
		/// to indicate the RTCRoom should be joined immediately or manually at a later time.
		/// </summary>
		public LobbyRTCRoomJoinActionType RTCRoomJoinActionType { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CreateLobbyOptionsInternal : ISettable<CreateLobbyOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private uint m_MaxLobbyMembers;
		private LobbyPermissionLevel m_PermissionLevel;
		private int m_PresenceEnabled;
		private int m_AllowInvites;
		private IntPtr m_BucketId;
		private int m_DisableHostMigration;
		private int m_EnableRTCRoom;
		private IntPtr m_LocalRTCOptions;
		private IntPtr m_LobbyId;
		private int m_EnableJoinById;
		private int m_RejoinAfterKickRequiresInvite;
		private IntPtr m_AllowedPlatformIds;
		private uint m_AllowedPlatformIdsCount;
		private int m_CrossplayOptOut;
		private LobbyRTCRoomJoinActionType m_RTCRoomJoinActionType;

		public void Set(ref CreateLobbyOptions other)
		{
			Dispose();

			m_ApiVersion = LobbyInterface.CREATELOBBY_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			m_MaxLobbyMembers = other.MaxLobbyMembers;
			m_PermissionLevel = other.PermissionLevel;
			Helper.Set(other.PresenceEnabled, ref m_PresenceEnabled);
			Helper.Set(other.AllowInvites, ref m_AllowInvites);
			Helper.Set(other.BucketId, ref m_BucketId);
			Helper.Set(other.DisableHostMigration, ref m_DisableHostMigration);
			Helper.Set(other.EnableRTCRoom, ref m_EnableRTCRoom);
			Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(other.LocalRTCOptions, ref m_LocalRTCOptions);
			Helper.Set(other.LobbyId, ref m_LobbyId);
			Helper.Set(other.EnableJoinById, ref m_EnableJoinById);
			Helper.Set(other.RejoinAfterKickRequiresInvite, ref m_RejoinAfterKickRequiresInvite);
			Helper.Set(other.AllowedPlatformIds, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount, false);
			Helper.Set(other.CrossplayOptOut, ref m_CrossplayOptOut);
			m_RTCRoomJoinActionType = other.RTCRoomJoinActionType;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_BucketId);
			Helper.Dispose(ref m_LocalRTCOptions);
			Helper.Dispose(ref m_LobbyId);
			Helper.Dispose(ref m_AllowedPlatformIds);
		}
	}
}

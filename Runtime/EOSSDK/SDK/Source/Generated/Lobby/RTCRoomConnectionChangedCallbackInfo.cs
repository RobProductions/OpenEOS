// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	public struct RTCRoomConnectionChangedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Context that was passed into <see cref="LobbyInterface.AddNotifyRTCRoomConnectionChanged" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The ID of the lobby which had a RTC Room connection state change
		/// </summary>
		public Utf8String LobbyId { get; set; }

		/// <summary>
		/// The Product User ID of the local user who is in the lobby and registered for notifications
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The new connection state of the room
		/// </summary>
		public bool IsConnected { get; set; }

		/// <summary>
		/// <see cref="Result.Success" />: The room was left locally. This may be because: the associated lobby was Left or Destroyed, the connection to the lobby was interrupted, or because the SDK is being shutdown. If the lobby connection returns (lobby did not permanently go away), we will reconnect.
		/// <see cref="Result.NoConnection" />: There was a network issue connecting to the server. We will attempt to reconnect soon.
		/// <see cref="Result.UserKicked" />: The user has been kicked by the server. We will not reconnect.
		/// <see cref="Result.UserBanned" />: The user has been banned by the server. We will not reconnect.
		/// <see cref="Result.ServiceFailure" />: A known error occurred during interaction with the server. We will attempt to reconnect soon.
		/// <see cref="Result.UnexpectedError" />: Unexpected error. We will attempt to reconnect soon.
		/// </summary>
		public Result DisconnectReason { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct RTCRoomConnectionChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RTCRoomConnectionChangedCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_LobbyId;
		private IntPtr m_LocalUserId;
		private int m_IsConnected;
		private Result m_DisconnectReason;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out RTCRoomConnectionChangedCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			Utf8String LobbyIdPublic;
			Helper.Get(m_LobbyId, out LobbyIdPublic);
			other.LobbyId = LobbyIdPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			bool IsConnectedPublic;
			Helper.Get(m_IsConnected, out IsConnectedPublic);
			other.IsConnected = IsConnectedPublic;
			other.DisconnectReason = m_DisconnectReason;
		}
	}
}

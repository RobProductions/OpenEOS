// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	public struct LobbyDetailsInfo
	{
		/// <summary>
		/// Lobby ID
		/// </summary>
		public Utf8String LobbyId { get; set; }

		/// <summary>
		/// The Product User ID of the current owner of the lobby
		/// </summary>
		public ProductUserId LobbyOwnerUserId { get; set; }

		/// <summary>
		/// Permission level of the lobby
		/// </summary>
		public LobbyPermissionLevel PermissionLevel { get; set; }

		/// <summary>
		/// Current available space
		/// </summary>
		public uint AvailableSlots { get; set; }

		/// <summary>
		/// Max allowed members in the lobby
		/// </summary>
		public uint MaxMembers { get; set; }

		/// <summary>
		/// If <see langword="true" />, users can invite others to this lobby
		/// </summary>
		public bool AllowInvites { get; set; }

		/// <summary>
		/// The main indexed parameter for this lobby, can be any <see cref="Utf8String" /> (i.e. "Region:GameMode")
		/// </summary>
		public Utf8String BucketId { get; set; }

		/// <summary>
		/// Is host migration allowed
		/// </summary>
		public bool AllowHostMigration { get; set; }

		/// <summary>
		/// Was a Real-Time Communication (RTC) room enabled at lobby creation?
		/// </summary>
		public bool RTCRoomEnabled { get; set; }

		/// <summary>
		/// Is <see cref="LobbyInterface.JoinLobbyById" /> allowed
		/// </summary>
		public bool AllowJoinById { get; set; }

		/// <summary>
		/// Does rejoining after being kicked require an invite
		/// </summary>
		public bool RejoinAfterKickRequiresInvite { get; set; }

		/// <summary>
		/// If <see langword="true" />, this lobby will be associated with the local user's presence information.
		/// </summary>
		public bool PresenceEnabled { get; set; }

		/// <summary>
		/// Array of platform IDs indicating the player platforms allowed to register with the lobby. Platform IDs are
		/// <PlatformName>'. For some platforms
		/// the value will be in the EOS Platform specific header file. If <see langword="null" />, the lobby will be unrestricted.
		/// </summary>
		public uint[] AllowedPlatformIds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct LobbyDetailsInfoInternal : IGettable<LobbyDetailsInfo>
	{
		private int m_ApiVersion;
		private IntPtr m_LobbyId;
		private IntPtr m_LobbyOwnerUserId;
		private LobbyPermissionLevel m_PermissionLevel;
		private uint m_AvailableSlots;
		private uint m_MaxMembers;
		private int m_AllowInvites;
		private IntPtr m_BucketId;
		private int m_AllowHostMigration;
		private int m_RTCRoomEnabled;
		private int m_AllowJoinById;
		private int m_RejoinAfterKickRequiresInvite;
		private int m_PresenceEnabled;
		private IntPtr m_AllowedPlatformIds;
		private uint m_AllowedPlatformIdsCount;

		public void Get(out LobbyDetailsInfo other)
		{
			other = default;
			
			Utf8String LobbyIdPublic;
			Helper.Get(m_LobbyId, out LobbyIdPublic);
			other.LobbyId = LobbyIdPublic;
			ProductUserId LobbyOwnerUserIdPublic;
			Helper.Get(m_LobbyOwnerUserId, out LobbyOwnerUserIdPublic);
			other.LobbyOwnerUserId = LobbyOwnerUserIdPublic;
			other.PermissionLevel = m_PermissionLevel;
			other.AvailableSlots = m_AvailableSlots;
			other.MaxMembers = m_MaxMembers;
			bool AllowInvitesPublic;
			Helper.Get(m_AllowInvites, out AllowInvitesPublic);
			other.AllowInvites = AllowInvitesPublic;
			Utf8String BucketIdPublic;
			Helper.Get(m_BucketId, out BucketIdPublic);
			other.BucketId = BucketIdPublic;
			bool AllowHostMigrationPublic;
			Helper.Get(m_AllowHostMigration, out AllowHostMigrationPublic);
			other.AllowHostMigration = AllowHostMigrationPublic;
			bool RTCRoomEnabledPublic;
			Helper.Get(m_RTCRoomEnabled, out RTCRoomEnabledPublic);
			other.RTCRoomEnabled = RTCRoomEnabledPublic;
			bool AllowJoinByIdPublic;
			Helper.Get(m_AllowJoinById, out AllowJoinByIdPublic);
			other.AllowJoinById = AllowJoinByIdPublic;
			bool RejoinAfterKickRequiresInvitePublic;
			Helper.Get(m_RejoinAfterKickRequiresInvite, out RejoinAfterKickRequiresInvitePublic);
			other.RejoinAfterKickRequiresInvite = RejoinAfterKickRequiresInvitePublic;
			bool PresenceEnabledPublic;
			Helper.Get(m_PresenceEnabled, out PresenceEnabledPublic);
			other.PresenceEnabled = PresenceEnabledPublic;
			uint[] AllowedPlatformIdsPublic;
			Helper.Get(m_AllowedPlatformIds, out AllowedPlatformIdsPublic, m_AllowedPlatformIdsCount, false);
			other.AllowedPlatformIds = AllowedPlatformIdsPublic;
		}
	}
}

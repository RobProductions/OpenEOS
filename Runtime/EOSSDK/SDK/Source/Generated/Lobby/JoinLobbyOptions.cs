// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	/// <summary>
	/// Input parameters for the <see cref="LobbyInterface.JoinLobby" /> function.
	/// </summary>
	public struct JoinLobbyOptions
	{
		/// <summary>
		/// The handle of the lobby to join
		/// </summary>
		public LobbyDetails LobbyDetailsHandle { get; set; }

		/// <summary>
		/// The Product User ID of the local user joining the lobby
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// If <see langword="true" />, this lobby will be associated with the local user's presence information. A user can only associate one lobby at a time with their presence information.
		/// This affects the ability of the Social Overlay to show game related actions to take in the user's social graph.
		/// The Social Overlay can handle only one of the following three options at a time:
		/// * using the bPresenceEnabled flags within the Sessions interface
		/// * using the bPresenceEnabled flags within the Lobby interface
		/// * using <see cref="Presence.PresenceModification.SetJoinInfo" />
		/// <see cref="Presence.PresenceModificationSetJoinInfoOptions" />
		/// <see cref="CreateLobbyOptions" />
		/// <see cref="JoinLobbyOptions" />
		/// <see cref="Sessions.CreateSessionModificationOptions" />
		/// <see cref="Sessions.JoinSessionOptions" />
		/// </summary>
		public bool PresenceEnabled { get; set; }

		/// <summary>
		/// (Optional) Set this value to override the default local options for the RTC Room, if it is enabled for this lobby. Set this to <see langword="null" /> if
		/// your application does not use the Lobby RTC Rooms feature, or if you would like to use the default settings. This option is ignored if
		/// the specified lobby does not have an RTC Room enabled and will not cause errors.
		/// </summary>
		public LocalRTCOptions? LocalRTCOptions { get; set; }

		/// <summary>
		/// This value indicates whether or not the local user allows crossplay interactions. If it is <see langword="false" />, the local user
		/// will be treated as allowing crossplay.
		/// </summary>
		public bool CrossplayOptOut { get; set; }

		/// <summary>
		/// For lobbies with the RTC Room feature enabled, this value indicates the action to take against the RTC Room when joining the lobby. This may be used
		/// to indicate the RTCRoom should be joined immediately or manually at a later time.
		/// </summary>
		public LobbyRTCRoomJoinActionType RTCRoomJoinActionType { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct JoinLobbyOptionsInternal : ISettable<JoinLobbyOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LobbyDetailsHandle;
		private IntPtr m_LocalUserId;
		private int m_PresenceEnabled;
		private IntPtr m_LocalRTCOptions;
		private int m_CrossplayOptOut;
		private LobbyRTCRoomJoinActionType m_RTCRoomJoinActionType;

		public void Set(ref JoinLobbyOptions other)
		{
			Dispose();

			m_ApiVersion = LobbyInterface.JOINLOBBY_API_LATEST;
			Helper.Set(other.LobbyDetailsHandle, ref m_LobbyDetailsHandle);
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.PresenceEnabled, ref m_PresenceEnabled);
			Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(other.LocalRTCOptions, ref m_LocalRTCOptions);
			Helper.Set(other.CrossplayOptOut, ref m_CrossplayOptOut);
			m_RTCRoomJoinActionType = other.RTCRoomJoinActionType;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LobbyDetailsHandle);
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_LocalRTCOptions);
		}
	}
}

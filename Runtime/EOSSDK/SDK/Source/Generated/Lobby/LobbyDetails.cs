// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Lobby
{
	public sealed partial class LobbyDetails : Handle
	{
		public LobbyDetails()
		{
		}

		public LobbyDetails(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// <see cref="CopyAttributeByIndex" /> is used to immediately retrieve a copy of a lobby attribute from a given source such as a existing lobby or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// <see cref="Attribute" />
		/// <see cref="LobbyDetailsCopyAttributeByIndexOptions" />
		/// <see cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outAttribute">
		/// Out parameter used to receive the <see cref="Attribute" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyAttributeByIndex(ref LobbyDetailsCopyAttributeByIndexOptions options, out Attribute? outAttribute)
		{
			var optionsInternal = default(LobbyDetailsCopyAttributeByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outAttributePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_LobbyDetails_CopyAttributeByIndex(InnerHandle, ref optionsInternal, out outAttributePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<AttributeInternal, Attribute>(outAttributePointer, out outAttribute);
			if (outAttributePointer != IntPtr.Zero)
			{
				Bindings.EOS_Lobby_Attribute_Release(outAttributePointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopyAttributeByKey" /> is used to immediately retrieve a copy of a lobby attribute from a given source such as a existing lobby or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// <see cref="Attribute" />
		/// <see cref="LobbyDetailsCopyAttributeByKeyOptions" />
		/// <see cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outAttribute">
		/// Out parameter used to receive the <see cref="Attribute" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyAttributeByKey(ref LobbyDetailsCopyAttributeByKeyOptions options, out Attribute? outAttribute)
		{
			var optionsInternal = default(LobbyDetailsCopyAttributeByKeyOptionsInternal);
			optionsInternal.Set(ref options);

			var outAttributePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_LobbyDetails_CopyAttributeByKey(InnerHandle, ref optionsInternal, out outAttributePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<AttributeInternal, Attribute>(outAttributePointer, out outAttribute);
			if (outAttributePointer != IntPtr.Zero)
			{
				Bindings.EOS_Lobby_Attribute_Release(outAttributePointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopyInfo" /> is used to immediately retrieve a copy of lobby information from a given source such as a existing lobby or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutLobbyDetailsInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <see cref="LobbyDetailsInfo" />
		/// <see cref="LobbyDetailsCopyInfoOptions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outLobbyDetailsInfo">
		/// Out parameter used to receive the <see cref="LobbyDetailsInfo" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLobbyDetailsInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyInfo(ref LobbyDetailsCopyInfoOptions options, out LobbyDetailsInfo? outLobbyDetailsInfo)
		{
			var optionsInternal = default(LobbyDetailsCopyInfoOptionsInternal);
			optionsInternal.Set(ref options);

			var outLobbyDetailsInfoPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_LobbyDetails_CopyInfo(InnerHandle, ref optionsInternal, out outLobbyDetailsInfoPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<LobbyDetailsInfoInternal, LobbyDetailsInfo>(outLobbyDetailsInfoPointer, out outLobbyDetailsInfo);
			if (outLobbyDetailsInfoPointer != IntPtr.Zero)
			{
				Bindings.EOS_LobbyDetails_Info_Release(outLobbyDetailsInfoPointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopyMemberAttributeByIndex" /> is used to immediately retrieve a copy of a lobby member attribute from an existing lobby.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// Note: this information is only available if you are actively in the lobby. It is not available for search results.
		/// <see cref="Attribute" />
		/// <see cref="LobbyDetailsCopyMemberAttributeByIndexOptions" />
		/// <see cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outAttribute">
		/// Out parameter used to receive the <see cref="Attribute" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyMemberAttributeByIndex(ref LobbyDetailsCopyMemberAttributeByIndexOptions options, out Attribute? outAttribute)
		{
			var optionsInternal = default(LobbyDetailsCopyMemberAttributeByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outAttributePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_LobbyDetails_CopyMemberAttributeByIndex(InnerHandle, ref optionsInternal, out outAttributePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<AttributeInternal, Attribute>(outAttributePointer, out outAttribute);
			if (outAttributePointer != IntPtr.Zero)
			{
				Bindings.EOS_Lobby_Attribute_Release(outAttributePointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopyMemberAttributeByKey" /> is used to immediately retrieve a copy of a lobby member attribute from an existing lobby.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// Note: this information is only available if you are actively in the lobby. It is not available for search results.
		/// <see cref="Attribute" />
		/// <see cref="LobbyDetailsCopyMemberAttributeByKeyOptions" />
		/// <see cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outAttribute">
		/// Out parameter used to receive the <see cref="Attribute" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyMemberAttributeByKey(ref LobbyDetailsCopyMemberAttributeByKeyOptions options, out Attribute? outAttribute)
		{
			var optionsInternal = default(LobbyDetailsCopyMemberAttributeByKeyOptionsInternal);
			optionsInternal.Set(ref options);

			var outAttributePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_LobbyDetails_CopyMemberAttributeByKey(InnerHandle, ref optionsInternal, out outAttributePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<AttributeInternal, Attribute>(outAttributePointer, out outAttribute);
			if (outAttributePointer != IntPtr.Zero)
			{
				Bindings.EOS_Lobby_Attribute_Release(outAttributePointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopyMemberInfo" /> is used to immediately retrieve a copy of lobby member information from an existing lobby.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutLobbyDetailsMemberInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// Note: this information is only available if you are actively in the lobby. It is not available for search results.
		/// <see cref="LobbyDetailsMemberInfo" />
		/// <see cref="LobbyDetailsCopyMemberInfoOptions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outLobbyDetailsMemberInfo">
		/// Out parameter used to receive the <see cref="LobbyDetailsInfo" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLobbyMemberDetailsInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if searching for a target user ID returns no results
		/// </returns>
		public Result CopyMemberInfo(ref LobbyDetailsCopyMemberInfoOptions options, out LobbyDetailsMemberInfo? outLobbyDetailsMemberInfo)
		{
			var optionsInternal = default(LobbyDetailsCopyMemberInfoOptionsInternal);
			optionsInternal.Set(ref options);

			var outLobbyDetailsMemberInfoPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_LobbyDetails_CopyMemberInfo(InnerHandle, ref optionsInternal, out outLobbyDetailsMemberInfoPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<LobbyDetailsMemberInfoInternal, LobbyDetailsMemberInfo>(outLobbyDetailsMemberInfoPointer, out outLobbyDetailsMemberInfo);
			if (outLobbyDetailsMemberInfoPointer != IntPtr.Zero)
			{
				Bindings.EOS_LobbyDetails_MemberInfo_Release(outLobbyDetailsMemberInfoPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Get the number of attributes associated with this lobby
		/// </summary>
		/// <param name="options">
		/// the Options associated with retrieving the attribute count
		/// </param>
		/// <returns>
		/// number of attributes on the lobby or 0 if there is an error
		/// </returns>
		public uint GetAttributeCount(ref LobbyDetailsGetAttributeCountOptions options)
		{
			var optionsInternal = default(LobbyDetailsGetAttributeCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_LobbyDetails_GetAttributeCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Get the product user ID of the current owner for a given lobby
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <returns>
		/// the product user ID for the lobby owner or <see langword="null" /> if the input parameters are invalid
		/// </returns>
		public ProductUserId GetLobbyOwner(ref LobbyDetailsGetLobbyOwnerOptions options)
		{
			var optionsInternal = default(LobbyDetailsGetLobbyOwnerOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_LobbyDetails_GetLobbyOwner(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			ProductUserId callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// <see cref="GetMemberAttributeCount" /> is used to immediately retrieve the attribute count for members in a lobby.
		/// Note: this information is only available if you are actively in the lobby. It is not available for search results.
		/// <see cref="GetMemberCount" />
		/// <see cref="LobbyDetailsGetMemberAttributeCountOptions" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <returns>
		/// the number of attributes associated with a given lobby member or 0 if that member is invalid
		/// </returns>
		public uint GetMemberAttributeCount(ref LobbyDetailsGetMemberAttributeCountOptions options)
		{
			var optionsInternal = default(LobbyDetailsGetMemberAttributeCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_LobbyDetails_GetMemberAttributeCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// <see cref="GetMemberByIndex" /> is used to immediately retrieve individual members registered with a lobby.
		/// Note: this information is only available if you are actively in the lobby. It is not available for search results.
		/// <see cref="GetMemberCount" />
		/// <see cref="LobbyDetailsGetMemberByIndexOptions" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <returns>
		/// the product user ID for the registered member at a given index or <see langword="null" /> if that index is invalid
		/// </returns>
		public ProductUserId GetMemberByIndex(ref LobbyDetailsGetMemberByIndexOptions options)
		{
			var optionsInternal = default(LobbyDetailsGetMemberByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_LobbyDetails_GetMemberByIndex(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			ProductUserId callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get the number of members associated with this lobby
		/// </summary>
		/// <param name="options">
		/// the Options associated with retrieving the member count
		/// </param>
		/// <returns>
		/// number of members in the existing lobby or 0 if there is an error
		/// </returns>
		public uint GetMemberCount(ref LobbyDetailsGetMemberCountOptions options)
		{
			var optionsInternal = default(LobbyDetailsGetMemberCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_LobbyDetails_GetMemberCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Release the memory associated with a single lobby. This must be called on data retrieved from <see cref="LobbySearch.CopySearchResultByIndex" />.
		/// <see cref="LobbySearch.CopySearchResultByIndex" />
		/// </summary>
		/// <param name="lobbyHandle">
		/// - The lobby handle to release
		/// </param>
		public void Release()
		{
			Bindings.EOS_LobbyDetails_Release(InnerHandle);
		}
	}
}

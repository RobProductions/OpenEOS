// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices
{
	public sealed partial class ContinuanceToken : Handle
	{
		public ContinuanceToken()
		{
		}

		public ContinuanceToken(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// Retrieve a <see langword="null" />-terminated stringified continuance token from an <see cref="ContinuanceToken" />.
		/// 
		/// To get the required buffer size, call once with OutBuffer set to <see langword="null" />, InOutBufferLength will contain the buffer size needed.
		/// Call again with valid params to get the stringified continuance token which will only contain UTF8-encoded printable characters as well as the <see langword="null" />-terminator.
		/// </summary>
		/// <param name="continuanceToken">
		/// The continuance token for which to retrieve the stringified version.
		/// </param>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written
		/// </param>
		/// <param name="inOutBufferLength">
		/// The size of the OutBuffer in characters.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer including the <see langword="null" />-termination character.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the continuance token <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> - The OutBuffer was filled, and InOutBufferLength contains the number of characters copied into OutBuffer including the <see langword="null" />-terminator.
		/// <see cref="Result.InvalidParameters" /> - Either OutBuffer or InOutBufferLength were passed as <see langword="null" /> parameters.
		/// <see cref="Result.InvalidUser" /> - The AccountId is invalid and cannot be stringified.
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the continuance token <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result ToString(out Utf8String outBuffer)
		{
			int inOutBufferLength = 1024;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_ContinuanceToken_ToString(InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}
		public override string ToString()
		{
			Utf8String callResult;
			ToString(out callResult);
			return callResult;
		}

		public override string ToString(string format, IFormatProvider formatProvider)
		{
			if (format != null)
			{
				return string.Format(format, ToString());
			}

			return ToString();
		}

		public static explicit operator Utf8String(ContinuanceToken continuanceToken)
		{
			Utf8String callResult = null;

			if (continuanceToken != null)
			{
				continuanceToken.ToString(out callResult);
			}

			return callResult;
		}
	}
}

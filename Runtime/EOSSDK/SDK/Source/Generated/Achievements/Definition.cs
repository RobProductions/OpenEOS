// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single achievement definition with localized text.
	/// </summary>
	public struct Definition
	{
		/// <summary>
		/// Achievement ID that can be used to uniquely identify the achievement.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// Text representing the Name to display in-game when achievement has been unlocked.
		/// </summary>
		public Utf8String DisplayName { get; set; }

		/// <summary>
		/// Text representing the description to display in-game when achievement has been unlocked.
		/// </summary>
		public Utf8String Description { get; set; }

		/// <summary>
		/// Text representing the name to display in-game when achievement is locked.
		/// </summary>
		public Utf8String LockedDisplayName { get; set; }

		/// <summary>
		/// Text representing the description of what needs to be done to trigger the unlock of this achievement.
		/// </summary>
		public Utf8String LockedDescription { get; set; }

		/// <summary>
		/// Text representing the description to display in-game when achievement is hidden.
		/// </summary>
		public Utf8String HiddenDescription { get; set; }

		/// <summary>
		/// Text representing the description of what happens when the achievement is unlocked.
		/// </summary>
		public Utf8String CompletionDescription { get; set; }

		/// <summary>
		/// Text representing the icon to display in-game when achievement is unlocked.
		/// </summary>
		public Utf8String UnlockedIconId { get; set; }

		/// <summary>
		/// Text representing the icon to display in-game when achievement is locked.
		/// </summary>
		public Utf8String LockedIconId { get; set; }

		/// <summary>
		/// True if achievement is hidden, <see langword="false" /> otherwise.
		/// </summary>
		public bool IsHidden { get; set; }

		/// <summary>
		/// Array of stat thresholds that need to be satisfied to unlock the achievement.
		/// </summary>
		public StatThresholds[] StatThresholds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct DefinitionInternal : IGettable<Definition>
	{
		private int m_ApiVersion;
		private IntPtr m_AchievementId;
		private IntPtr m_DisplayName;
		private IntPtr m_Description;
		private IntPtr m_LockedDisplayName;
		private IntPtr m_LockedDescription;
		private IntPtr m_HiddenDescription;
		private IntPtr m_CompletionDescription;
		private IntPtr m_UnlockedIconId;
		private IntPtr m_LockedIconId;
		private int m_IsHidden;
		private int m_StatThresholdsCount;
		private IntPtr m_StatThresholds;

		public void Get(out Definition other)
		{
			other = default;
			
			Utf8String AchievementIdPublic;
			Helper.Get(m_AchievementId, out AchievementIdPublic);
			other.AchievementId = AchievementIdPublic;
			Utf8String DisplayNamePublic;
			Helper.Get(m_DisplayName, out DisplayNamePublic);
			other.DisplayName = DisplayNamePublic;
			Utf8String DescriptionPublic;
			Helper.Get(m_Description, out DescriptionPublic);
			other.Description = DescriptionPublic;
			Utf8String LockedDisplayNamePublic;
			Helper.Get(m_LockedDisplayName, out LockedDisplayNamePublic);
			other.LockedDisplayName = LockedDisplayNamePublic;
			Utf8String LockedDescriptionPublic;
			Helper.Get(m_LockedDescription, out LockedDescriptionPublic);
			other.LockedDescription = LockedDescriptionPublic;
			Utf8String HiddenDescriptionPublic;
			Helper.Get(m_HiddenDescription, out HiddenDescriptionPublic);
			other.HiddenDescription = HiddenDescriptionPublic;
			Utf8String CompletionDescriptionPublic;
			Helper.Get(m_CompletionDescription, out CompletionDescriptionPublic);
			other.CompletionDescription = CompletionDescriptionPublic;
			Utf8String UnlockedIconIdPublic;
			Helper.Get(m_UnlockedIconId, out UnlockedIconIdPublic);
			other.UnlockedIconId = UnlockedIconIdPublic;
			Utf8String LockedIconIdPublic;
			Helper.Get(m_LockedIconId, out LockedIconIdPublic);
			other.LockedIconId = LockedIconIdPublic;
			bool IsHiddenPublic;
			Helper.Get(m_IsHidden, out IsHiddenPublic);
			other.IsHidden = IsHiddenPublic;
			StatThresholds[] StatThresholdsPublic;
			Helper.Get<StatThresholdsInternal, StatThresholds>(m_StatThresholds, out StatThresholdsPublic, m_StatThresholdsCount, false);
			other.StatThresholds = StatThresholdsPublic;
		}
	}
}

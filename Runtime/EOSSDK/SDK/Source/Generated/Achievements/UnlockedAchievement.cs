// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single unlocked achievement.
	/// </summary>
	public struct UnlockedAchievement
	{
		/// <summary>
		/// Achievement ID that can be used to uniquely identify the unlocked achievement.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// If not <see cref="AchievementsInterface.ACHIEVEMENT_UNLOCKTIME_UNDEFINED" /> then this is the POSIX timestamp that the achievement was unlocked.
		/// </summary>
		public DateTimeOffset? UnlockTime { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct UnlockedAchievementInternal : IGettable<UnlockedAchievement>
	{
		private int m_ApiVersion;
		private IntPtr m_AchievementId;
		private long m_UnlockTime;

		public void Get(out UnlockedAchievement other)
		{
			other = default;
			
			Utf8String AchievementIdPublic;
			Helper.Get(m_AchievementId, out AchievementIdPublic);
			other.AchievementId = AchievementIdPublic;
			DateTimeOffset? UnlockTimePublic;
			Helper.Get(m_UnlockTime, out UnlockTimePublic);
			other.UnlockTime = UnlockTimePublic;
		}
	}
}

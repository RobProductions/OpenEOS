// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single player achievement.
	/// </summary>
	public struct PlayerAchievement
	{
		/// <summary>
		/// This achievement's unique identifier.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// Progress towards completing this achievement (as a percentage).
		/// </summary>
		public double Progress { get; set; }

		/// <summary>
		/// The POSIX timestamp when the achievement was unlocked. If the achievement has not been unlocked, this value will be <see cref="AchievementsInterface.ACHIEVEMENT_UNLOCKTIME_UNDEFINED" />.
		/// </summary>
		public DateTimeOffset? UnlockTime { get; set; }

		/// <summary>
		/// Array of <see cref="PlayerStatInfo" /> structures containing information about stat thresholds used to unlock the achievement and the player's current values for those stats.
		/// </summary>
		public PlayerStatInfo[] StatInfo { get; set; }

		/// <summary>
		/// Localized display name for the achievement based on this specific player's current progress on the achievement.
		/// The current progress is updated when <see cref="AchievementsInterface.QueryPlayerAchievements" /> succeeds and when an achievement is unlocked.
		/// </summary>
		public Utf8String DisplayName { get; set; }

		/// <summary>
		/// Localized description for the achievement based on this specific player's current progress on the achievement.
		/// The current progress is updated when <see cref="AchievementsInterface.QueryPlayerAchievements" /> succeeds and when an achievement is unlocked.
		/// </summary>
		public Utf8String Description { get; set; }

		/// <summary>
		/// URL of an icon to display for the achievement based on this specific player's current progress on the achievement. This may be <see langword="null" /> if there is no data configured in the dev portal.
		/// The current progress is updated when <see cref="AchievementsInterface.QueryPlayerAchievements" /> succeeds and when an achievement is unlocked.
		/// </summary>
		public Utf8String IconURL { get; set; }

		/// <summary>
		/// Localized flavor text that can be used by the game in an arbitrary manner. This may be <see langword="null" /> if there is no data configured in the dev portal.
		/// </summary>
		public Utf8String FlavorText { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct PlayerAchievementInternal : IGettable<PlayerAchievement>
	{
		private int m_ApiVersion;
		private IntPtr m_AchievementId;
		private double m_Progress;
		private long m_UnlockTime;
		private int m_StatInfoCount;
		private IntPtr m_StatInfo;
		private IntPtr m_DisplayName;
		private IntPtr m_Description;
		private IntPtr m_IconURL;
		private IntPtr m_FlavorText;

		public void Get(out PlayerAchievement other)
		{
			other = default;
			
			Utf8String AchievementIdPublic;
			Helper.Get(m_AchievementId, out AchievementIdPublic);
			other.AchievementId = AchievementIdPublic;
			other.Progress = m_Progress;
			DateTimeOffset? UnlockTimePublic;
			Helper.Get(m_UnlockTime, out UnlockTimePublic);
			other.UnlockTime = UnlockTimePublic;
			PlayerStatInfo[] StatInfoPublic;
			Helper.Get<PlayerStatInfoInternal, PlayerStatInfo>(m_StatInfo, out StatInfoPublic, m_StatInfoCount, false);
			other.StatInfo = StatInfoPublic;
			Utf8String DisplayNamePublic;
			Helper.Get(m_DisplayName, out DisplayNamePublic);
			other.DisplayName = DisplayNamePublic;
			Utf8String DescriptionPublic;
			Helper.Get(m_Description, out DescriptionPublic);
			other.Description = DescriptionPublic;
			Utf8String IconURLPublic;
			Helper.Get(m_IconURL, out IconURLPublic);
			other.IconURL = IconURLPublic;
			Utf8String FlavorTextPublic;
			Helper.Get(m_FlavorText, out FlavorTextPublic);
			other.FlavorText = FlavorTextPublic;
		}
	}
}

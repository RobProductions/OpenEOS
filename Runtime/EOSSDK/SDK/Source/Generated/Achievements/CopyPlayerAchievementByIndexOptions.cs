// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Input parameters for the <see cref="AchievementsInterface.CopyPlayerAchievementByIndex" /> function.
	/// </summary>
	public struct CopyPlayerAchievementByIndexOptions
	{
		/// <summary>
		/// The Product User ID for the user whose achievement is to be retrieved.
		/// </summary>
		public ProductUserId TargetUserId { get; set; }

		/// <summary>
		/// The index of the player achievement data to retrieve from the cache.
		/// </summary>
		public uint AchievementIndex { get; set; }

		/// <summary>
		/// The Product User ID for the user who is querying for a player achievement. For a Dedicated Server this should be <see langword="null" />.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CopyPlayerAchievementByIndexOptionsInternal : ISettable<CopyPlayerAchievementByIndexOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_TargetUserId;
		private uint m_AchievementIndex;
		private IntPtr m_LocalUserId;

		public void Set(ref CopyPlayerAchievementByIndexOptions other)
		{
			Dispose();

			m_ApiVersion = AchievementsInterface.COPYPLAYERACHIEVEMENTBYINDEX_API_LATEST;
			Helper.Set(other.TargetUserId, ref m_TargetUserId);
			m_AchievementIndex = other.AchievementIndex;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_TargetUserId);
			Helper.Dispose(ref m_LocalUserId);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single achievement definition with localized text.
	/// </summary>
	public struct DefinitionV2
	{
		/// <summary>
		/// Achievement ID that can be used to uniquely identify the achievement.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// Localized display name for the achievement when it has been unlocked.
		/// </summary>
		public Utf8String UnlockedDisplayName { get; set; }

		/// <summary>
		/// Localized description for the achievement when it has been unlocked.
		/// </summary>
		public Utf8String UnlockedDescription { get; set; }

		/// <summary>
		/// Localized display name for the achievement when it is locked or hidden.
		/// </summary>
		public Utf8String LockedDisplayName { get; set; }

		/// <summary>
		/// Localized description for the achievement when it is locked or hidden.
		/// </summary>
		public Utf8String LockedDescription { get; set; }

		/// <summary>
		/// Localized flavor text that can be used by the game in an arbitrary manner. This may be <see langword="null" /> if there is no data configured in the dev portal.
		/// </summary>
		public Utf8String FlavorText { get; set; }

		/// <summary>
		/// URL of an icon to display for the achievement when it is unlocked. This may be <see langword="null" /> if there is no data configured in the dev portal.
		/// </summary>
		public Utf8String UnlockedIconURL { get; set; }

		/// <summary>
		/// URL of an icon to display for the achievement when it is locked or hidden. This may be <see langword="null" /> if there is no data configured in the dev portal.
		/// </summary>
		public Utf8String LockedIconURL { get; set; }

		/// <summary>
		/// <see langword="true" /> if the achievement is hidden; <see langword="false" /> otherwise.
		/// </summary>
		public bool IsHidden { get; set; }

		/// <summary>
		/// Array of `<see cref="StatThresholds" />` that need to be satisfied to unlock this achievement. Consists of Name and Threshold Value.
		/// </summary>
		public StatThresholds[] StatThresholds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct DefinitionV2Internal : IGettable<DefinitionV2>
	{
		private int m_ApiVersion;
		private IntPtr m_AchievementId;
		private IntPtr m_UnlockedDisplayName;
		private IntPtr m_UnlockedDescription;
		private IntPtr m_LockedDisplayName;
		private IntPtr m_LockedDescription;
		private IntPtr m_FlavorText;
		private IntPtr m_UnlockedIconURL;
		private IntPtr m_LockedIconURL;
		private int m_IsHidden;
		private uint m_StatThresholdsCount;
		private IntPtr m_StatThresholds;

		public void Get(out DefinitionV2 other)
		{
			other = default;
			
			Utf8String AchievementIdPublic;
			Helper.Get(m_AchievementId, out AchievementIdPublic);
			other.AchievementId = AchievementIdPublic;
			Utf8String UnlockedDisplayNamePublic;
			Helper.Get(m_UnlockedDisplayName, out UnlockedDisplayNamePublic);
			other.UnlockedDisplayName = UnlockedDisplayNamePublic;
			Utf8String UnlockedDescriptionPublic;
			Helper.Get(m_UnlockedDescription, out UnlockedDescriptionPublic);
			other.UnlockedDescription = UnlockedDescriptionPublic;
			Utf8String LockedDisplayNamePublic;
			Helper.Get(m_LockedDisplayName, out LockedDisplayNamePublic);
			other.LockedDisplayName = LockedDisplayNamePublic;
			Utf8String LockedDescriptionPublic;
			Helper.Get(m_LockedDescription, out LockedDescriptionPublic);
			other.LockedDescription = LockedDescriptionPublic;
			Utf8String FlavorTextPublic;
			Helper.Get(m_FlavorText, out FlavorTextPublic);
			other.FlavorText = FlavorTextPublic;
			Utf8String UnlockedIconURLPublic;
			Helper.Get(m_UnlockedIconURL, out UnlockedIconURLPublic);
			other.UnlockedIconURL = UnlockedIconURLPublic;
			Utf8String LockedIconURLPublic;
			Helper.Get(m_LockedIconURL, out LockedIconURLPublic);
			other.LockedIconURL = LockedIconURLPublic;
			bool IsHiddenPublic;
			Helper.Get(m_IsHidden, out IsHiddenPublic);
			other.IsHidden = IsHiddenPublic;
			StatThresholds[] StatThresholdsPublic;
			Helper.Get<StatThresholdsInternal, StatThresholds>(m_StatThresholds, out StatThresholdsPublic, m_StatThresholdsCount, false);
			other.StatThresholds = StatThresholdsPublic;
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Output parameters for the <see cref="OnAchievementsUnlockedCallback" /> Function.
	/// </summary>
	public struct OnAchievementsUnlockedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Context that was passed into <see cref="AchievementsInterface.AddNotifyAchievementsUnlocked" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID for the user who received the unlocked achievements notification
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// This member is not used and will always be set to <see langword="null" />.
		/// </summary>
		public Utf8String[] AchievementIds { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct OnAchievementsUnlockedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_UserId;
		private uint m_AchievementsCount;
		private IntPtr m_AchievementIds;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out OnAchievementsUnlockedCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId UserIdPublic;
			Helper.Get(m_UserId, out UserIdPublic);
			other.UserId = UserIdPublic;
			Utf8String[] AchievementIdsPublic;
			Helper.Get(m_AchievementIds, out AchievementIdsPublic, m_AchievementsCount, true);
			other.AchievementIds = AchievementIdsPublic;
		}
	}
}

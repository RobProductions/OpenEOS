// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Output parameters for the <see cref="OnAchievementsUnlockedCallbackV2" /> Function.
	/// </summary>
	public struct OnAchievementsUnlockedCallbackV2Info : ICallbackInfo
	{
		/// <summary>
		/// Context that was passed into <see cref="AchievementsInterface.AddNotifyAchievementsUnlocked" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID for the user who received the unlocked achievements notification
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// The Achievement ID for the achievement that was unlocked. Pass this to <see cref="AchievementsInterface.CopyPlayerAchievementByAchievementId" /> to get the full achievement information.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// POSIX timestamp when the achievement was unlocked.
		/// </summary>
		public DateTimeOffset? UnlockTime { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct OnAchievementsUnlockedCallbackV2InfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackV2Info>
	{
		private IntPtr m_ClientData;
		private IntPtr m_UserId;
		private IntPtr m_AchievementId;
		private long m_UnlockTime;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out OnAchievementsUnlockedCallbackV2Info other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId UserIdPublic;
			Helper.Get(m_UserId, out UserIdPublic);
			other.UserId = UserIdPublic;
			Utf8String AchievementIdPublic;
			Helper.Get(m_AchievementId, out AchievementIdPublic);
			other.AchievementId = AchievementIdPublic;
			DateTimeOffset? UnlockTimePublic;
			Helper.Get(m_UnlockTime, out UnlockTimePublic);
			other.UnlockTime = UnlockTimePublic;
		}
	}
}

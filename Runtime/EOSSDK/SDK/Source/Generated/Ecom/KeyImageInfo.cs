// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a key image used by the catalog. Instances of this structure are
	/// created by <see cref="EcomInterface.CopyItemImageInfoByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// A Key Image is defined within Dev Portal and is associated with a Catalog Item. A Key Image is
	/// intended to be used to provide imagery for an in-game store.
	/// <see cref="EcomInterface.CopyItemImageInfoByIndex" />
	/// <see cref="EcomInterface.Release" />
	/// </summary>
	public struct KeyImageInfo
	{
		/// <summary>
		/// Describes the usage of the image (ex: home_thumbnail)
		/// </summary>
		public Utf8String Type { get; set; }

		/// <summary>
		/// The URL of the image
		/// </summary>
		public Utf8String Url { get; set; }

		/// <summary>
		/// The expected width in pixels of the image
		/// </summary>
		public uint Width { get; set; }

		/// <summary>
		/// The expected height in pixels of the image
		/// </summary>
		public uint Height { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct KeyImageInfoInternal : IGettable<KeyImageInfo>
	{
		private int m_ApiVersion;
		private IntPtr m_Type;
		private IntPtr m_Url;
		private uint m_Width;
		private uint m_Height;

		public void Get(out KeyImageInfo other)
		{
			other = default;
			
			Utf8String TypePublic;
			Helper.Get(m_Type, out TypePublic);
			other.Type = TypePublic;
			Utf8String UrlPublic;
			Helper.Get(m_Url, out UrlPublic);
			other.Url = UrlPublic;
			other.Width = m_Width;
			other.Height = m_Height;
		}
	}
}

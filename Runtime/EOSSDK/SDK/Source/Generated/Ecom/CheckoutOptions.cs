// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Input parameters for the <see cref="EcomInterface.Checkout" /> function.
	/// </summary>
	public struct CheckoutOptions
	{
		/// <summary>
		/// The Epic Account ID of the local user who is making the purchase
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// The catalog namespace will be the current Sandbox ID (in <see cref="Platform.Options" />) unless overridden by this field
		/// </summary>
		public Utf8String OverrideCatalogNamespace { get; set; }

		/// <summary>
		/// An array of <see cref="CheckoutEntry" /> elements, each containing the details of a single offer
		/// </summary>
		public CheckoutEntry[] Entries { get; set; }

		/// <summary>
		/// Preferred device orientation, specifies Default, Portrait or Landscape.
		/// This is used only on mobile platforms currently.
		/// SDK can use it to optimize how the Checkout page should be displayed.
		/// Please check the mobile SDK documentation for additional required setup.
		/// </summary>
		public CheckoutOrientation PreferredOrientation { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CheckoutOptionsInternal : ISettable<CheckoutOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_OverrideCatalogNamespace;
		private uint m_EntryCount;
		private IntPtr m_Entries;
		private CheckoutOrientation m_PreferredOrientation;

		public void Set(ref CheckoutOptions other)
		{
			Dispose();

			m_ApiVersion = EcomInterface.CHECKOUT_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.OverrideCatalogNamespace, ref m_OverrideCatalogNamespace);
			Helper.Set<CheckoutEntry, CheckoutEntryInternal>(other.Entries, ref m_Entries, out m_EntryCount, false);
			m_PreferredOrientation = other.PreferredOrientation;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_OverrideCatalogNamespace);
			Helper.Dispose(ref m_Entries);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single item within the catalog. Instances of this structure are created
	/// by <see cref="EcomInterface.CopyOfferItemByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// </summary>
	public struct CatalogItem
	{
		/// <summary>
		/// Product namespace in which this item exists
		/// </summary>
		public Utf8String CatalogNamespace { get; set; }

		/// <summary>
		/// The ID of this item
		/// </summary>
		public Utf8String Id { get; set; }

		/// <summary>
		/// The entitlement name associated with this item
		/// </summary>
		public Utf8String EntitlementName { get; set; }

		/// <summary>
		/// Localized UTF-8 title of this item
		/// </summary>
		public Utf8String TitleText { get; set; }

		/// <summary>
		/// Localized UTF-8 description of this item
		/// </summary>
		public Utf8String DescriptionText { get; set; }

		/// <summary>
		/// Localized UTF-8 long description of this item
		/// </summary>
		public Utf8String LongDescriptionText { get; set; }

		/// <summary>
		/// Localized UTF-8 technical details of this item
		/// </summary>
		public Utf8String TechnicalDetailsText { get; set; }

		/// <summary>
		/// Localized UTF-8 developer of this item
		/// </summary>
		public Utf8String DeveloperText { get; set; }

		/// <summary>
		/// The type of item as defined in the catalog
		/// </summary>
		public EcomItemType ItemType { get; set; }

		/// <summary>
		/// If not -1 then this is the POSIX timestamp that the entitlement will end
		/// </summary>
		public long EntitlementEndTimestamp { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CatalogItemInternal : IGettable<CatalogItem>
	{
		private int m_ApiVersion;
		private IntPtr m_CatalogNamespace;
		private IntPtr m_Id;
		private IntPtr m_EntitlementName;
		private IntPtr m_TitleText;
		private IntPtr m_DescriptionText;
		private IntPtr m_LongDescriptionText;
		private IntPtr m_TechnicalDetailsText;
		private IntPtr m_DeveloperText;
		private EcomItemType m_ItemType;
		private long m_EntitlementEndTimestamp;

		public void Get(out CatalogItem other)
		{
			other = default;
			
			Utf8String CatalogNamespacePublic;
			Helper.Get(m_CatalogNamespace, out CatalogNamespacePublic);
			other.CatalogNamespace = CatalogNamespacePublic;
			Utf8String IdPublic;
			Helper.Get(m_Id, out IdPublic);
			other.Id = IdPublic;
			Utf8String EntitlementNamePublic;
			Helper.Get(m_EntitlementName, out EntitlementNamePublic);
			other.EntitlementName = EntitlementNamePublic;
			Utf8String TitleTextPublic;
			Helper.Get(m_TitleText, out TitleTextPublic);
			other.TitleText = TitleTextPublic;
			Utf8String DescriptionTextPublic;
			Helper.Get(m_DescriptionText, out DescriptionTextPublic);
			other.DescriptionText = DescriptionTextPublic;
			Utf8String LongDescriptionTextPublic;
			Helper.Get(m_LongDescriptionText, out LongDescriptionTextPublic);
			other.LongDescriptionText = LongDescriptionTextPublic;
			Utf8String TechnicalDetailsTextPublic;
			Helper.Get(m_TechnicalDetailsText, out TechnicalDetailsTextPublic);
			other.TechnicalDetailsText = TechnicalDetailsTextPublic;
			Utf8String DeveloperTextPublic;
			Helper.Get(m_DeveloperText, out DeveloperTextPublic);
			other.DeveloperText = DeveloperTextPublic;
			other.ItemType = m_ItemType;
			other.EntitlementEndTimestamp = m_EntitlementEndTimestamp;
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Ecom
{
	public sealed partial class Transaction : Handle
	{
		public Transaction()
		{
		}

		public Transaction(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// Fetches an entitlement from a given index.
		/// <see cref="EcomInterface.Release" />
		/// </summary>
		/// <param name="options">
		/// structure containing the index being accessed
		/// </param>
		/// <param name="outEntitlement">
		/// the entitlement for the given index, if it exists and is valid, use <see cref="EcomInterface.Release" /> when finished
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutEntitlement
		/// <see cref="Result.EcomEntitlementStale" /> if the entitlement information is stale and passed out in OutEntitlement
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the entitlement is not found
		/// </returns>
		public Result CopyEntitlementByIndex(ref TransactionCopyEntitlementByIndexOptions options, out Entitlement? outEntitlement)
		{
			var optionsInternal = default(TransactionCopyEntitlementByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outEntitlementPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Ecom_Transaction_CopyEntitlementByIndex(InnerHandle, ref optionsInternal, out outEntitlementPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<EntitlementInternal, Entitlement>(outEntitlementPointer, out outEntitlement);
			if (outEntitlementPointer != IntPtr.Zero)
			{
				Bindings.EOS_Ecom_Entitlement_Release(outEntitlementPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetch the number of entitlements that are part of this transaction.
		/// <see cref="CopyEntitlementByIndex" />
		/// </summary>
		/// <param name="options">
		/// structure containing the Epic Account ID being accessed
		/// </param>
		/// <returns>
		/// the number of entitlements found.
		/// </returns>
		public uint GetEntitlementsCount(ref TransactionGetEntitlementsCountOptions options)
		{
			var optionsInternal = default(TransactionGetEntitlementsCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Ecom_Transaction_GetEntitlementsCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// The Ecom Transaction Interface exposes getters for accessing information about a completed transaction.
		/// All Ecom Transaction Interface calls take a handle of type <see cref="Transaction" /> as the first parameter.
		/// An <see cref="Transaction" /> handle is originally returned as part of the <see cref="CheckoutCallbackInfo" /> struct.
		/// An <see cref="Transaction" /> handle can also be retrieved from an <see cref="EcomInterface" /> handle using <see cref="EcomInterface.CopyTransactionByIndex" />.
		/// It is expected that after a transaction that <see cref="Release" /> is called.
		/// When <see cref="Platform.PlatformInterface.Release" /> is called any remaining transactions will also be released.
		/// <see cref="CheckoutCallbackInfo" />
		/// <see cref="EcomInterface.GetTransactionCount" />
		/// <see cref="EcomInterface.CopyTransactionByIndex" />
		/// </summary>
		public Result GetTransactionId(out Utf8String outBuffer)
		{
			int inOutBufferLength = EcomInterface.TRANSACTIONID_MAXIMUM_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_Ecom_Transaction_GetTransactionId(InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}

		/// <summary>
		/// Release the memory associated with an <see cref="Transaction" />. Is expected to be called after
		/// being received from a <see cref="CheckoutCallbackInfo" />.
		/// <see cref="CheckoutCallbackInfo" />
		/// <see cref="EcomInterface.GetTransactionCount" />
		/// <see cref="EcomInterface.CopyTransactionByIndex" />
		/// </summary>
		/// <param name="transaction">
		/// A handle to a transaction.
		/// </param>
		public void Release()
		{
			Bindings.EOS_Ecom_Transaction_Release(InnerHandle);
		}
	}
}

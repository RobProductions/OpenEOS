// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single release within the catalog. Instances of this structure are
	/// created by <see cref="EcomInterface.CopyItemReleaseByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// </summary>
	public struct CatalogRelease
	{
		/// <summary>
		/// A list of compatible APP IDs
		/// </summary>
		public Utf8String[] CompatibleAppIds { get; set; }

		/// <summary>
		/// A list of compatible Platforms
		/// </summary>
		public Utf8String[] CompatiblePlatforms { get; set; }

		/// <summary>
		/// Release note for compatible versions
		/// </summary>
		public Utf8String ReleaseNote { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CatalogReleaseInternal : IGettable<CatalogRelease>
	{
		private int m_ApiVersion;
		private uint m_CompatibleAppIdCount;
		private IntPtr m_CompatibleAppIds;
		private uint m_CompatiblePlatformCount;
		private IntPtr m_CompatiblePlatforms;
		private IntPtr m_ReleaseNote;

		public void Get(out CatalogRelease other)
		{
			other = default;
			
			Utf8String[] CompatibleAppIdsPublic;
			Helper.Get(m_CompatibleAppIds, out CompatibleAppIdsPublic, m_CompatibleAppIdCount, true);
			other.CompatibleAppIds = CompatibleAppIdsPublic;
			Utf8String[] CompatiblePlatformsPublic;
			Helper.Get(m_CompatiblePlatforms, out CompatiblePlatformsPublic, m_CompatiblePlatformCount, true);
			other.CompatiblePlatforms = CompatiblePlatformsPublic;
			Utf8String ReleaseNotePublic;
			Helper.Get(m_ReleaseNote, out ReleaseNotePublic);
			other.ReleaseNote = ReleaseNotePublic;
		}
	}
}

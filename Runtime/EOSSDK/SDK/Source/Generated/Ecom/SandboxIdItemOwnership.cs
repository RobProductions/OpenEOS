// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains all owned catalog items for a sandbox ID. This structure is
	/// returned as part of the <see cref="QueryOwnershipBySandboxIdsCallbackInfo" /> structure.
	/// Note: The SandboxID and CatalogItemId <see cref="Utf8String" /> will not remain valid after <see cref="OnQueryOwnershipBySandboxIdsCallback" />, so a copy should be as needed.
	/// </summary>
	public struct SandboxIdItemOwnership
	{
		/// <summary>
		/// SandboxId
		/// </summary>
		public Utf8String SandboxId { get; set; }

		/// <summary>
		/// List of all owned catalog items for this SandboxId
		/// </summary>
		public Utf8String[] OwnedCatalogItemIds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct SandboxIdItemOwnershipInternal : IGettable<SandboxIdItemOwnership>
	{
		private IntPtr m_SandboxId;
		private IntPtr m_OwnedCatalogItemIds;
		private uint m_OwnedCatalogItemIdsCount;

		public void Get(out SandboxIdItemOwnership other)
		{
			other = default;
			
			Utf8String SandboxIdPublic;
			Helper.Get(m_SandboxId, out SandboxIdPublic);
			other.SandboxId = SandboxIdPublic;
			Utf8String[] OwnedCatalogItemIdsPublic;
			Helper.Get(m_OwnedCatalogItemIds, out OwnedCatalogItemIdsPublic, m_OwnedCatalogItemIdsCount, true);
			other.OwnedCatalogItemIds = OwnedCatalogItemIdsPublic;
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single offer within the catalog. Instances of this structure are
	/// created by <see cref="EcomInterface.CopyOfferByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// Prices are stored in the lowest denomination for the associated currency. If CurrencyCode is
	/// "USD" then a price of 299 represents "$2.99".
	/// </summary>
	public struct CatalogOffer
	{
		/// <summary>
		/// The index of this offer as it exists on the server.
		/// This is useful for understanding pagination data.
		/// </summary>
		public int ServerIndex { get; set; }

		/// <summary>
		/// Product namespace in which this offer exists
		/// </summary>
		public Utf8String CatalogNamespace { get; set; }

		/// <summary>
		/// The ID of this offer
		/// </summary>
		public Utf8String Id { get; set; }

		/// <summary>
		/// Localized UTF-8 title of this offer
		/// </summary>
		public Utf8String TitleText { get; set; }

		/// <summary>
		/// Localized UTF-8 description of this offer
		/// </summary>
		public Utf8String DescriptionText { get; set; }

		/// <summary>
		/// Localized UTF-8 long description of this offer
		/// </summary>
		public Utf8String LongDescriptionText { get; set; }

		/// <summary>
		/// Deprecated.
		/// <see cref="CatalogItem.TechnicalDetailsText" /> is still valid.
		/// </summary>
		public Utf8String TechnicalDetailsText_DEPRECATED { get; set; }

		/// <summary>
		/// The Currency Code for this offer
		/// </summary>
		public Utf8String CurrencyCode { get; set; }

		/// <summary>
		/// If this value is <see cref="Result.Success" /> then OriginalPrice, CurrentPrice, and DiscountPercentage contain valid data.
		/// Otherwise this value represents the error that occurred on the price query.
		/// </summary>
		public Result PriceResult { get; set; }

		/// <summary>
		/// The original price of this offer as a 32-bit number is deprecated.
		/// </summary>
		public uint OriginalPrice_DEPRECATED { get; set; }

		/// <summary>
		/// The current price including discounts of this offer as a 32-bit number is deprecated..
		/// </summary>
		public uint CurrentPrice_DEPRECATED { get; set; }

		/// <summary>
		/// A value from 0 to 100 define the percentage of the OrignalPrice that the CurrentPrice represents
		/// </summary>
		public byte DiscountPercentage { get; set; }

		/// <summary>
		/// Contains the POSIX timestamp that the offer expires or -1 if it does not expire
		/// </summary>
		public long ExpirationTimestamp { get; set; }

		/// <summary>
		/// The number of times that the requesting account has purchased this offer.
		/// This value is deprecated and the backend no longer returns this value.
		/// </summary>
		public uint PurchasedCount_DEPRECATED { get; set; }

		/// <summary>
		/// The maximum number of times that the offer can be purchased.
		/// A negative value implies there is no limit.
		/// </summary>
		public int PurchaseLimit { get; set; }

		/// <summary>
		/// True if the user can purchase this offer.
		/// </summary>
		public bool AvailableForPurchase { get; set; }

		/// <summary>
		/// The original price of this offer as a 64-bit number.
		/// </summary>
		public ulong OriginalPrice64 { get; set; }

		/// <summary>
		/// The current price including discounts of this offer as a 64-bit number.
		/// </summary>
		public ulong CurrentPrice64 { get; set; }

		/// <summary>
		/// The decimal point for the provided price. For example, DecimalPoint '2' and CurrentPrice64 '12345' would be '123.45'.
		/// </summary>
		public uint DecimalPoint { get; set; }

		/// <summary>
		/// Timestamp indicating when the time when the offer was released. Can be ignored if set to -1.
		/// </summary>
		public long ReleaseDateTimestamp { get; set; }

		/// <summary>
		/// Timestamp indicating the effective date of the offer. Can be ignored if set to -1.
		/// </summary>
		public long EffectiveDateTimestamp { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CatalogOfferInternal : IGettable<CatalogOffer>
	{
		private int m_ApiVersion;
		private int m_ServerIndex;
		private IntPtr m_CatalogNamespace;
		private IntPtr m_Id;
		private IntPtr m_TitleText;
		private IntPtr m_DescriptionText;
		private IntPtr m_LongDescriptionText;
		private IntPtr m_TechnicalDetailsText_DEPRECATED;
		private IntPtr m_CurrencyCode;
		private Result m_PriceResult;
		private uint m_OriginalPrice_DEPRECATED;
		private uint m_CurrentPrice_DEPRECATED;
		private byte m_DiscountPercentage;
		private long m_ExpirationTimestamp;
		private uint m_PurchasedCount_DEPRECATED;
		private int m_PurchaseLimit;
		private int m_AvailableForPurchase;
		private ulong m_OriginalPrice64;
		private ulong m_CurrentPrice64;
		private uint m_DecimalPoint;
		private long m_ReleaseDateTimestamp;
		private long m_EffectiveDateTimestamp;

		public void Get(out CatalogOffer other)
		{
			other = default;
			
			other.ServerIndex = m_ServerIndex;
			Utf8String CatalogNamespacePublic;
			Helper.Get(m_CatalogNamespace, out CatalogNamespacePublic);
			other.CatalogNamespace = CatalogNamespacePublic;
			Utf8String IdPublic;
			Helper.Get(m_Id, out IdPublic);
			other.Id = IdPublic;
			Utf8String TitleTextPublic;
			Helper.Get(m_TitleText, out TitleTextPublic);
			other.TitleText = TitleTextPublic;
			Utf8String DescriptionTextPublic;
			Helper.Get(m_DescriptionText, out DescriptionTextPublic);
			other.DescriptionText = DescriptionTextPublic;
			Utf8String LongDescriptionTextPublic;
			Helper.Get(m_LongDescriptionText, out LongDescriptionTextPublic);
			other.LongDescriptionText = LongDescriptionTextPublic;
			Utf8String TechnicalDetailsText_DEPRECATEDPublic;
			Helper.Get(m_TechnicalDetailsText_DEPRECATED, out TechnicalDetailsText_DEPRECATEDPublic);
			other.TechnicalDetailsText_DEPRECATED = TechnicalDetailsText_DEPRECATEDPublic;
			Utf8String CurrencyCodePublic;
			Helper.Get(m_CurrencyCode, out CurrencyCodePublic);
			other.CurrencyCode = CurrencyCodePublic;
			other.PriceResult = m_PriceResult;
			other.OriginalPrice_DEPRECATED = m_OriginalPrice_DEPRECATED;
			other.CurrentPrice_DEPRECATED = m_CurrentPrice_DEPRECATED;
			other.DiscountPercentage = m_DiscountPercentage;
			other.ExpirationTimestamp = m_ExpirationTimestamp;
			other.PurchasedCount_DEPRECATED = m_PurchasedCount_DEPRECATED;
			other.PurchaseLimit = m_PurchaseLimit;
			bool AvailableForPurchasePublic;
			Helper.Get(m_AvailableForPurchase, out AvailableForPurchasePublic);
			other.AvailableForPurchase = AvailableForPurchasePublic;
			other.OriginalPrice64 = m_OriginalPrice64;
			other.CurrentPrice64 = m_CurrentPrice64;
			other.DecimalPoint = m_DecimalPoint;
			other.ReleaseDateTimestamp = m_ReleaseDateTimestamp;
			other.EffectiveDateTimestamp = m_EffectiveDateTimestamp;
		}
	}
}

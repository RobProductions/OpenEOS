// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single entitlement associated with an account. Instances of this structure are
	/// created by <see cref="EcomInterface.CopyEntitlementByIndex" />, <see cref="EcomInterface.CopyEntitlementByNameAndIndex" />, or <see cref="EcomInterface.CopyEntitlementById" />.
	/// They must be passed to <see cref="EcomInterface.Release" />.
	/// </summary>
	public struct Entitlement
	{
		/// <summary>
		/// Name of the entitlement
		/// </summary>
		public Utf8String EntitlementName { get; set; }

		/// <summary>
		/// ID of the entitlement owned by an account
		/// </summary>
		public Utf8String EntitlementId { get; set; }

		/// <summary>
		/// ID of the item associated with the offer which granted this entitlement
		/// </summary>
		public Utf8String CatalogItemId { get; set; }

		/// <summary>
		/// If queried using pagination then ServerIndex represents the index of the entitlement as it
		/// exists on the server. If not queried using pagination then ServerIndex will be -1.
		/// </summary>
		public int ServerIndex { get; set; }

		/// <summary>
		/// If <see langword="true" /> then the catalog has this entitlement marked as redeemed
		/// </summary>
		public bool Redeemed { get; set; }

		/// <summary>
		/// If not -1 then this is a POSIX timestamp that this entitlement will end
		/// </summary>
		public long EndTimestamp { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct EntitlementInternal : IGettable<Entitlement>
	{
		private int m_ApiVersion;
		private IntPtr m_EntitlementName;
		private IntPtr m_EntitlementId;
		private IntPtr m_CatalogItemId;
		private int m_ServerIndex;
		private int m_Redeemed;
		private long m_EndTimestamp;

		public void Get(out Entitlement other)
		{
			other = default;
			
			Utf8String EntitlementNamePublic;
			Helper.Get(m_EntitlementName, out EntitlementNamePublic);
			other.EntitlementName = EntitlementNamePublic;
			Utf8String EntitlementIdPublic;
			Helper.Get(m_EntitlementId, out EntitlementIdPublic);
			other.EntitlementId = EntitlementIdPublic;
			Utf8String CatalogItemIdPublic;
			Helper.Get(m_CatalogItemId, out CatalogItemIdPublic);
			other.CatalogItemId = CatalogItemIdPublic;
			other.ServerIndex = m_ServerIndex;
			bool RedeemedPublic;
			Helper.Get(m_Redeemed, out RedeemedPublic);
			other.Redeemed = RedeemedPublic;
			other.EndTimestamp = m_EndTimestamp;
		}
	}
}

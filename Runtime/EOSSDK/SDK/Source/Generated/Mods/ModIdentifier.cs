// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Mods
{
	/// <summary>
	/// <see cref="ModIdentifier" /> is used to identify a mod.
	/// </summary>
	public struct ModIdentifier
	{
		/// <summary>
		/// Product namespace id in which this mod item exists
		/// </summary>
		public Utf8String NamespaceId { get; set; }

		/// <summary>
		/// Item id of the Mod
		/// </summary>
		public Utf8String ItemId { get; set; }

		/// <summary>
		/// Artifact id of the Mod
		/// </summary>
		public Utf8String ArtifactId { get; set; }

		/// <summary>
		/// Represent mod item title.
		/// </summary>
		public Utf8String Title { get; set; }

		/// <summary>
		/// Represent mod item version.
		/// </summary>
		public Utf8String Version { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct ModIdentifierInternal : IGettable<ModIdentifier>, ISettable<ModIdentifier>
	{
		private int m_ApiVersion;
		private IntPtr m_NamespaceId;
		private IntPtr m_ItemId;
		private IntPtr m_ArtifactId;
		private IntPtr m_Title;
		private IntPtr m_Version;

		public void Get(out ModIdentifier other)
		{
			other = default;
			
			Utf8String NamespaceIdPublic;
			Helper.Get(m_NamespaceId, out NamespaceIdPublic);
			other.NamespaceId = NamespaceIdPublic;
			Utf8String ItemIdPublic;
			Helper.Get(m_ItemId, out ItemIdPublic);
			other.ItemId = ItemIdPublic;
			Utf8String ArtifactIdPublic;
			Helper.Get(m_ArtifactId, out ArtifactIdPublic);
			other.ArtifactId = ArtifactIdPublic;
			Utf8String TitlePublic;
			Helper.Get(m_Title, out TitlePublic);
			other.Title = TitlePublic;
			Utf8String VersionPublic;
			Helper.Get(m_Version, out VersionPublic);
			other.Version = VersionPublic;
		}

		public void Set(ref ModIdentifier other)
		{
			Dispose();

			m_ApiVersion = ModsInterface.MOD_IDENTIFIER_API_LATEST;
			Helper.Set(other.NamespaceId, ref m_NamespaceId);
			Helper.Set(other.ItemId, ref m_ItemId);
			Helper.Set(other.ArtifactId, ref m_ArtifactId);
			Helper.Set(other.Title, ref m_Title);
			Helper.Set(other.Version, ref m_Version);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_NamespaceId);
			Helper.Dispose(ref m_ItemId);
			Helper.Dispose(ref m_ArtifactId);
			Helper.Dispose(ref m_Title);
			Helper.Dispose(ref m_Version);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Mods
{
	/// <summary>
	/// Input parameters for the <see cref="ModsInterface.InstallMod" /> Function.
	/// </summary>
	public struct InstallModOptions
	{
		/// <summary>
		/// The Epic Account ID of the user for which the mod should be installed
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// The mod to install
		/// </summary>
		public ModIdentifier? Mod { get; set; }

		/// <summary>
		/// Indicates whether the mod should be uninstalled after exiting the game or not.
		/// </summary>
		public bool RemoveAfterExit { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct InstallModOptionsInternal : ISettable<InstallModOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_Mod;
		private int m_RemoveAfterExit;

		public void Set(ref InstallModOptions other)
		{
			Dispose();

			m_ApiVersion = ModsInterface.INSTALLMOD_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set<ModIdentifier, ModIdentifierInternal>(other.Mod, ref m_Mod);
			Helper.Set(other.RemoveAfterExit, ref m_RemoveAfterExit);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_Mod);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Presence
{
	public sealed partial class PresenceInterface : Handle
	{
		public PresenceInterface()
		{
		}

		public PresenceInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyJoinGameAccepted" /> API.
		/// </summary>
		public const int ADDNOTIFYJOINGAMEACCEPTED_API_LATEST = 2;
		public const int ADDNOTIFYONPRESENCECHANGED_API_LATEST = 1;
		public const int COPYPRESENCE_API_LATEST = 3;
		public const int CREATEPRESENCEMODIFICATION_API_LATEST = 1;
		public const int DATARECORD_API_LATEST = 1;
		/// <summary>
		/// The maximum of allowed individual pieces of data a user may have. This value is subject to change and data structures should be designed to allow for greater
		/// numbers than this.
		/// </summary>
		public const int DATA_MAX_KEYS = 32;
		/// <summary>
		/// The maximum allowed length a data's key may be. This value is subject to change and data structures should be designed to allow for greater numbers than this.
		/// </summary>
		public const int DATA_MAX_KEY_LENGTH = 64;
		/// <summary>
		/// The maximum allowed length a data's value may be. This value is subject to change and data structures should be designed to allow for greater numbers than this.
		/// </summary>
		public const int DATA_MAX_VALUE_LENGTH = 255;
		/// <summary>
		/// DEPRECATED! Use <see cref="PRESENCEMODIFICATION_DELETEDATA_API_LATEST" /> instead.
		/// </summary>
		public const int DELETEDATA_API_LATEST = PRESENCEMODIFICATION_DELETEDATA_API_LATEST;
		public const int GETJOININFO_API_LATEST = 1;
		public const int HASPRESENCE_API_LATEST = 1;
		public const int INFO_API_LATEST = 3;
		/// <summary>
		/// The presence key used to specify the local platform's presence <see cref="Utf8String" /> on platforms that use tokenized presence.
		/// For use with <see cref="PresenceModification.SetData" />.
		/// <see cref="PresenceModification.SetData" />
		/// <see cref="DataRecord" />
		/// </summary>
		public static readonly Utf8String KEY_PLATFORM_PRESENCE = "EOS_PlatformPresence";
		public const int PRESENCEMODIFICATION_DATARECORDID_API_LATEST = 1;
		/// <summary>
		/// Most recent version of the <see cref="PresenceModification.DeleteData" /> API.
		/// </summary>
		public const int PRESENCEMODIFICATION_DELETEDATA_API_LATEST = 1;
		public const int PRESENCEMODIFICATION_JOININFO_MAX_LENGTH = DATA_MAX_VALUE_LENGTH;
		/// <summary>
		/// The most recent version of the <see cref="PresenceModification.SetData" /> API.
		/// </summary>
		public const int PRESENCEMODIFICATION_SETDATA_API_LATEST = 1;
		public const int PRESENCEMODIFICATION_SETJOININFO_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="PresenceModification.SetRawRichText" /> function.
		/// </summary>
		public const int PRESENCEMODIFICATION_SETRAWRICHTEXT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="PresenceModification.SetStatus" /> API.
		/// </summary>
		public const int PRESENCEMODIFICATION_SETSTATUS_API_LATEST = 1;
		public const int QUERYPRESENCE_API_LATEST = 1;
		/// <summary>
		/// The maximum allowed length a user's rich text <see cref="Utf8String" /> may be. This value is subject to change and data structures should be designed to allow for greater numbers
		/// than this.
		/// </summary>
		public const int RICH_TEXT_MAX_VALUE_LENGTH = 255;
		/// <summary>
		/// DEPRECATED! Use <see cref="PRESENCEMODIFICATION_SETDATA_API_LATEST" /> instead.
		/// </summary>
		public const int SETDATA_API_LATEST = PRESENCEMODIFICATION_SETDATA_API_LATEST;
		public const int SETPRESENCE_API_LATEST = 1;
		/// <summary>
		/// DEPRECATED! Use <see cref="PRESENCEMODIFICATION_SETRAWRICHTEXT_API_LATEST" /> instead.
		/// </summary>
		public const int SETRAWRICHTEXT_API_LATEST = PRESENCEMODIFICATION_SETRAWRICHTEXT_API_LATEST;
		/// <summary>
		/// DEPRECATED! Use <see cref="PRESENCEMODIFICATION_SETSTATUS_API_LATEST" /> instead.
		/// </summary>
		public const int SETSTATUS_API_LATEST = PRESENCEMODIFICATION_SETSTATUS_API_LATEST;

		/// <summary>
		/// Register to receive notifications when a user accepts a join game option via the social overlay.
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyJoinGameAccepted" /> when you no longer wish to have your NotificationHandler called.
		/// </summary>
		/// <param name="options">
		/// Structure containing information about the request.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate.
		/// </param>
		/// <param name="notificationFn">
		/// A callback that is fired when a a notification is received.
		/// </param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyJoinGameAccepted(ref AddNotifyJoinGameAcceptedOptions options, object clientData, OnJoinGameAcceptedCallback notificationFn)
		{
			if (notificationFn == null)
			{
				throw new ArgumentNullException("notificationFn");
			}

			var optionsInternal = default(AddNotifyJoinGameAcceptedOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, notificationFn);

			var callResult = Bindings.EOS_Presence_AddNotifyJoinGameAccepted(InnerHandle, ref optionsInternal, clientDataPointer, OnJoinGameAcceptedCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Register to receive notifications when presence changes.
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyOnPresenceChanged" /> when you no longer wish to have your NotificationHandler called.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyOnPresenceChanged" />
		/// </summary>
		/// <param name="clientData">
		/// Data the is returned to when NotificationHandler is invoked
		/// </param>
		/// <param name="notificationHandler">
		/// The callback to be fired when a presence change occurs
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyOnPresenceChanged(ref AddNotifyOnPresenceChangedOptions options, object clientData, OnPresenceChangedCallback notificationHandler)
		{
			if (notificationHandler == null)
			{
				throw new ArgumentNullException("notificationHandler");
			}

			var optionsInternal = default(AddNotifyOnPresenceChangedOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, notificationHandler);

			var callResult = Bindings.EOS_Presence_AddNotifyOnPresenceChanged(InnerHandle, ref optionsInternal, clientDataPointer, OnPresenceChangedCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Get a user's cached presence object. If successful, this data must be released by calling <see cref="Release" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to who is requesting presence and for what user
		/// </param>
		/// <param name="outPresence">
		/// A <see cref="IntPtr" /> to a <see cref="IntPtr" /> of Presence Info. If the returned result is success, this will be set to data that must be later released, otherwise this will be set to <see langword="null" />
		/// </param>
		/// <returns>
		/// Success if we have cached data, or an error result if the request was invalid or we do not have cached data.
		/// </returns>
		public Result CopyPresence(ref CopyPresenceOptions options, out Info? outPresence)
		{
			var optionsInternal = default(CopyPresenceOptionsInternal);
			optionsInternal.Set(ref options);

			var outPresencePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Presence_CopyPresence(InnerHandle, ref optionsInternal, out outPresencePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<InfoInternal, Info>(outPresencePointer, out outPresence);
			if (outPresencePointer != IntPtr.Zero)
			{
				Bindings.EOS_Presence_Info_Release(outPresencePointer);
			}

			return callResult;
		}

		/// <summary>
		/// Creates a presence modification handle. This handle can used to add multiple changes to your presence that can be applied with <see cref="SetPresence" />.
		/// The resulting handle must be released by calling <see cref="PresenceModification.Release" /> once it has been passed to <see cref="SetPresence" />.
		/// <see cref="PresenceModification.Release" />
		/// <see cref="SetPresence" />
		/// <see cref="PresenceModification.SetStatus" />
		/// <see cref="PresenceModification.SetRawRichText" />
		/// <see cref="PresenceModification.SetData" />
		/// <see cref="PresenceModification.DeleteData" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to the user modifying their presence
		/// </param>
		/// <param name="outPresenceModificationHandle">
		/// <see cref="IntPtr" /> to a Presence Modification Handle to be set if successful
		/// </param>
		/// <returns>
		/// Success if we successfully created the Presence Modification Handle pointed at in OutPresenceModificationHandle, or an error result if the input data was invalid
		/// </returns>
		public Result CreatePresenceModification(ref CreatePresenceModificationOptions options, out PresenceModification outPresenceModificationHandle)
		{
			var optionsInternal = default(CreatePresenceModificationOptionsInternal);
			optionsInternal.Set(ref options);

			var outPresenceModificationHandleInnerHandle = IntPtr.Zero;

			var callResult = Bindings.EOS_Presence_CreatePresenceModification(InnerHandle, ref optionsInternal, out outPresenceModificationHandleInnerHandle);

			Helper.Dispose(ref optionsInternal);

			Helper.Get(outPresenceModificationHandleInnerHandle, out outPresenceModificationHandle);

			return callResult;
		}

		/// <summary>
		/// Gets a join info custom game-data <see cref="Utf8String" /> for a specific user. This is a helper function for reading the presence data related to how a user can be joined.
		/// Its meaning is entirely application dependent.
		/// 
		/// This value will be valid only after a QueryPresence call has successfully completed.
		/// <see cref="PRESENCEMODIFICATION_JOININFO_MAX_LENGTH" />
		/// </summary>
		/// <param name="options">
		/// Object containing an associated user
		/// </param>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written. The buffer must be long enough to hold a <see cref="Utf8String" /> of <see cref="PRESENCEMODIFICATION_JOININFO_MAX_LENGTH" />.
		/// </param>
		/// <param name="inOutBufferLength">
		/// Used as an input to define the OutBuffer length.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the location <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> if the information is available and passed out in OutBuffer
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if there is user or the location <see cref="Utf8String" /> was not found.
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the location <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result GetJoinInfo(ref GetJoinInfoOptions options, out Utf8String outBuffer)
		{
			var optionsInternal = default(GetJoinInfoOptionsInternal);
			optionsInternal.Set(ref options);

			int inOutBufferLength = PRESENCEMODIFICATION_JOININFO_MAX_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_Presence_GetJoinInfo(InnerHandle, ref optionsInternal, outBufferPointer, ref inOutBufferLength);

			Helper.Dispose(ref optionsInternal);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}

		/// <summary>
		/// Check if we already have presence for a user
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to who is requesting presence and for what user
		/// </param>
		/// <returns>
		/// <see langword="true" /> if we have presence for the requested user, or <see langword="false" /> if the request was invalid or we do not have cached data
		/// </returns>
		public bool HasPresence(ref HasPresenceOptions options)
		{
			var optionsInternal = default(HasPresenceOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Presence_HasPresence(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			bool callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Query a user's presence. This must complete successfully before CopyPresence will have valid results. If HasPresence returns <see langword="true" /> for a remote
		/// user, this does not need to be called.
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to who is querying presence and for what user
		/// </param>
		/// <param name="clientData">
		/// Optional <see cref="IntPtr" /> to help track this request, that is returned in the completion callback
		/// </param>
		/// <param name="completionDelegate">
		/// <see cref="IntPtr" /> to a function that handles receiving the completion information
		/// </param>
		public void QueryPresence(ref QueryPresenceOptions options, object clientData, OnQueryPresenceCompleteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryPresenceOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Presence_QueryPresence(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryPresenceCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Unregister from receiving notifications when a user accepts a join game option via the social overlay.
		/// </summary>
		/// <param name="inId">
		/// Handle representing the registered callback
		/// </param>
		public void RemoveNotifyJoinGameAccepted(ulong inId)
		{
			Bindings.EOS_Presence_RemoveNotifyJoinGameAccepted(InnerHandle, inId);

			Helper.RemoveCallbackByNotificationId(inId);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving presence update notifications
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyOnPresenceChanged(ulong notificationId)
		{
			Bindings.EOS_Presence_RemoveNotifyOnPresenceChanged(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Sets your new presence with the data applied to a PresenceModificationHandle. The PresenceModificationHandle can be released safely after calling this function.
		/// <see cref="CreatePresenceModification" />
		/// <see cref="PresenceModification.Release" />
		/// </summary>
		/// <param name="options">
		/// Object containing a PresenceModificationHandle and associated user data
		/// </param>
		/// <param name="clientData">
		/// Optional <see cref="IntPtr" /> to help track this request, that is returned in the completion callback
		/// </param>
		/// <param name="completionDelegate">
		/// <see cref="IntPtr" /> to a function that handles receiving the completion information
		/// </param>
		public void SetPresence(ref SetPresenceOptions options, object clientData, SetPresenceCompleteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(SetPresenceOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Presence_SetPresence(InnerHandle, ref optionsInternal, clientDataPointer, SetPresenceCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Presence
{
	public sealed partial class PresenceModification : Handle
	{
		public PresenceModification()
		{
		}

		public PresenceModification(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// Removes one or more rows of user-defined presence data for a local user. At least one DeleteDataInfo object
		/// must be specified.
		/// <see cref="PresenceInterface.DATA_MAX_KEYS" />
		/// <see cref="PresenceInterface.DATA_MAX_KEY_LENGTH" />
		/// <see cref="PresenceInterface.DATA_MAX_VALUE_LENGTH" />
		/// </summary>
		/// <param name="options">
		/// Object containing an array of new presence data.
		/// </param>
		/// <returns>
		/// Success if modification was added successfully, otherwise an error code related to the problem
		/// </returns>
		public Result DeleteData(ref PresenceModificationDeleteDataOptions options)
		{
			var optionsInternal = default(PresenceModificationDeleteDataOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_PresenceModification_DeleteData(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Release the memory associated with an <see cref="PresenceModification" /> handle. This must be called on Handles retrieved from <see cref="PresenceInterface.CreatePresenceModification" />.
		/// This can be safely called on a <see langword="null" /> presence modification handle. This also may be safely called while a call to SetPresence is still pending.
		/// <see cref="PresenceInterface.CreatePresenceModification" />
		/// </summary>
		/// <param name="presenceModificationHandle">
		/// The presence modification handle to release
		/// </param>
		public void Release()
		{
			Bindings.EOS_PresenceModification_Release(InnerHandle);
		}

		/// <summary>
		/// Modifies one or more rows of user-defined presence data for a local user. At least one InfoData object
		/// must be specified.
		/// <see cref="PresenceInterface.DATA_MAX_KEYS" />
		/// <see cref="PresenceInterface.DATA_MAX_KEY_LENGTH" />
		/// <see cref="PresenceInterface.DATA_MAX_VALUE_LENGTH" />
		/// </summary>
		/// <param name="options">
		/// Object containing an array of new presence data.
		/// </param>
		/// <returns>
		/// Success if modification was added successfully, otherwise an error code related to the problem
		/// </returns>
		public Result SetData(ref PresenceModificationSetDataOptions options)
		{
			var optionsInternal = default(PresenceModificationSetDataOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_PresenceModification_SetData(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Sets your new join info custom game-data <see cref="Utf8String" />. This is a helper function for reading the presence data related to how a user can be joined.
		/// Its meaning is entirely application dependent.
		/// <see cref="PresenceInterface.PRESENCEMODIFICATION_JOININFO_MAX_LENGTH" />
		/// </summary>
		/// <param name="options">
		/// Object containing a join info <see cref="Utf8String" /> and associated user data
		/// </param>
		/// <returns>
		/// Success if modification was added successfully, otherwise an error code related to the problem
		/// </returns>
		public Result SetJoinInfo(ref PresenceModificationSetJoinInfoOptions options)
		{
			var optionsInternal = default(PresenceModificationSetJoinInfoOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_PresenceModification_SetJoinInfo(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Modifies a user's Rich Presence <see cref="Utf8String" /> to a new state. This is the exact value other users will see
		/// when they query the local user's presence.
		/// <see cref="PresenceInterface.RICH_TEXT_MAX_VALUE_LENGTH" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to setting a user's RichText <see cref="Utf8String" />
		/// </param>
		/// <returns>
		/// Success if modification was added successfully, otherwise an error code related to the problem
		/// </returns>
		public Result SetRawRichText(ref PresenceModificationSetRawRichTextOptions options)
		{
			var optionsInternal = default(PresenceModificationSetRawRichTextOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_PresenceModification_SetRawRichText(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Modifies a user's online status to be the new state.
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to setting a user's Status
		/// </param>
		/// <returns>
		/// Success if modification was added successfully, otherwise an error code related to the problem
		/// </returns>
		public Result SetStatus(ref PresenceModificationSetStatusOptions options)
		{
			var optionsInternal = default(PresenceModificationSetStatusOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_PresenceModification_SetStatus(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}
	}
}

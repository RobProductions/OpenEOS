// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Stats
{
	/// <summary>
	/// Contains information about a single player stat.
	/// </summary>
	public struct Stat
	{
		/// <summary>
		/// Name of the stat.
		/// </summary>
		public Utf8String Name { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TIME_UNDEFINED" /> then this is the POSIX timestamp for start time.
		/// </summary>
		public DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TIME_UNDEFINED" /> then this is the POSIX timestamp for end time.
		/// </summary>
		public DateTimeOffset? EndTime { get; set; }

		/// <summary>
		/// Current value for the stat.
		/// </summary>
		public int Value { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct StatInternal : IGettable<Stat>
	{
		private int m_ApiVersion;
		private IntPtr m_Name;
		private long m_StartTime;
		private long m_EndTime;
		private int m_Value;

		public void Get(out Stat other)
		{
			other = default;
			
			Utf8String NamePublic;
			Helper.Get(m_Name, out NamePublic);
			other.Name = NamePublic;
			DateTimeOffset? StartTimePublic;
			Helper.Get(m_StartTime, out StartTimePublic);
			other.StartTime = StartTimePublic;
			DateTimeOffset? EndTimePublic;
			Helper.Get(m_EndTime, out EndTimePublic);
			other.EndTime = EndTimePublic;
			other.Value = m_Value;
		}
	}
}

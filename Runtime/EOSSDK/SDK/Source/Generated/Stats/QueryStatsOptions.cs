// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Stats
{
	/// <summary>
	/// Input parameters for the <see cref="StatsInterface.QueryStats" /> function.
	/// </summary>
	public struct QueryStatsOptions
	{
		/// <summary>
		/// The Product User ID of the local user requesting the stats. Set to <see langword="null" /> for dedicated server.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TIME_UNDEFINED" /> then this is the POSIX timestamp for start time (Optional - set to <see cref="StatsInterface.TIME_UNDEFINED" /> to ignore this parameter).
		/// </summary>
		public DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TIME_UNDEFINED" /> then this is the POSIX timestamp for end time (Optional - set to <see cref="StatsInterface.TIME_UNDEFINED" /> to ignore this parameter).
		/// </summary>
		public DateTimeOffset? EndTime { get; set; }

		/// <summary>
		/// An array of stat names to query for (Optional - set to <see langword="null" /> to query for all stats).
		/// </summary>
		public Utf8String[] StatNames { get; set; }

		/// <summary>
		/// The Product User ID for the user whose stats are being retrieved
		/// </summary>
		public ProductUserId TargetUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct QueryStatsOptionsInternal : ISettable<QueryStatsOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private long m_StartTime;
		private long m_EndTime;
		private IntPtr m_StatNames;
		private uint m_StatNamesCount;
		private IntPtr m_TargetUserId;

		public void Set(ref QueryStatsOptions other)
		{
			Dispose();

			m_ApiVersion = StatsInterface.QUERYSTATS_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.StartTime, ref m_StartTime);
			Helper.Set(other.EndTime, ref m_EndTime);
			Helper.Set(other.StatNames, ref m_StatNames, out m_StatNamesCount, true);
			Helper.Set(other.TargetUserId, ref m_TargetUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_StatNames);
			Helper.Dispose(ref m_TargetUserId);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// A structure that contains an ID token.
	/// These structures are created by <see cref="AuthInterface.CopyIdToken" /> and must be passed to <see cref="AuthInterface.Release" /> when finished.
	/// </summary>
	public struct IdToken
	{
		/// <summary>
		/// The Epic Account ID described by the ID token.
		/// Use <see cref="EpicAccountId.FromString" /> to populate this field when validating a received ID token.
		/// </summary>
		public EpicAccountId AccountId { get; set; }

		/// <summary>
		/// The ID token as a Json Web Token (JWT) <see cref="Utf8String" />.
		/// </summary>
		public Utf8String JsonWebToken { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct IdTokenInternal : IGettable<IdToken>, ISettable<IdToken>
	{
		private int m_ApiVersion;
		private IntPtr m_AccountId;
		private IntPtr m_JsonWebToken;

		public void Get(out IdToken other)
		{
			other = default;
			
			EpicAccountId AccountIdPublic;
			Helper.Get(m_AccountId, out AccountIdPublic);
			other.AccountId = AccountIdPublic;
			Utf8String JsonWebTokenPublic;
			Helper.Get(m_JsonWebToken, out JsonWebTokenPublic);
			other.JsonWebToken = JsonWebTokenPublic;
		}

		public void Set(ref IdToken other)
		{
			Dispose();

			m_ApiVersion = AuthInterface.IDTOKEN_API_LATEST;
			Helper.Set(other.AccountId, ref m_AccountId);
			Helper.Set(other.JsonWebToken, ref m_JsonWebToken);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_AccountId);
			Helper.Dispose(ref m_JsonWebToken);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Login credentials filled as part of the <see cref="LoginOptions" /> struct for <see cref="AuthInterface.Login" /> API.
	/// 
	/// Required input parameters to be set depend on the login credential type.
	/// Any parameters not being used must be set to <see langword="null" />. Otherwise, <see cref="Result.InvalidParameters" /> error is returned.
	/// 
	/// <see cref="LoginCredentialType.Password" /> | ID is the email address, and Token is the password.
	/// <see cref="LoginCredentialType.ExchangeCode" /> | Set ID to <see langword="null" />. Token is the exchange code.
	/// <see cref="LoginCredentialType.PersistentAuth" /> | Set ID to <see langword="null" />. On console platforms, Token is the long-lived refresh token. Otherwise, set to <see langword="null" />.
	/// <see cref="LoginCredentialType.Developer" /> | Set ID as the host (e.g. localhost:6547). Token is the credential name registered in the EOS Developer Authentication Tool.
	/// <see cref="LoginCredentialType.RefreshToken" /> | Set ID to <see langword="null" />. Token is the refresh token.
	/// <see cref="LoginCredentialType.AccountPortal" /> | Set ID and Token to <see langword="null" />. SystemAuthCredentialsOptions may be required on mobile platforms.
	/// <see cref="LoginCredentialType.ExternalAuth" /> | Set ID to <see langword="null" /> or the External Account ID that belongs to the external auth token. Token is the external auth token specified by ExternalType. External Account IDs set to the ID are expected as either base-10 numeric <see cref="Utf8String" /> for integer-based external Account IDs, or the actual <see cref="Utf8String" /> for everything else. If ID is provided, login will automatically be cancelled if the EOS SDK is able to and does detect the external account signing-out. If ID is provided, it must match the external account ID belonging to the auth-token, or login will fail.
	/// <see cref="LoginCredentialType" />
	/// <see cref="AuthInterface.Login" />
	/// <see cref="DeletePersistentAuthOptions" />
	/// </summary>
	public struct Credentials
	{
		/// <summary>
		/// Authentication ID value based on the used <see cref="LoginCredentialType" />.
		/// If not used, must be set to <see langword="null" />.
		/// </summary>
		public Utf8String Id { get; set; }

		/// <summary>
		/// Authentication Token value based on the used <see cref="LoginCredentialType" />.
		/// If not used, must be set to <see langword="null" />.
		/// </summary>
		public Utf8String Token { get; set; }

		/// <summary>
		/// Login credentials type based on the authentication method used.
		/// </summary>
		public LoginCredentialType Type { get; set; }

		/// <summary>
		/// This field is for system specific options, if any.
		/// 
		/// If provided, the structure will be located in (System)/eos_(system).h.
		/// The structure will be named EOS_(System)_Auth_CredentialsOptions.
		/// </summary>
		public IntPtr SystemAuthCredentialsOptions { get; set; }

		/// <summary>
		/// Type of external login. Needed to identify the external auth method to use.
		/// Used when login type is set to <see cref="LoginCredentialType.ExternalAuth" />, ignored for other <see cref="LoginCredentialType" /> methods.
		/// </summary>
		public ExternalCredentialType ExternalType { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CredentialsInternal : ISettable<Credentials>
	{
		private int m_ApiVersion;
		private IntPtr m_Id;
		private IntPtr m_Token;
		private LoginCredentialType m_Type;
		private IntPtr m_SystemAuthCredentialsOptions;
		private ExternalCredentialType m_ExternalType;

		public void Set(ref Credentials other)
		{
			Dispose();

			m_ApiVersion = AuthInterface.CREDENTIALS_API_LATEST;
			Helper.Set(other.Id, ref m_Id);
			Helper.Set(other.Token, ref m_Token);
			m_Type = other.Type;
			m_SystemAuthCredentialsOptions = other.SystemAuthCredentialsOptions;
			m_ExternalType = other.ExternalType;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Id);
			Helper.Dispose(ref m_Token);
			Helper.Dispose(ref m_SystemAuthCredentialsOptions);
		}
	}
}

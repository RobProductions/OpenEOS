// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// A structure that contains an auth token.
	/// These structures are created by <see cref="AuthInterface.CopyUserAuthToken" /> and must be passed to <see cref="AuthInterface.Release" />.
	/// </summary>
	public struct Token
	{
		/// <summary>
		/// Name of the app related to the client ID involved with this token
		/// </summary>
		public Utf8String App { get; set; }

		/// <summary>
		/// Client ID that requested this token
		/// </summary>
		public Utf8String ClientId { get; set; }

		/// <summary>
		/// The Epic Account ID associated with this auth token
		/// </summary>
		public EpicAccountId AccountId { get; set; }

		/// <summary>
		/// Access token for the current user login session
		/// </summary>
		public Utf8String AccessToken { get; set; }

		/// <summary>
		/// Time before the access token expires, in seconds, relative to the call to <see cref="AuthInterface.CopyUserAuthToken" />
		/// </summary>
		public double ExpiresIn { get; set; }

		/// <summary>
		/// Absolute time in UTC before the access token expires, in ISO 8601 format
		/// </summary>
		public Utf8String ExpiresAt { get; set; }

		/// <summary>
		/// Type of auth token
		/// </summary>
		public AuthTokenType AuthType { get; set; }

		/// <summary>
		/// Refresh token.
		/// <see cref="LoginCredentialType.RefreshToken" />
		/// </summary>
		public Utf8String RefreshToken { get; set; }

		/// <summary>
		/// Time before the access token expires, in seconds, relative to the call to <see cref="AuthInterface.CopyUserAuthToken" />
		/// </summary>
		public double RefreshExpiresIn { get; set; }

		/// <summary>
		/// Absolute time in UTC before the refresh token expires, in ISO 8601 format
		/// </summary>
		public Utf8String RefreshExpiresAt { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct TokenInternal : IGettable<Token>, ISettable<Token>
	{
		private int m_ApiVersion;
		private IntPtr m_App;
		private IntPtr m_ClientId;
		private IntPtr m_AccountId;
		private IntPtr m_AccessToken;
		private double m_ExpiresIn;
		private IntPtr m_ExpiresAt;
		private AuthTokenType m_AuthType;
		private IntPtr m_RefreshToken;
		private double m_RefreshExpiresIn;
		private IntPtr m_RefreshExpiresAt;

		public void Get(out Token other)
		{
			other = default;
			
			Utf8String AppPublic;
			Helper.Get(m_App, out AppPublic);
			other.App = AppPublic;
			Utf8String ClientIdPublic;
			Helper.Get(m_ClientId, out ClientIdPublic);
			other.ClientId = ClientIdPublic;
			EpicAccountId AccountIdPublic;
			Helper.Get(m_AccountId, out AccountIdPublic);
			other.AccountId = AccountIdPublic;
			Utf8String AccessTokenPublic;
			Helper.Get(m_AccessToken, out AccessTokenPublic);
			other.AccessToken = AccessTokenPublic;
			other.ExpiresIn = m_ExpiresIn;
			Utf8String ExpiresAtPublic;
			Helper.Get(m_ExpiresAt, out ExpiresAtPublic);
			other.ExpiresAt = ExpiresAtPublic;
			other.AuthType = m_AuthType;
			Utf8String RefreshTokenPublic;
			Helper.Get(m_RefreshToken, out RefreshTokenPublic);
			other.RefreshToken = RefreshTokenPublic;
			other.RefreshExpiresIn = m_RefreshExpiresIn;
			Utf8String RefreshExpiresAtPublic;
			Helper.Get(m_RefreshExpiresAt, out RefreshExpiresAtPublic);
			other.RefreshExpiresAt = RefreshExpiresAtPublic;
		}

		public void Set(ref Token other)
		{
			Dispose();

			m_ApiVersion = AuthInterface.TOKEN_API_LATEST;
			Helper.Set(other.App, ref m_App);
			Helper.Set(other.ClientId, ref m_ClientId);
			Helper.Set(other.AccountId, ref m_AccountId);
			Helper.Set(other.AccessToken, ref m_AccessToken);
			m_ExpiresIn = other.ExpiresIn;
			Helper.Set(other.ExpiresAt, ref m_ExpiresAt);
			m_AuthType = other.AuthType;
			Helper.Set(other.RefreshToken, ref m_RefreshToken);
			m_RefreshExpiresIn = other.RefreshExpiresIn;
			Helper.Set(other.RefreshExpiresAt, ref m_RefreshExpiresAt);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_App);
			Helper.Dispose(ref m_ClientId);
			Helper.Dispose(ref m_AccountId);
			Helper.Dispose(ref m_AccessToken);
			Helper.Dispose(ref m_ExpiresAt);
			Helper.Dispose(ref m_RefreshToken);
			Helper.Dispose(ref m_RefreshExpiresAt);
		}
	}
}

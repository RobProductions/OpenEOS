// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Intermediate data for completing Epic account login, when neither the in-game overlay or a platform browser is used.
	/// The <see cref="PinGrantInfo" /> struct is returned as part of the <see cref="LoginCallbackInfo" /> and <see cref="LinkAccountCallbackInfo" /> structs.
	/// The data inside should be exposed to the user for entry on a secondary device.
	/// All data must be copied out before the completion of this callback.
	/// </summary>
	public struct PinGrantInfo
	{
		/// <summary>
		/// Code the user must input on an external device to activate the login.
		/// </summary>
		public Utf8String UserCode { get; set; }

		/// <summary>
		/// The end-user verification URI. Users can be asked to manually type this into their browser.
		/// </summary>
		public Utf8String VerificationURI { get; set; }

		/// <summary>
		/// Time the user has, in seconds, to complete the process or else timeout.
		/// </summary>
		public int ExpiresIn { get; set; }

		/// <summary>
		/// A verification URI that includes the user code. Useful for non-textual transmission.
		/// </summary>
		public Utf8String VerificationURIComplete { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct PinGrantInfoInternal : IGettable<PinGrantInfo>
	{
		private int m_ApiVersion;
		private IntPtr m_UserCode;
		private IntPtr m_VerificationURI;
		private int m_ExpiresIn;
		private IntPtr m_VerificationURIComplete;

		public void Get(out PinGrantInfo other)
		{
			other = default;
			
			Utf8String UserCodePublic;
			Helper.Get(m_UserCode, out UserCodePublic);
			other.UserCode = UserCodePublic;
			Utf8String VerificationURIPublic;
			Helper.Get(m_VerificationURI, out VerificationURIPublic);
			other.VerificationURI = VerificationURIPublic;
			other.ExpiresIn = m_ExpiresIn;
			Utf8String VerificationURICompletePublic;
			Helper.Get(m_VerificationURIComplete, out VerificationURICompletePublic);
			other.VerificationURIComplete = VerificationURICompletePublic;
		}
	}
}

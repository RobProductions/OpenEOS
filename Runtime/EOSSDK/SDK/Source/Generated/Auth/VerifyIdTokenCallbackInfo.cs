// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Output parameters for the <see cref="AuthInterface.VerifyIdToken" /> Function.
	/// </summary>
	public struct VerifyIdTokenCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// Context that was passed into <see cref="AuthInterface.VerifyIdToken" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// Epic Account Services Application ID.
		/// </summary>
		public Utf8String ApplicationId { get; set; }

		/// <summary>
		/// Client ID of the authorized client.
		/// </summary>
		public Utf8String ClientId { get; set; }

		/// <summary>
		/// Product ID.
		/// </summary>
		public Utf8String ProductId { get; set; }

		/// <summary>
		/// Sandbox ID.
		/// </summary>
		public Utf8String SandboxId { get; set; }

		/// <summary>
		/// Deployment ID.
		/// </summary>
		public Utf8String DeploymentId { get; set; }

		/// <summary>
		/// Epic Account display name.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String DisplayName { get; set; }

		/// <summary>
		/// Flag set to indicate whether external account information is present.
		/// Applications must always first check this value to be set before attempting
		/// to read the ExternalAccountIdType, ExternalAccountId, ExternalAccountDisplayName and Platform fields.
		/// 
		/// This flag is set when the user has logged in to their Epic Account using external account credentials, e.g. through local platform authentication.
		/// </summary>
		public bool IsExternalAccountInfoPresent { get; set; }

		/// <summary>
		/// The identity provider that the user logged in with to their Epic Account.
		/// 
		/// If bIsExternalAccountInfoPresent is set, this field describes the external account type.
		/// </summary>
		public ExternalAccountType ExternalAccountIdType { get; set; }

		/// <summary>
		/// The external account ID of the logged in user.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String ExternalAccountId { get; set; }

		/// <summary>
		/// The external account display name.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String ExternalAccountDisplayName { get; set; }

		/// <summary>
		/// Platform that the user is connected from.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String Platform { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return ResultCode;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyIdTokenCallbackInfo>
	{
		private Result m_ResultCode;
		private IntPtr m_ClientData;
		private IntPtr m_ApplicationId;
		private IntPtr m_ClientId;
		private IntPtr m_ProductId;
		private IntPtr m_SandboxId;
		private IntPtr m_DeploymentId;
		private IntPtr m_DisplayName;
		private int m_IsExternalAccountInfoPresent;
		private ExternalAccountType m_ExternalAccountIdType;
		private IntPtr m_ExternalAccountId;
		private IntPtr m_ExternalAccountDisplayName;
		private IntPtr m_Platform;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out VerifyIdTokenCallbackInfo other)
		{
			other = default;
			
			other.ResultCode = m_ResultCode;
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			Utf8String ApplicationIdPublic;
			Helper.Get(m_ApplicationId, out ApplicationIdPublic);
			other.ApplicationId = ApplicationIdPublic;
			Utf8String ClientIdPublic;
			Helper.Get(m_ClientId, out ClientIdPublic);
			other.ClientId = ClientIdPublic;
			Utf8String ProductIdPublic;
			Helper.Get(m_ProductId, out ProductIdPublic);
			other.ProductId = ProductIdPublic;
			Utf8String SandboxIdPublic;
			Helper.Get(m_SandboxId, out SandboxIdPublic);
			other.SandboxId = SandboxIdPublic;
			Utf8String DeploymentIdPublic;
			Helper.Get(m_DeploymentId, out DeploymentIdPublic);
			other.DeploymentId = DeploymentIdPublic;
			Utf8String DisplayNamePublic;
			Helper.Get(m_DisplayName, out DisplayNamePublic);
			other.DisplayName = DisplayNamePublic;
			bool IsExternalAccountInfoPresentPublic;
			Helper.Get(m_IsExternalAccountInfoPresent, out IsExternalAccountInfoPresentPublic);
			other.IsExternalAccountInfoPresent = IsExternalAccountInfoPresentPublic;
			other.ExternalAccountIdType = m_ExternalAccountIdType;
			Utf8String ExternalAccountIdPublic;
			Helper.Get(m_ExternalAccountId, out ExternalAccountIdPublic);
			other.ExternalAccountId = ExternalAccountIdPublic;
			Utf8String ExternalAccountDisplayNamePublic;
			Helper.Get(m_ExternalAccountDisplayName, out ExternalAccountDisplayNamePublic);
			other.ExternalAccountDisplayName = ExternalAccountDisplayNamePublic;
			Utf8String PlatformPublic;
			Helper.Get(m_Platform, out PlatformPublic);
			other.Platform = PlatformPublic;
		}
	}
}

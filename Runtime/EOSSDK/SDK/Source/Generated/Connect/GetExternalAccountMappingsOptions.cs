// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.GetExternalAccountMapping" /> function.
	/// </summary>
	public struct GetExternalAccountMappingsOptions
	{
		/// <summary>
		/// The Product User ID of the existing, logged-in user who is querying account mappings.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// External auth service supplying the account IDs in <see cref="Utf8String" /> form.
		/// </summary>
		public ExternalAccountType AccountIdType { get; set; }

		/// <summary>
		/// Target user to retrieve the mapping for, as an external account ID.
		/// </summary>
		public Utf8String TargetExternalUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct GetExternalAccountMappingsOptionsInternal : ISettable<GetExternalAccountMappingsOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private ExternalAccountType m_AccountIdType;
		private IntPtr m_TargetExternalUserId;

		public void Set(ref GetExternalAccountMappingsOptions other)
		{
			Dispose();

			m_ApiVersion = ConnectInterface.GETEXTERNALACCOUNTMAPPINGS_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			m_AccountIdType = other.AccountIdType;
			Helper.Set(other.TargetExternalUserId, ref m_TargetExternalUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_TargetExternalUserId);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.TransferDeviceIdAccount" /> Function.
	/// </summary>
	public struct TransferDeviceIdAccountOptions
	{
		/// <summary>
		/// The primary product user id, currently logged in, that is already associated with a real external user account (such as Epic Games, PlayStation(TM)Network, Xbox Live and other).
		/// 
		/// The account linking keychain that owns this product user will be preserved and receive
		/// the Device ID login credentials under it.
		/// </summary>
		public ProductUserId PrimaryLocalUserId { get; set; }

		/// <summary>
		/// The product user id, currently logged in, that has been originally created using the anonymous local Device ID login type,
		/// and whose Device ID login will be transferred to the keychain of the PrimaryLocalUserId.
		/// </summary>
		public ProductUserId LocalDeviceUserId { get; set; }

		/// <summary>
		/// Specifies which <see cref="ProductUserId" /> (i.e. game progression) will be preserved in the operation.
		/// 
		/// After a successful transfer operation, subsequent logins using the same external account or
		/// the same local Device ID login will return user session for the ProductUserIdToPreserve.
		/// 
		/// Set to either PrimaryLocalUserId or LocalDeviceUserId.
		/// </summary>
		public ProductUserId ProductUserIdToPreserve { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct TransferDeviceIdAccountOptionsInternal : ISettable<TransferDeviceIdAccountOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_PrimaryLocalUserId;
		private IntPtr m_LocalDeviceUserId;
		private IntPtr m_ProductUserIdToPreserve;

		public void Set(ref TransferDeviceIdAccountOptions other)
		{
			Dispose();

			m_ApiVersion = ConnectInterface.TRANSFERDEVICEIDACCOUNT_API_LATEST;
			Helper.Set(other.PrimaryLocalUserId, ref m_PrimaryLocalUserId);
			Helper.Set(other.LocalDeviceUserId, ref m_LocalDeviceUserId);
			Helper.Set(other.ProductUserIdToPreserve, ref m_ProductUserIdToPreserve);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PrimaryLocalUserId);
			Helper.Dispose(ref m_LocalDeviceUserId);
			Helper.Dispose(ref m_ProductUserIdToPreserve);
		}
	}
}

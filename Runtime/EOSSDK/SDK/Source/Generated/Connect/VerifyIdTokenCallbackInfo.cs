// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Output parameters for the <see cref="ConnectInterface.VerifyIdToken" /> Function.
	/// </summary>
	public struct VerifyIdTokenCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// Context that was passed into <see cref="ConnectInterface.VerifyIdToken" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID associated with the ID token.
		/// </summary>
		public ProductUserId ProductUserId { get; set; }

		/// <summary>
		/// Flag set to indicate whether account information is available.
		/// Applications must always first check this value to be set before attempting
		/// to read the AccountType, AccountId, Platform and DeviceType fields.
		/// 
		/// This flag is always <see langword="false" /> for users that authenticated using EOS Connect Device ID.
		/// </summary>
		public bool IsAccountInfoPresent { get; set; }

		/// <summary>
		/// The identity provider that the user authenticated with to EOS Connect.
		/// 
		/// If bIsAccountInfoPresent is set, this field describes the external account type.
		/// </summary>
		public ExternalAccountType AccountIdType { get; set; }

		/// <summary>
		/// The external account ID of the authenticated user.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String AccountId { get; set; }

		/// <summary>
		/// Platform that the user is connected from.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String Platform { get; set; }

		/// <summary>
		/// Identifies the device type that the user is connected from.
		/// Can be used to securely verify that the user is connected through a real Console device.
		/// 
		/// This value may be set to an empty <see cref="Utf8String" />.
		/// </summary>
		public Utf8String DeviceType { get; set; }

		/// <summary>
		/// Client ID of the authorized client.
		/// </summary>
		public Utf8String ClientId { get; set; }

		/// <summary>
		/// Product ID.
		/// </summary>
		public Utf8String ProductId { get; set; }

		/// <summary>
		/// Sandbox ID.
		/// </summary>
		public Utf8String SandboxId { get; set; }

		/// <summary>
		/// Deployment ID.
		/// </summary>
		public Utf8String DeploymentId { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return ResultCode;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyIdTokenCallbackInfo>
	{
		private Result m_ResultCode;
		private IntPtr m_ClientData;
		private IntPtr m_ProductUserId;
		private int m_IsAccountInfoPresent;
		private ExternalAccountType m_AccountIdType;
		private IntPtr m_AccountId;
		private IntPtr m_Platform;
		private IntPtr m_DeviceType;
		private IntPtr m_ClientId;
		private IntPtr m_ProductId;
		private IntPtr m_SandboxId;
		private IntPtr m_DeploymentId;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out VerifyIdTokenCallbackInfo other)
		{
			other = default;
			
			other.ResultCode = m_ResultCode;
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId ProductUserIdPublic;
			Helper.Get(m_ProductUserId, out ProductUserIdPublic);
			other.ProductUserId = ProductUserIdPublic;
			bool IsAccountInfoPresentPublic;
			Helper.Get(m_IsAccountInfoPresent, out IsAccountInfoPresentPublic);
			other.IsAccountInfoPresent = IsAccountInfoPresentPublic;
			other.AccountIdType = m_AccountIdType;
			Utf8String AccountIdPublic;
			Helper.Get(m_AccountId, out AccountIdPublic);
			other.AccountId = AccountIdPublic;
			Utf8String PlatformPublic;
			Helper.Get(m_Platform, out PlatformPublic);
			other.Platform = PlatformPublic;
			Utf8String DeviceTypePublic;
			Helper.Get(m_DeviceType, out DeviceTypePublic);
			other.DeviceType = DeviceTypePublic;
			Utf8String ClientIdPublic;
			Helper.Get(m_ClientId, out ClientIdPublic);
			other.ClientId = ClientIdPublic;
			Utf8String ProductIdPublic;
			Helper.Get(m_ProductId, out ProductIdPublic);
			other.ProductId = ProductIdPublic;
			Utf8String SandboxIdPublic;
			Helper.Get(m_SandboxId, out SandboxIdPublic);
			other.SandboxId = SandboxIdPublic;
			Utf8String DeploymentIdPublic;
			Helper.Get(m_DeploymentId, out DeploymentIdPublic);
			other.DeploymentId = DeploymentIdPublic;
		}
	}
}

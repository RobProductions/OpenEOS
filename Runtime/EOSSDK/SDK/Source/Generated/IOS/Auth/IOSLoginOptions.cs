// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_IOS || __IOS__
	#define EOS_PLATFORM_IOS
#endif

#if EOS_PLATFORM_IOS
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Input parameters for the <see cref="AuthInterface.Login" /> function.
	/// </summary>
	public struct IOSLoginOptions
	{
		/// <summary>
		/// Credentials specified for a given login method.
		/// </summary>
		public IOSCredentials? Credentials { get; set; }

		/// <summary>
		/// Auth scope flags are permissions to request from the user while they are logging in. This is a bitwise-or union of <see cref="AuthScopeFlags" /> flags defined above.
		/// </summary>
		public AuthScopeFlags ScopeFlags { get; set; }

		/// <summary>
		/// Optional flags for the desired login behavior, e.g. <see cref="LoginFlags.NoUserInterface" />. This is a bitwise-or union of the defined flags.
		/// </summary>
		public LoginFlags LoginFlags { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct IOSLoginOptionsInternal : ISettable<IOSLoginOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_Credentials;
		private AuthScopeFlags m_ScopeFlags;
		private LoginFlags m_LoginFlags;

		public void Set(ref IOSLoginOptions other)
		{
			Dispose();

			m_ApiVersion = AuthInterface.LOGIN_API_LATEST;
			Helper.Set<IOSCredentials, IOSCredentialsInternal>(other.Credentials, ref m_Credentials);
			m_ScopeFlags = other.ScopeFlags;
			m_LoginFlags = other.LoginFlags;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Credentials);
		}
	}
}
#endif

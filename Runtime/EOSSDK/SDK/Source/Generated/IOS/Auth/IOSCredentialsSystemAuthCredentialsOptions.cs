// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_IOS || __IOS__
	#define EOS_PLATFORM_IOS
#endif

#if EOS_PLATFORM_IOS
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Options for initializing login for IOS.
	/// </summary>
	public struct IOSCredentialsSystemAuthCredentialsOptions
	{
		/// <summary>
		/// When calling <see cref="AuthInterface.Login" />
		/// NSObject that implements the ASWebAuthenticationPresentationContextProviding protocol,
		/// typically this is added to the applications UIViewController.
		/// Required for iOS 13+ only, for earlier versions this value must be a <see langword="null" />.
		/// Object must be retained and cast to a <see cref="IntPtr" /> using: (<see cref="IntPtr" />)CFBridgingRetain(presentationContextProviding)
		/// EOSSDK will release this bridged object when the value is consumed for iOS 13+.
		/// </summary>
		public IntPtr PresentationContextProviding { get; set; }

		/// <summary>
		/// A callback function used to create snapshot views when the application is backgrounded while Account Portal is visible.
		/// 
		/// Each call should return a new instance.
		/// <see cref="IntPtr" /> must be retained using: CFBridgingRetain(viewInstance)
		/// If the view requires a CGRect for initWithFrame, CGRectZero should work
		/// Layout should be implemented in `layoutSubviews` or via constraints
		/// SDK will resize the <see cref="IntPtr" /> to match the UIWindow returned from ASWebAuthenticationPresentationContextProviding
		/// SDK will set autoresizing mask for fullscreen on the <see cref="IntPtr" /> (flexible width and height)
		/// </summary>
		public IOSCreateBackgroundSnapshotView CreateBackgroundSnapshotView { get; set; }

		/// <summary>
		/// Context data to pass back in the CreateBackgroundSnapshotView
		/// </summary>
		public IntPtr CreateBackgroundSnapshotViewContext { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct IOSCredentialsSystemAuthCredentialsOptionsInternal : ISettable<IOSCredentialsSystemAuthCredentialsOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_PresentationContextProviding;
		private IntPtr m_CreateBackgroundSnapshotView;
		private IntPtr m_CreateBackgroundSnapshotViewContext;

		public void Set(ref IOSCredentialsSystemAuthCredentialsOptions other)
		{
			Dispose();

			m_ApiVersion = AuthInterface.IOS_CREDENTIALSOPTIONS_API_LATEST;
			m_PresentationContextProviding = other.PresentationContextProviding;
			m_CreateBackgroundSnapshotView = other.CreateBackgroundSnapshotView != null ? Marshal.GetFunctionPointerForDelegate(IOSCreateBackgroundSnapshotViewInternalImplementation.Delegate) : IntPtr.Zero;
			m_CreateBackgroundSnapshotViewContext = other.CreateBackgroundSnapshotViewContext;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PresentationContextProviding);
			Helper.Dispose(ref m_CreateBackgroundSnapshotViewContext);
		}
	}
}
#endif

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_IOS || __IOS__
	#define EOS_PLATFORM_IOS
#endif

#if UNITY_EDITOR
	#define EOS_EDITOR
#endif

#if EOS_EDITOR
	#define EOS_DYNAMIC_BINDINGS
#endif

#if EOS_DYNAMIC_BINDINGS
	#if EOS_PLATFORM_WINDOWS_32
		#define EOS_DYNAMIC_BINDINGS_MANGLING_WINDOWS_32
	#elif EOS_PLATFORM_OSX || EOS_PLATFORM_IOS
		#define EOS_DYNAMIC_BINDINGS_MANGLING_APPLE
	#else
		#define EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
	#endif
#endif

#if UNITY_IOS || __IOS__
	#define EOS_PLATFORM_IOS
#endif

#if EOS_PLATFORM_IOS
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices
{
	public static partial class IOSBindings
	{
#if EOS_DYNAMIC_BINDINGS_MANGLING_APPLE
		private const string EOS_Auth_Login_IOSName = "_EOS_Auth_Login_IOS";
#endif

#if EOS_DYNAMIC_BINDINGS
		/// <summary>
		/// Hooks dynamic bindings.
		/// </summary>
		/// <param name="libraryHandle">A handle to the library to find functions in. The type is platform dependent, but would typically be an <see cref="IntPtr"/>.</param>
		/// <param name="getFunctionPointer">A delegate that takes a library handle and function name, and returns an <see cref="IntPtr"/> which is a pointer to the function within the library.</param>
		public static void Hook<TLibraryHandle>(TLibraryHandle libraryHandle, Func<TLibraryHandle, string, IntPtr> getFunctionPointer)
		{
			IntPtr functionPointer;

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_Login_IOSName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_Login_IOSName);
			EOS_Auth_Login_IOS = (EOS_Auth_Login_IOSDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_Login_IOSDelegate));
		}

		/// <summary>
		/// Unhooks dynamic bindings.
		/// </summary>
		public static void Unhook()
		{
			EOS_Auth_Login_IOS = null;
		}

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_Login_IOSDelegate(IntPtr handle, ref Auth.IOSLoginOptionsInternal options, IntPtr clientData, Auth.OnLoginCallbackInternal completionDelegate);
		internal static EOS_Auth_Login_IOSDelegate EOS_Auth_Login_IOS;
#else
		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_Login", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_Login_IOS(IntPtr handle, ref Auth.IOSLoginOptionsInternal options, IntPtr clientData, Auth.OnLoginCallbackInternal completionDelegate);
#endif
	}
}
#endif
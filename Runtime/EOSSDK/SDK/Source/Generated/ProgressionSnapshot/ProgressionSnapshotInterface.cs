// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.ProgressionSnapshot
{
	public sealed partial class ProgressionSnapshotInterface : Handle
	{
		public ProgressionSnapshotInterface()
		{
		}

		public ProgressionSnapshotInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		public const int ADDPROGRESSION_API_LATEST = 1;
		public const int BEGINSNAPSHOT_API_LATEST = 1;
		public const int DELETESNAPSHOT_API_LATEST = 1;
		public const int ENDSNAPSHOT_API_LATEST = 1;
		public const int INVALID_PROGRESSIONSNAPSHOTID = 0;
		public const int SUBMITSNAPSHOT_API_LATEST = 1;

		/// <summary>
		/// Stores a Key/Value pair in memory for a given snapshot.
		/// If multiple calls happen with the same key, the last invocation wins, overwriting the previous value for that
		/// given key.
		/// 
		/// The order in which the Key/Value pairs are added is stored as is for later retrieval/display.
		/// Ideally, you would make multiple calls to AddProgression() followed by a single call to SubmitSnapshot().
		/// </summary>
		/// <returns>
		/// <see cref="Result.Success" /> when successful; otherwise, <see cref="Result.NotFound" />
		/// </returns>
		public Result AddProgression(ref AddProgressionOptions options)
		{
			var optionsInternal = default(AddProgressionOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_ProgressionSnapshot_AddProgression(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Creates a new progression-snapshot resource for a given user.
		/// </summary>
		/// <param name="options">
		/// Object containing properties that identifies the PUID this Snapshot will belong to.
		/// </param>
		/// <param name="outSnapshotId">
		/// A progression-snapshot identifier output parameter. Use that identifier to reference the snapshot in the other APIs.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> when successful.
		/// <see cref="Result.ProgressionSnapshotSnapshotIdUnavailable" /> when no IDs are available. This is irrecoverable state.
		/// </returns>
		public Result BeginSnapshot(ref BeginSnapshotOptions options, out uint outSnapshotId)
		{
			var optionsInternal = default(BeginSnapshotOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_ProgressionSnapshot_BeginSnapshot(InnerHandle, ref optionsInternal, out outSnapshotId);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Wipes out all progression data for the given user from the service. However, any previous progression data that haven't
		/// been submitted yet are retained.
		/// </summary>
		public void DeleteSnapshot(ref DeleteSnapshotOptions options, object clientData, OnDeleteSnapshotCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(DeleteSnapshotOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_ProgressionSnapshot_DeleteSnapshot(InnerHandle, ref optionsInternal, clientDataPointer, OnDeleteSnapshotCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Cleans up and releases resources associated with the given progression snapshot identifier.
		/// </summary>
		/// <returns>
		/// <see cref="Result.Success" /> when successful; otherwise, <see cref="Result.NotFound" />
		/// </returns>
		public Result EndSnapshot(ref EndSnapshotOptions options)
		{
			var optionsInternal = default(EndSnapshotOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_ProgressionSnapshot_EndSnapshot(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Saves the previously added Key/Value pairs of a given Snapshot to the service.
		/// 
		/// Note: This will overwrite any prior progression data stored with the service that's associated with the user.
		/// </summary>
		public void SubmitSnapshot(ref SubmitSnapshotOptions options, object clientData, OnSubmitSnapshotCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(SubmitSnapshotOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_ProgressionSnapshot_SubmitSnapshot(InnerHandle, ref optionsInternal, clientDataPointer, OnSubmitSnapshotCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

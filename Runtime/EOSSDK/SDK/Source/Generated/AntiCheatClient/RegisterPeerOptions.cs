// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatClient
{
	public struct RegisterPeerOptions
	{
		/// <summary>
		/// Locally unique value describing the remote user (e.g. a player object <see cref="IntPtr" />)
		/// </summary>
		public IntPtr PeerHandle { get; set; }

		/// <summary>
		/// Type of remote user being registered
		/// </summary>
		public AntiCheatCommon.AntiCheatCommonClientType ClientType { get; set; }

		/// <summary>
		/// Remote user's platform, if known
		/// </summary>
		public AntiCheatCommon.AntiCheatCommonClientPlatform ClientPlatform { get; set; }

		/// <summary>
		/// Time in seconds to allow newly registered peers to send the initial message containing their token.
		/// </summary>
		public uint AuthenticationTimeout { get; set; }

		/// <summary>
		/// Deprecated - use PeerProductUserId instead
		/// </summary>
		public Utf8String AccountId_DEPRECATED { get; set; }

		/// <summary>
		/// Optional IP address for the remote user. May be <see langword="null" /> if not available.
		/// IPv4 format: "0.0.0.0"
		/// IPv6 format: "0:0:0:0:0:0:0:0"
		/// </summary>
		public Utf8String IpAddress { get; set; }

		/// <summary>
		/// <see cref="ProductUserId" /> Identifier for the remote user
		/// </summary>
		public ProductUserId PeerProductUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct RegisterPeerOptionsInternal : ISettable<RegisterPeerOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_PeerHandle;
		private AntiCheatCommon.AntiCheatCommonClientType m_ClientType;
		private AntiCheatCommon.AntiCheatCommonClientPlatform m_ClientPlatform;
		private uint m_AuthenticationTimeout;
		private IntPtr m_AccountId_DEPRECATED;
		private IntPtr m_IpAddress;
		private IntPtr m_PeerProductUserId;

		public void Set(ref RegisterPeerOptions other)
		{
			Dispose();

			m_ApiVersion = AntiCheatClientInterface.REGISTERPEER_API_LATEST;
			m_PeerHandle = other.PeerHandle;
			m_ClientType = other.ClientType;
			m_ClientPlatform = other.ClientPlatform;
			m_AuthenticationTimeout = other.AuthenticationTimeout;
			Helper.Set(other.AccountId_DEPRECATED, ref m_AccountId_DEPRECATED);
			Helper.Set(other.IpAddress, ref m_IpAddress);
			Helper.Set(other.PeerProductUserId, ref m_PeerProductUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PeerHandle);
			Helper.Dispose(ref m_AccountId_DEPRECATED);
			Helper.Dispose(ref m_IpAddress);
			Helper.Dispose(ref m_PeerProductUserId);
		}
	}
}

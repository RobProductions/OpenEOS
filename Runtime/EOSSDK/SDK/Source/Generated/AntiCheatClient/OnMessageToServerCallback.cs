// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatClient
{

	/// <summary>
	/// Callback issued when a new message must be dispatched to the game server.
	/// 
	/// Messages contain opaque binary data and must be transmitted
	/// to the game server using the game's own networking layer, then delivered
	/// to the server anti-cheat instance using the <see cref="AntiCheatServer.AntiCheatServerInterface.ReceiveMessageFromClient" /> function.
	/// The upper limit of the message size is <see cref="AntiCheatClientInterface.ONMESSAGETOSERVERCALLBACK_MAX_MESSAGE_SIZE" />.
	/// 
	/// This callback is always issued from within <see cref="Platform.PlatformInterface.Tick" /> on its calling thread.
	/// </summary>
	public delegate void OnMessageToServerCallback(ref OnMessageToServerCallbackInfo data);

	[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
	internal delegate void OnMessageToServerCallbackInternal(ref OnMessageToServerCallbackInfoInternal data);

	internal static class OnMessageToServerCallbackInternalImplementation
	{
		private static OnMessageToServerCallbackInternal s_Delegate;
		public static OnMessageToServerCallbackInternal Delegate
		{
			get
			{
				if (s_Delegate == null)
				{
					s_Delegate = new OnMessageToServerCallbackInternal(EntryPoint);
				}

				return s_Delegate;
			}
		}

		[MonoPInvokeCallback(typeof(OnMessageToServerCallbackInternal))]
		public static void EntryPoint(ref OnMessageToServerCallbackInfoInternal data)
		{
			OnMessageToServerCallback callback;
			OnMessageToServerCallbackInfo callbackInfo;
			if (Helper.TryGetCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}
	}
}

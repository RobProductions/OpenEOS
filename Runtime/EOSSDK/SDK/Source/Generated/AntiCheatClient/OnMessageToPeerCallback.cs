// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatClient
{

	/// <summary>
	/// Callback issued when a new message must be dispatched to a connected peer.
	/// 
	/// Messages contain opaque binary data and must be transmitted
	/// to the correct peer using the game's own networking layer, then delivered
	/// to the client anti-cheat instance using the <see cref="AntiCheatClientInterface.ReceiveMessageFromPeer" /> function.
	/// The upper limit of the message size is <see cref="AntiCheatClientInterface.ONMESSAGETOPEERCALLBACK_MAX_MESSAGE_SIZE" />.
	/// 
	/// This callback is always issued from within <see cref="Platform.PlatformInterface.Tick" /> on its calling thread.
	/// </summary>
	public delegate void OnMessageToPeerCallback(ref AntiCheatCommon.OnMessageToClientCallbackInfo data);

	[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
	internal delegate void OnMessageToPeerCallbackInternal(ref AntiCheatCommon.OnMessageToClientCallbackInfoInternal data);

	internal static class OnMessageToPeerCallbackInternalImplementation
	{
		private static OnMessageToPeerCallbackInternal s_Delegate;
		public static OnMessageToPeerCallbackInternal Delegate
		{
			get
			{
				if (s_Delegate == null)
				{
					s_Delegate = new OnMessageToPeerCallbackInternal(EntryPoint);
				}

				return s_Delegate;
			}
		}

		[MonoPInvokeCallback(typeof(OnMessageToPeerCallbackInternal))]
		public static void EntryPoint(ref AntiCheatCommon.OnMessageToClientCallbackInfoInternal data)
		{
			OnMessageToPeerCallback callback;
			AntiCheatCommon.OnMessageToClientCallbackInfo callbackInfo;
			if (Helper.TryGetCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}
	}
}

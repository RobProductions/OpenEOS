// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTCAdmin
{
	/// <summary>
	/// Input parameters for the <see cref="RTCAdminInterface.QueryJoinRoomToken" /> function.
	/// </summary>
	public struct QueryJoinRoomTokenOptions
	{
		/// <summary>
		/// Product User ID for local user who is querying join room tokens.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Room name to request a token for.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// An array of Product User IDs indicating the users to retrieve a token for.
		/// </summary>
		public ProductUserId[] TargetUserIds { get; set; }

		/// <summary>
		/// Array of IP Addresses, one for each of the users we're querying tokens for.
		/// There should be TargetUserIdsCount Ip Addresses, you can set an entry to <see langword="null" /> if not known.
		/// If TargetUserIpAddresses is set to <see langword="null" /> IP Addresses will be ignored.
		/// IPv4 format: "0.0.0.0"
		/// IPv6 format: "0:0:0:0:0:0:0:0"
		/// </summary>
		public Utf8String TargetUserIpAddresses { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct QueryJoinRoomTokenOptionsInternal : ISettable<QueryJoinRoomTokenOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_RoomName;
		private IntPtr m_TargetUserIds;
		private uint m_TargetUserIdsCount;
		private IntPtr m_TargetUserIpAddresses;

		public void Set(ref QueryJoinRoomTokenOptions other)
		{
			Dispose();

			m_ApiVersion = RTCAdminInterface.QUERYJOINROOMTOKEN_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.RoomName, ref m_RoomName);
			Helper.Set(other.TargetUserIds, ref m_TargetUserIds, out m_TargetUserIdsCount, false);
			Helper.Set(other.TargetUserIpAddresses, ref m_TargetUserIpAddresses);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_RoomName);
			Helper.Dispose(ref m_TargetUserIds);
			Helper.Dispose(ref m_TargetUserIpAddresses);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	/// <summary>
	/// Input parameters for the <see cref="SessionsInterface.CreateSessionModification" /> function.
	/// </summary>
	public struct CreateSessionModificationOptions
	{
		/// <summary>
		/// Name of the session to create
		/// </summary>
		public Utf8String SessionName { get; set; }

		/// <summary>
		/// Bucket ID associated with the session
		/// </summary>
		public Utf8String BucketId { get; set; }

		/// <summary>
		/// Maximum number of players allowed in the session
		/// </summary>
		public uint MaxPlayers { get; set; }

		/// <summary>
		/// The Product User ID of the local user associated with the session
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Determines whether or not this session should be the one associated with the local user's presence information.
		/// If <see langword="true" />, this session will be associated with presence. Only one session at a time can have this flag <see langword="true" />.
		/// This affects the ability of the Social Overlay to show game related actions to take in the user's social graph.
		/// The Social Overlay can handle only one of the following three options at a time:
		/// * using the bPresenceEnabled flags within the Sessions interface
		/// * using the bPresenceEnabled flags within the Lobby interface
		/// * using <see cref="Presence.PresenceModification.SetJoinInfo" />
		/// <see cref="Presence.PresenceModificationSetJoinInfoOptions" />
		/// <see cref="Lobby.CreateLobbyOptions" />
		/// <see cref="Lobby.JoinLobbyOptions" />
		/// <see cref="JoinSessionOptions" />
		/// </summary>
		public bool PresenceEnabled { get; set; }

		/// <summary>
		/// Optional session id - set to a globally unique value to override the backend assignment
		/// If not specified the backend service will assign one to the session. Do not mix and match.
		/// This value can be of size [<see cref="SessionsInterface.SESSIONMODIFICATION_MIN_SESSIONIDOVERRIDE_LENGTH" />, <see cref="SessionsInterface.SESSIONMODIFICATION_MAX_SESSIONIDOVERRIDE_LENGTH" />]
		/// </summary>
		public Utf8String SessionId { get; set; }

		/// <summary>
		/// If <see langword="true" />, sanctioned players can neither join nor register with this session and, in the case of join,
		/// will return <see cref="Result" /> code <see cref="Result.SessionsPlayerSanctioned" />
		/// </summary>
		public bool SanctionsEnabled { get; set; }

		/// <summary>
		/// Array of platform IDs indicating the player platforms allowed to register with the session. Platform IDs are
		/// <PlatformName>'. For some platforms
		/// the value will be in the EOS Platform specific header file. If <see langword="null" />, the session will be unrestricted.
		/// </summary>
		public uint[] AllowedPlatformIds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct CreateSessionModificationOptionsInternal : ISettable<CreateSessionModificationOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_SessionName;
		private IntPtr m_BucketId;
		private uint m_MaxPlayers;
		private IntPtr m_LocalUserId;
		private int m_PresenceEnabled;
		private IntPtr m_SessionId;
		private int m_SanctionsEnabled;
		private IntPtr m_AllowedPlatformIds;
		private uint m_AllowedPlatformIdsCount;

		public void Set(ref CreateSessionModificationOptions other)
		{
			Dispose();

			m_ApiVersion = SessionsInterface.CREATESESSIONMODIFICATION_API_LATEST;
			Helper.Set(other.SessionName, ref m_SessionName);
			Helper.Set(other.BucketId, ref m_BucketId);
			m_MaxPlayers = other.MaxPlayers;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.PresenceEnabled, ref m_PresenceEnabled);
			Helper.Set(other.SessionId, ref m_SessionId);
			Helper.Set(other.SanctionsEnabled, ref m_SanctionsEnabled);
			Helper.Set(other.AllowedPlatformIds, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount, false);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_SessionName);
			Helper.Dispose(ref m_BucketId);
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_SessionId);
			Helper.Dispose(ref m_AllowedPlatformIds);
		}
	}
}

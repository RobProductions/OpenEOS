// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Sessions
{
	public sealed partial class ActiveSession : Handle
	{
		public ActiveSession()
		{
		}

		public ActiveSession(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// <see cref="CopyInfo" /> is used to immediately retrieve a copy of active session information
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutActiveSessionInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <see cref="ActiveSessionInfo" />
		/// <see cref="ActiveSessionCopyInfoOptions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outActiveSessionInfo">
		/// Out parameter used to receive the <see cref="ActiveSessionInfo" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutActiveSessionInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyInfo(ref ActiveSessionCopyInfoOptions options, out ActiveSessionInfo? outActiveSessionInfo)
		{
			var optionsInternal = default(ActiveSessionCopyInfoOptionsInternal);
			optionsInternal.Set(ref options);

			var outActiveSessionInfoPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_ActiveSession_CopyInfo(InnerHandle, ref optionsInternal, out outActiveSessionInfoPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<ActiveSessionInfoInternal, ActiveSessionInfo>(outActiveSessionInfoPointer, out outActiveSessionInfo);
			if (outActiveSessionInfoPointer != IntPtr.Zero)
			{
				Bindings.EOS_ActiveSession_Info_Release(outActiveSessionInfoPointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="GetRegisteredPlayerByIndex" /> is used to immediately retrieve individual players registered with the active session.
		/// <see cref="GetRegisteredPlayerCount" />
		/// <see cref="ActiveSessionGetRegisteredPlayerByIndexOptions" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <returns>
		/// the product user ID for the registered player at a given index or <see langword="null" /> if that index is invalid
		/// </returns>
		public ProductUserId GetRegisteredPlayerByIndex(ref ActiveSessionGetRegisteredPlayerByIndexOptions options)
		{
			var optionsInternal = default(ActiveSessionGetRegisteredPlayerByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_ActiveSession_GetRegisteredPlayerByIndex(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			ProductUserId callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get the number of registered players associated with this active session
		/// </summary>
		/// <param name="options">
		/// the Options associated with retrieving the registered player count
		/// </param>
		/// <returns>
		/// number of registered players in the active session or 0 if there is an error
		/// </returns>
		public uint GetRegisteredPlayerCount(ref ActiveSessionGetRegisteredPlayerCountOptions options)
		{
			var optionsInternal = default(ActiveSessionGetRegisteredPlayerCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_ActiveSession_GetRegisteredPlayerCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Release the memory associated with an active session.
		/// This must be called on data retrieved from <see cref="SessionsInterface.CopyActiveSessionHandle" />
		/// <see cref="SessionsInterface.CopyActiveSessionHandle" />
		/// </summary>
		/// <param name="activeSessionHandle">
		/// - The active session handle to release
		/// </param>
		public void Release()
		{
			Bindings.EOS_ActiveSession_Release(InnerHandle);
		}
	}
}

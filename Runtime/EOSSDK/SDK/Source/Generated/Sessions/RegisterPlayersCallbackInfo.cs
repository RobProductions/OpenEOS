// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	public struct RegisterPlayersCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// Context that was passed into <see cref="SessionsInterface.RegisterPlayers" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The players that were successfully registered
		/// </summary>
		public ProductUserId[] RegisteredPlayers { get; set; }

		/// <summary>
		/// The players that failed to register because they are sanctioned
		/// </summary>
		public ProductUserId[] SanctionedPlayers { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return ResultCode;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct RegisterPlayersCallbackInfoInternal : ICallbackInfoInternal, IGettable<RegisterPlayersCallbackInfo>
	{
		private Result m_ResultCode;
		private IntPtr m_ClientData;
		private IntPtr m_RegisteredPlayers;
		private uint m_RegisteredPlayersCount;
		private IntPtr m_SanctionedPlayers;
		private uint m_SanctionedPlayersCount;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out RegisterPlayersCallbackInfo other)
		{
			other = default;
			
			other.ResultCode = m_ResultCode;
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId[] RegisteredPlayersPublic;
			Helper.Get(m_RegisteredPlayers, out RegisteredPlayersPublic, m_RegisteredPlayersCount);
			other.RegisteredPlayers = RegisteredPlayersPublic;
			ProductUserId[] SanctionedPlayersPublic;
			Helper.Get(m_SanctionedPlayers, out SanctionedPlayersPublic, m_SanctionedPlayersCount);
			other.SanctionedPlayers = SanctionedPlayersPublic;
		}
	}
}

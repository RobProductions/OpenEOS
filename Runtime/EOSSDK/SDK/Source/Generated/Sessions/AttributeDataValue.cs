// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	public struct AttributeDataValue
	{
		private long? m_AsInt64;
		private double? m_AsDouble;
		private bool? m_AsBool;
		private Utf8String m_AsUtf8;
		private AttributeType m_ValueType;

		/// <summary>
		/// Stored as an 8 byte integer
		/// </summary>
		public long? AsInt64
		{
			get
			{
				if (m_ValueType == AttributeType.Int64)
				{
					return m_AsInt64;
				}

				return default;
			}
			set
			{
				m_AsInt64 = value;
				m_ValueType = AttributeType.Int64;
			}
		}

		/// <summary>
		/// Stored as a <see cref="double" /> precision floating point
		/// </summary>
		public double? AsDouble
		{
			get
			{
				if (m_ValueType == AttributeType.Double)
				{
					return m_AsDouble;
				}

				return default;
			}
			set
			{
				m_AsDouble = value;
				m_ValueType = AttributeType.Double;
			}
		}

		/// <summary>
		/// Stored as a boolean
		/// </summary>
		public bool? AsBool
		{
			get
			{
				if (m_ValueType == AttributeType.Boolean)
				{
					return m_AsBool;
				}

				return default;
			}
			set
			{
				m_AsBool = value;
				m_ValueType = AttributeType.Boolean;
			}
		}

		/// <summary>
		/// Stored as a <see cref="Utf8String" />. Should not be <see langword="null" />
		/// </summary>
		public Utf8String AsUtf8
		{
			get
			{
				if (m_ValueType == AttributeType.String)
				{
					return m_AsUtf8;
				}

				return default;
			}
			set
			{
				m_AsUtf8 = value;
				m_ValueType = AttributeType.String;
			}
		}
		public AttributeType ValueType
		{
			get
			{
				return m_ValueType;
			}
		}

		public static implicit operator AttributeDataValue(long? value)
		{
			return new AttributeDataValue() { AsInt64 = value };
		}

		public static implicit operator AttributeDataValue(double? value)
		{
			return new AttributeDataValue() { AsDouble = value };
		}

		public static implicit operator AttributeDataValue(bool? value)
		{
			return new AttributeDataValue() { AsBool = value };
		}

		public static implicit operator AttributeDataValue(Utf8String value)
		{
			return new AttributeDataValue() { AsUtf8 = value };
		}

		public static implicit operator AttributeDataValue(string value)
		{
			return new AttributeDataValue() { AsUtf8 = value };
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	internal struct AttributeDataValueInternal : IGettable<AttributeDataValue, AttributeType>, ISettable<AttributeDataValue>
	{
		[FieldOffset(0)]
		private long m_AsInt64;
		[FieldOffset(0)]
		private double m_AsDouble;
		[FieldOffset(0)]
		private int m_AsBool;
		[FieldOffset(0)]
		private IntPtr m_AsUtf8;

		public void Get(out AttributeDataValue other, AttributeType enumValue, int? arrayLength)
		{
			other = default;
			
			if (enumValue == AttributeType.Int64)
			{
				long? AsInt64Public;
				Helper.Get(m_AsInt64, out AsInt64Public);
				other.AsInt64 = AsInt64Public;
			}

			if (enumValue == AttributeType.Double)
			{
				double? AsDoublePublic;
				Helper.Get(m_AsDouble, out AsDoublePublic);
				other.AsDouble = AsDoublePublic;
			}

			if (enumValue == AttributeType.Boolean)
			{
				bool? AsBoolPublic;
				Helper.Get(m_AsBool, out AsBoolPublic);
				other.AsBool = AsBoolPublic;
			}

			if (enumValue == AttributeType.String)
			{
				Utf8String AsUtf8Public;
				Helper.Get(m_AsUtf8, out AsUtf8Public);
				other.AsUtf8 = AsUtf8Public;
			}
		}

		public void Set(ref AttributeDataValue other)
		{
			Dispose();

			if (other.ValueType == AttributeType.Int64)
			{
				Helper.Set(other.AsInt64, ref m_AsInt64);
			}

			if (other.ValueType == AttributeType.Double)
			{
				Helper.Set(other.AsDouble, ref m_AsDouble);
			}

			if (other.ValueType == AttributeType.Boolean)
			{
				Helper.Set(other.AsBool, ref m_AsBool);
			}

			if (other.ValueType == AttributeType.String)
			{
				Helper.Set(other.AsUtf8, ref m_AsUtf8);
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_AsUtf8);
		}
	}
}

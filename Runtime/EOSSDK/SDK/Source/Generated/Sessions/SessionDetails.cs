// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Sessions
{
	public sealed partial class SessionDetails : Handle
	{
		public SessionDetails()
		{
		}

		public SessionDetails(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// <see cref="CopyInfo" /> is used to immediately retrieve a copy of session information from a given source such as a active session or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <see cref="SessionDetailsInfo" />
		/// <see cref="SessionDetailsCopyInfoOptions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outSessionInfo">
		/// Out parameter used to receive the <see cref="SessionDetailsInfo" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyInfo(ref SessionDetailsCopyInfoOptions options, out SessionDetailsInfo? outSessionInfo)
		{
			var optionsInternal = default(SessionDetailsCopyInfoOptionsInternal);
			optionsInternal.Set(ref options);

			var outSessionInfoPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_SessionDetails_CopyInfo(InnerHandle, ref optionsInternal, out outSessionInfoPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<SessionDetailsInfoInternal, SessionDetailsInfo>(outSessionInfoPointer, out outSessionInfo);
			if (outSessionInfoPointer != IntPtr.Zero)
			{
				Bindings.EOS_SessionDetails_Info_Release(outSessionInfoPointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopySessionAttributeByIndex" /> is used to immediately retrieve a copy of session attribution from a given source such as a active session or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionAttribute, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <see cref="SessionDetailsAttribute" />
		/// <see cref="SessionDetailsCopySessionAttributeByIndexOptions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outSessionAttribute">
		/// Out parameter used to receive the <see cref="SessionDetailsAttribute" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopySessionAttributeByIndex(ref SessionDetailsCopySessionAttributeByIndexOptions options, out SessionDetailsAttribute? outSessionAttribute)
		{
			var optionsInternal = default(SessionDetailsCopySessionAttributeByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outSessionAttributePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_SessionDetails_CopySessionAttributeByIndex(InnerHandle, ref optionsInternal, out outSessionAttributePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<SessionDetailsAttributeInternal, SessionDetailsAttribute>(outSessionAttributePointer, out outSessionAttribute);
			if (outSessionAttributePointer != IntPtr.Zero)
			{
				Bindings.EOS_SessionDetails_Attribute_Release(outSessionAttributePointer);
			}

			return callResult;
		}

		/// <summary>
		/// <see cref="CopySessionAttributeByKey" /> is used to immediately retrieve a copy of session attribution from a given source such as a active session or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionAttribute, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <see cref="SessionDetailsAttribute" />
		/// <see cref="SessionDetailsCopySessionAttributeByKeyOptions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outSessionAttribute">
		/// Out parameter used to receive the <see cref="SessionDetailsAttribute" /> structure.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopySessionAttributeByKey(ref SessionDetailsCopySessionAttributeByKeyOptions options, out SessionDetailsAttribute? outSessionAttribute)
		{
			var optionsInternal = default(SessionDetailsCopySessionAttributeByKeyOptionsInternal);
			optionsInternal.Set(ref options);

			var outSessionAttributePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_SessionDetails_CopySessionAttributeByKey(InnerHandle, ref optionsInternal, out outSessionAttributePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<SessionDetailsAttributeInternal, SessionDetailsAttribute>(outSessionAttributePointer, out outSessionAttribute);
			if (outSessionAttributePointer != IntPtr.Zero)
			{
				Bindings.EOS_SessionDetails_Attribute_Release(outSessionAttributePointer);
			}

			return callResult;
		}

		/// <summary>
		/// Get the number of attributes associated with this session
		/// </summary>
		/// <param name="options">
		/// the Options associated with retrieving the attribute count
		/// </param>
		/// <returns>
		/// number of attributes on the session or 0 if there is an error
		/// </returns>
		public uint GetSessionAttributeCount(ref SessionDetailsGetSessionAttributeCountOptions options)
		{
			var optionsInternal = default(SessionDetailsGetSessionAttributeCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionDetails_GetSessionAttributeCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Release the memory associated with a single session. This must be called on data retrieved from <see cref="SessionSearch.CopySearchResultByIndex" />.
		/// <see cref="SessionSearch.CopySearchResultByIndex" />
		/// </summary>
		/// <param name="sessionHandle">
		/// - The session handle to release
		/// </param>
		public void Release()
		{
			Bindings.EOS_SessionDetails_Release(InnerHandle);
		}
	}
}

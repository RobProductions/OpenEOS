// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Sessions
{
	public sealed partial class SessionModification : Handle
	{
		public SessionModification()
		{
		}

		public SessionModification(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// Associate an attribute with this session
		/// An attribute is something that may or may not be advertised with the session.
		/// If advertised, it can be queried for in a search, otherwise the data remains local to the client
		/// </summary>
		/// <param name="options">
		/// Options to set the attribute and its advertised state
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the attribution is missing information or otherwise invalid
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result AddAttribute(ref SessionModificationAddAttributeOptions options)
		{
			var optionsInternal = default(SessionModificationAddAttributeOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_AddAttribute(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Release the memory associated with session modification.
		/// This must be called on data retrieved from <see cref="SessionsInterface.CreateSessionModification" /> or <see cref="SessionsInterface.UpdateSessionModification" />
		/// <see cref="SessionsInterface.CreateSessionModification" />
		/// <see cref="SessionsInterface.UpdateSessionModification" />
		/// </summary>
		/// <param name="sessionModificationHandle">
		/// - The session modification handle to release
		/// </param>
		public void Release()
		{
			Bindings.EOS_SessionModification_Release(InnerHandle);
		}

		/// <summary>
		/// Remove an attribute from this session
		/// </summary>
		/// <param name="options">
		/// Specify the key of the attribute to remove
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if removing this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the key is <see langword="null" /> or empty
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result RemoveAttribute(ref SessionModificationRemoveAttributeOptions options)
		{
			var optionsInternal = default(SessionModificationRemoveAttributeOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_RemoveAttribute(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Set the Allowed Platform IDs for the session.
		/// </summary>
		/// <param name="options">
		/// Options associated with allowed Platform IDs for this session.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.InvalidParameters" /> if the attribution is missing information or otherwise invalid
		/// </returns>
		public Result SetAllowedPlatformIds(ref SessionModificationSetAllowedPlatformIdsOptions options)
		{
			var optionsInternal = default(SessionModificationSetAllowedPlatformIdsOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetAllowedPlatformIds(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Set the bucket ID associated with this session.
		/// Values such as region, game mode, etc can be combined here depending on game need.
		/// Setting this is strongly recommended to improve search performance.
		/// </summary>
		/// <param name="options">
		/// Options associated with the bucket ID of the session
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the bucket ID is invalid or <see langword="null" />
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetBucketId(ref SessionModificationSetBucketIdOptions options)
		{
			var optionsInternal = default(SessionModificationSetBucketIdOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetBucketId(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Set the host address associated with this session
		/// Setting this is optional, if the value is not set the SDK will fill the value in from the service.
		/// It is useful to set if other addressing mechanisms are desired or if LAN addresses are preferred during development
		/// No validation of this value occurs to allow for flexibility in addressing methods
		/// </summary>
		/// <param name="options">
		/// Options associated with the host address of the session
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the host ID is an empty <see cref="Utf8String" />
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetHostAddress(ref SessionModificationSetHostAddressOptions options)
		{
			var optionsInternal = default(SessionModificationSetHostAddressOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetHostAddress(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Allows enabling or disabling invites for this session.
		/// The session will also need to have `bPresenceEnabled` <see langword="true" />.
		/// </summary>
		/// <param name="options">
		/// Options associated with invites allowed flag for this session.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetInvitesAllowed(ref SessionModificationSetInvitesAllowedOptions options)
		{
			var optionsInternal = default(SessionModificationSetInvitesAllowedOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetInvitesAllowed(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Set whether or not join in progress is allowed
		/// Once a session is started, it will no longer be visible to search queries unless this flag is set or the session returns to the pending or ended state
		/// </summary>
		/// <param name="options">
		/// Options associated with setting the join in progress state the session
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetJoinInProgressAllowed(ref SessionModificationSetJoinInProgressAllowedOptions options)
		{
			var optionsInternal = default(SessionModificationSetJoinInProgressAllowedOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetJoinInProgressAllowed(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Set the maximum number of players allowed in this session.
		/// When updating the session, it is not possible to reduce this number below the current number of existing players
		/// </summary>
		/// <param name="options">
		/// Options associated with max number of players in this session
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetMaxPlayers(ref SessionModificationSetMaxPlayersOptions options)
		{
			var optionsInternal = default(SessionModificationSetMaxPlayersOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetMaxPlayers(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Set the session permissions associated with this session.
		/// The permissions range from "public" to "invite only" and are described by <see cref="OnlineSessionPermissionLevel" />
		/// </summary>
		/// <param name="options">
		/// Options associated with the permission level of the session
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetPermissionLevel(ref SessionModificationSetPermissionLevelOptions options)
		{
			var optionsInternal = default(SessionModificationSetPermissionLevelOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_SessionModification_SetPermissionLevel(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}
	}
}

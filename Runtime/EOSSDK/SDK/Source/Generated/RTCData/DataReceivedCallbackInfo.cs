// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTCData
{
	/// <summary>
	/// This struct is passed in with a call to <see cref="RTCDataInterface.AddNotifyDataReceived" /> registered event.
	/// </summary>
	public struct DataReceivedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into <see cref="RTCDataInterface.AddNotifyDataReceived" />.
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the user who initiated this request.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The room associated with this event.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// The data received.
		/// </summary>
		public ArraySegment<byte> Data { get; set; }

		/// <summary>
		/// The Product User ID of the participant which sent the data.
		/// </summary>
		public ProductUserId ParticipantId { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct DataReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<DataReceivedCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_RoomName;
		private uint m_DataLengthBytes;
		private IntPtr m_Data;
		private IntPtr m_ParticipantId;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out DataReceivedCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			Utf8String RoomNamePublic;
			Helper.Get(m_RoomName, out RoomNamePublic);
			other.RoomName = RoomNamePublic;
			ArraySegment<byte> DataPublic;
			Helper.Get(m_Data, out DataPublic, m_DataLengthBytes);
			other.Data = DataPublic;
			ProductUserId ParticipantIdPublic;
			Helper.Get(m_ParticipantId, out ParticipantIdPublic);
			other.ParticipantId = ParticipantIdPublic;
		}
	}
}

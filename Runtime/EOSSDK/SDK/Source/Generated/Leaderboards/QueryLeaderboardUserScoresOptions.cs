// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Leaderboards
{
	/// <summary>
	/// Input parameters for the <see cref="LeaderboardsInterface.QueryLeaderboardUserScores" /> function.
	/// </summary>
	public struct QueryLeaderboardUserScoresOptions
	{
		/// <summary>
		/// An array of Product User IDs indicating the users whose scores you want to retrieve
		/// </summary>
		public ProductUserId[] UserIds { get; set; }

		/// <summary>
		/// The stats to be collected, along with the sorting method to use when determining rank order for each stat
		/// </summary>
		public UserScoresQueryStatInfo[] StatInfo { get; set; }

		/// <summary>
		/// An optional POSIX timestamp, or <see cref="LeaderboardsInterface.TIME_UNDEFINED" />; results will only include scores made after this time
		/// </summary>
		public DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// An optional POSIX timestamp, or <see cref="LeaderboardsInterface.TIME_UNDEFINED" />; results will only include scores made before this time
		/// </summary>
		public DateTimeOffset? EndTime { get; set; }

		/// <summary>
		/// Product User ID for user who is querying user scores.
		/// Must be set when using a client policy that requires a valid logged in user.
		/// Not used for Dedicated Server where no user is available.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct QueryLeaderboardUserScoresOptionsInternal : ISettable<QueryLeaderboardUserScoresOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_UserIds;
		private uint m_UserIdsCount;
		private IntPtr m_StatInfo;
		private uint m_StatInfoCount;
		private long m_StartTime;
		private long m_EndTime;
		private IntPtr m_LocalUserId;

		public void Set(ref QueryLeaderboardUserScoresOptions other)
		{
			Dispose();

			m_ApiVersion = LeaderboardsInterface.QUERYLEADERBOARDUSERSCORES_API_LATEST;
			Helper.Set(other.UserIds, ref m_UserIds, out m_UserIdsCount, false);
			Helper.Set<UserScoresQueryStatInfo, UserScoresQueryStatInfoInternal>(other.StatInfo, ref m_StatInfo, out m_StatInfoCount, false);
			Helper.Set(other.StartTime, ref m_StartTime);
			Helper.Set(other.EndTime, ref m_EndTime);
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_UserIds);
			Helper.Dispose(ref m_StatInfo);
			Helper.Dispose(ref m_LocalUserId);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Leaderboards
{
	/// <summary>
	/// Contains information about a single leaderboard definition
	/// </summary>
	public struct Definition
	{
		/// <summary>
		/// Unique ID to identify leaderboard.
		/// </summary>
		public Utf8String LeaderboardId { get; set; }

		/// <summary>
		/// Name of stat used to rank leaderboard.
		/// </summary>
		public Utf8String StatName { get; set; }

		/// <summary>
		/// Aggregation used to sort leaderboard.
		/// </summary>
		public LeaderboardAggregation Aggregation { get; set; }

		/// <summary>
		/// The POSIX timestamp for the start time, or <see cref="LeaderboardsInterface.TIME_UNDEFINED" />.
		/// </summary>
		public DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// The POSIX timestamp for the end time, or <see cref="LeaderboardsInterface.TIME_UNDEFINED" />.
		/// </summary>
		public DateTimeOffset? EndTime { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct DefinitionInternal : IGettable<Definition>
	{
		private int m_ApiVersion;
		private IntPtr m_LeaderboardId;
		private IntPtr m_StatName;
		private LeaderboardAggregation m_Aggregation;
		private long m_StartTime;
		private long m_EndTime;

		public void Get(out Definition other)
		{
			other = default;
			
			Utf8String LeaderboardIdPublic;
			Helper.Get(m_LeaderboardId, out LeaderboardIdPublic);
			other.LeaderboardId = LeaderboardIdPublic;
			Utf8String StatNamePublic;
			Helper.Get(m_StatName, out StatNamePublic);
			other.StatName = StatNamePublic;
			other.Aggregation = m_Aggregation;
			DateTimeOffset? StartTimePublic;
			Helper.Get(m_StartTime, out StartTimePublic);
			other.StartTime = StartTimePublic;
			DateTimeOffset? EndTimePublic;
			Helper.Get(m_EndTime, out EndTimePublic);
			other.EndTime = EndTimePublic;
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Leaderboards
{
	public sealed partial class LeaderboardsInterface : Handle
	{
		public LeaderboardsInterface()
		{
		}

		public LeaderboardsInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardDefinitionByIndexOptions" /> struct.
		/// </summary>
		public const int COPYLEADERBOARDDEFINITIONBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardDefinitionByLeaderboardIdOptions" /> struct.
		/// </summary>
		public const int COPYLEADERBOARDDEFINITIONBYLEADERBOARDID_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardRecordByIndexOptions" /> struct.
		/// </summary>
		public const int COPYLEADERBOARDRECORDBYINDEX_API_LATEST = 2;
		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardRecordByUserIdOptions" /> struct.
		/// </summary>
		public const int COPYLEADERBOARDRECORDBYUSERID_API_LATEST = 2;
		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardUserScoreByIndexOptions" /> struct.
		/// </summary>
		public const int COPYLEADERBOARDUSERSCOREBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardUserScoreByUserIdOptions" /> struct.
		/// </summary>
		public const int COPYLEADERBOARDUSERSCOREBYUSERID_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="Definition" /> struct.
		/// </summary>
		public const int DEFINITION_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetLeaderboardDefinitionCount" /> API.
		/// </summary>
		public const int GETLEADERBOARDDEFINITIONCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetLeaderboardRecordCount" /> API.
		/// </summary>
		public const int GETLEADERBOARDRECORDCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetLeaderboardUserScoreCount" /> API.
		/// </summary>
		public const int GETLEADERBOARDUSERSCORECOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="LeaderboardRecord" /> struct.
		/// </summary>
		public const int LEADERBOARDRECORD_API_LATEST = 2;
		/// <summary>
		/// The most recent version of the <see cref="LeaderboardUserScore" /> struct.
		/// </summary>
		public const int LEADERBOARDUSERSCORE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="QueryLeaderboardDefinitions" /> struct.
		/// </summary>
		public const int QUERYLEADERBOARDDEFINITIONS_API_LATEST = 2;
		/// <summary>
		/// The most recent version of the <see cref="QueryLeaderboardRanks" /> struct.
		/// </summary>
		public const int QUERYLEADERBOARDRANKS_API_LATEST = 2;
		/// <summary>
		/// The most recent version of the <see cref="QueryLeaderboardUserScores" /> struct.
		/// </summary>
		public const int QUERYLEADERBOARDUSERSCORES_API_LATEST = 2;
		/// <summary>
		/// Timestamp value representing an undefined time for <see cref="LeaderboardsInterface" />.
		/// </summary>
		public const int TIME_UNDEFINED = -1;
		/// <summary>
		/// The most recent version of the <see cref="UserScoresQueryStatInfo" /> struct.
		/// </summary>
		public const int USERSCORESQUERYSTATINFO_API_LATEST = 1;

		/// <summary>
		/// Fetches a leaderboard definition from the cache using an index.
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the index being accessed.
		/// </param>
		/// <param name="outLeaderboardDefinition">
		/// The leaderboard data for the given index, if it exists and is valid, use <see cref="Release" /> when finished.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLeaderboardDefinition
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard is not found
		/// </returns>
		public Result CopyLeaderboardDefinitionByIndex(ref CopyLeaderboardDefinitionByIndexOptions options, out Definition? outLeaderboardDefinition)
		{
			var optionsInternal = default(CopyLeaderboardDefinitionByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outLeaderboardDefinitionPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(InnerHandle, ref optionsInternal, out outLeaderboardDefinitionPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<DefinitionInternal, Definition>(outLeaderboardDefinitionPointer, out outLeaderboardDefinition);
			if (outLeaderboardDefinitionPointer != IntPtr.Zero)
			{
				Bindings.EOS_Leaderboards_Definition_Release(outLeaderboardDefinitionPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetches a leaderboard definition from the cache using a leaderboard ID.
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the leaderboard ID being accessed.
		/// </param>
		/// <param name="outLeaderboardDefinition">
		/// The leaderboard definition for the given leaderboard ID, if it exists and is valid, use <see cref="Release" /> when finished.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLeaderboardDefinition
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard data is not found
		/// </returns>
		public Result CopyLeaderboardDefinitionByLeaderboardId(ref CopyLeaderboardDefinitionByLeaderboardIdOptions options, out Definition? outLeaderboardDefinition)
		{
			var optionsInternal = default(CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal);
			optionsInternal.Set(ref options);

			var outLeaderboardDefinitionPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(InnerHandle, ref optionsInternal, out outLeaderboardDefinitionPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<DefinitionInternal, Definition>(outLeaderboardDefinitionPointer, out outLeaderboardDefinition);
			if (outLeaderboardDefinitionPointer != IntPtr.Zero)
			{
				Bindings.EOS_Leaderboards_Definition_Release(outLeaderboardDefinitionPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetches a leaderboard record from a given index.
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the index being accessed.
		/// </param>
		/// <param name="outLeaderboardRecord">
		/// The leaderboard record for the given index, if it exists and is valid, use <see cref="Release" /> when finished.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard record is available and passed out in OutLeaderboardRecord
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard is not found
		/// </returns>
		public Result CopyLeaderboardRecordByIndex(ref CopyLeaderboardRecordByIndexOptions options, out LeaderboardRecord? outLeaderboardRecord)
		{
			var optionsInternal = default(CopyLeaderboardRecordByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outLeaderboardRecordPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Leaderboards_CopyLeaderboardRecordByIndex(InnerHandle, ref optionsInternal, out outLeaderboardRecordPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecordPointer, out outLeaderboardRecord);
			if (outLeaderboardRecordPointer != IntPtr.Zero)
			{
				Bindings.EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecordPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetches a leaderboard record from a given user ID.
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the user ID being accessed.
		/// </param>
		/// <param name="outLeaderboardRecord">
		/// The leaderboard record for the given user ID, if it exists and is valid, use <see cref="Release" /> when finished.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard record is available and passed out in OutLeaderboardRecord
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard data is not found
		/// </returns>
		public Result CopyLeaderboardRecordByUserId(ref CopyLeaderboardRecordByUserIdOptions options, out LeaderboardRecord? outLeaderboardRecord)
		{
			var optionsInternal = default(CopyLeaderboardRecordByUserIdOptionsInternal);
			optionsInternal.Set(ref options);

			var outLeaderboardRecordPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Leaderboards_CopyLeaderboardRecordByUserId(InnerHandle, ref optionsInternal, out outLeaderboardRecordPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecordPointer, out outLeaderboardRecord);
			if (outLeaderboardRecordPointer != IntPtr.Zero)
			{
				Bindings.EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecordPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetches leaderboard user score from a given index.
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the index being accessed.
		/// </param>
		/// <param name="outLeaderboardUserScore">
		/// The leaderboard user score for the given index, if it exists and is valid, use <see cref="Release" /> when finished.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard scores are available and passed out in OutLeaderboardUserScore
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard user scores are not found
		/// </returns>
		public Result CopyLeaderboardUserScoreByIndex(ref CopyLeaderboardUserScoreByIndexOptions options, out LeaderboardUserScore? outLeaderboardUserScore)
		{
			var optionsInternal = default(CopyLeaderboardUserScoreByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outLeaderboardUserScorePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(InnerHandle, ref optionsInternal, out outLeaderboardUserScorePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScorePointer, out outLeaderboardUserScore);
			if (outLeaderboardUserScorePointer != IntPtr.Zero)
			{
				Bindings.EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScorePointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetches leaderboard user score from a given user ID.
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the user ID being accessed.
		/// </param>
		/// <param name="outLeaderboardUserScore">
		/// The leaderboard user score for the given user ID, if it exists and is valid, use <see cref="Release" /> when finished.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard scores are available and passed out in OutLeaderboardUserScore
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard user scores are not found
		/// </returns>
		public Result CopyLeaderboardUserScoreByUserId(ref CopyLeaderboardUserScoreByUserIdOptions options, out LeaderboardUserScore? outLeaderboardUserScore)
		{
			var optionsInternal = default(CopyLeaderboardUserScoreByUserIdOptionsInternal);
			optionsInternal.Set(ref options);

			var outLeaderboardUserScorePointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(InnerHandle, ref optionsInternal, out outLeaderboardUserScorePointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScorePointer, out outLeaderboardUserScore);
			if (outLeaderboardUserScorePointer != IntPtr.Zero)
			{
				Bindings.EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScorePointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetch the number of leaderboards definitions that are cached locally.
		/// <see cref="CopyLeaderboardDefinitionByIndex" />
		/// <see cref="CopyLeaderboardDefinitionByLeaderboardId" />
		/// </summary>
		/// <param name="options">
		/// The Options associated with retrieving the leaderboard count.
		/// </param>
		/// <returns>
		/// Number of leaderboards or 0 if there is an error
		/// </returns>
		public uint GetLeaderboardDefinitionCount(ref GetLeaderboardDefinitionCountOptions options)
		{
			var optionsInternal = default(GetLeaderboardDefinitionCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Leaderboards_GetLeaderboardDefinitionCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Fetch the number of leaderboard records that are cached locally.
		/// <see cref="CopyLeaderboardRecordByIndex" />
		/// <see cref="CopyLeaderboardRecordByUserId" />
		/// </summary>
		/// <param name="options">
		/// The Options associated with retrieving the leaderboard record count.
		/// </param>
		/// <returns>
		/// Number of leaderboard records or 0 if there is an error
		/// </returns>
		public uint GetLeaderboardRecordCount(ref GetLeaderboardRecordCountOptions options)
		{
			var optionsInternal = default(GetLeaderboardRecordCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Leaderboards_GetLeaderboardRecordCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Fetch the number of leaderboard user scores that are cached locally.
		/// <see cref="CopyLeaderboardUserScoreByIndex" />
		/// <see cref="CopyLeaderboardUserScoreByUserId" />
		/// </summary>
		/// <param name="options">
		/// The Options associated with retrieving the leaderboard user scores count.
		/// </param>
		/// <returns>
		/// Number of leaderboard records or 0 if there is an error
		/// </returns>
		public uint GetLeaderboardUserScoreCount(ref GetLeaderboardUserScoreCountOptions options)
		{
			var optionsInternal = default(GetLeaderboardUserScoreCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Leaderboards_GetLeaderboardUserScoreCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Query for a list of existing leaderboards definitions including their attributes.
		/// </summary>
		/// <param name="options">
		/// Structure containing information about the application whose leaderboard definitions we're retrieving.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate.
		/// </param>
		/// <param name="completionDelegate">
		/// This function is called when the query operation completes.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryLeaderboardDefinitions(ref QueryLeaderboardDefinitionsOptions options, object clientData, OnQueryLeaderboardDefinitionsCompleteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryLeaderboardDefinitionsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Leaderboards_QueryLeaderboardDefinitions(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryLeaderboardDefinitionsCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Retrieves top leaderboard records by rank in the leaderboard matching the given leaderboard ID.
		/// </summary>
		/// <param name="options">
		/// Structure containing information about the leaderboard records we're retrieving.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate.
		/// </param>
		/// <param name="completionDelegate">
		/// This function is called when the query operation completes.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryLeaderboardRanks(ref QueryLeaderboardRanksOptions options, object clientData, OnQueryLeaderboardRanksCompleteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryLeaderboardRanksOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Leaderboards_QueryLeaderboardRanks(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryLeaderboardRanksCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Query for a list of scores for a given list of users.
		/// </summary>
		/// <param name="options">
		/// Structure containing information about the users whose scores we're retrieving.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate.
		/// </param>
		/// <param name="completionDelegate">
		/// This function is called when the query operation completes.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryLeaderboardUserScores(ref QueryLeaderboardUserScoresOptions options, object clientData, OnQueryLeaderboardUserScoresCompleteCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryLeaderboardUserScoresOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Leaderboards_QueryLeaderboardUserScores(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryLeaderboardUserScoresCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Leaderboards
{
	/// <summary>
	/// Input parameters for the <see cref="LeaderboardsInterface.QueryLeaderboardDefinitions" /> function.
	/// StartTime and EndTime are optional parameters, they can be used to limit the list of definitions
	/// to overlap the time window specified.
	/// </summary>
	public struct QueryLeaderboardDefinitionsOptions
	{
		/// <summary>
		/// An optional POSIX timestamp for the leaderboard's start time, or <see cref="LeaderboardsInterface.TIME_UNDEFINED" />
		/// </summary>
		public DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// An optional POSIX timestamp for the leaderboard's end time, or <see cref="LeaderboardsInterface.TIME_UNDEFINED" />
		/// </summary>
		public DateTimeOffset? EndTime { get; set; }

		/// <summary>
		/// Product User ID for user who is querying definitions.
		/// Must be set when using a client policy that requires a valid logged in user.
		/// Not used for Dedicated Server where no user is available.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct QueryLeaderboardDefinitionsOptionsInternal : ISettable<QueryLeaderboardDefinitionsOptions>
	{
		private int m_ApiVersion;
		private long m_StartTime;
		private long m_EndTime;
		private IntPtr m_LocalUserId;

		public void Set(ref QueryLeaderboardDefinitionsOptions other)
		{
			Dispose();

			m_ApiVersion = LeaderboardsInterface.QUERYLEADERBOARDDEFINITIONS_API_LATEST;
			Helper.Set(other.StartTime, ref m_StartTime);
			Helper.Set(other.EndTime, ref m_EndTime);
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
		}
	}
}

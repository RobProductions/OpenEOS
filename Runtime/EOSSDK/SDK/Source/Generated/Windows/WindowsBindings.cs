// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_STANDALONE_WIN && !UNITY_64
	#define EOS_PLATFORM_WINDOWS_32
#endif

#if UNITY_EDITOR
	#define EOS_EDITOR
#endif

#if EOS_EDITOR
	#define EOS_DYNAMIC_BINDINGS
#endif

#if EOS_DYNAMIC_BINDINGS
	#if EOS_PLATFORM_WINDOWS_32
		#define EOS_DYNAMIC_BINDINGS_MANGLING_WINDOWS_32
	#elif EOS_PLATFORM_OSX || EOS_PLATFORM_IOS
		#define EOS_DYNAMIC_BINDINGS_MANGLING_APPLE
	#else
		#define EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
	#endif
#endif

#if UNITY_EDITOR_WIN
	#define EOS_PLATFORM_WINDOWS_64
#elif UNITY_STANDALONE_WIN
	#if UNITY_64
		#define EOS_PLATFORM_WINDOWS_64
	#else
		#define EOS_PLATFORM_WINDOWS_32
	#endif
#endif

#if EOS_PLATFORM_WINDOWS_32 || EOS_PLATFORM_WINDOWS_64
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices
{
	public static partial class WindowsBindings
	{
#if EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
		private const string EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamName = "EOS_IntegratedPlatformOptionsContainer_Add";
		private const string EOS_Platform_Create_WindowsName = "EOS_Platform_Create";
#endif
#if EOS_DYNAMIC_BINDINGS_MANGLING_WINDOWS_32
		private const string EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamName = "_EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteam@8";
		private const string EOS_Platform_Create_WindowsName = "_EOS_Platform_Create_Windows@4";
#endif

#if EOS_DYNAMIC_BINDINGS
		/// <summary>
		/// Hooks dynamic bindings.
		/// </summary>
		/// <param name="libraryHandle">A handle to the library to find functions in. The type is platform dependent, but would typically be an <see cref="IntPtr"/>.</param>
		/// <param name="getFunctionPointer">A delegate that takes a library handle and function name, and returns an <see cref="IntPtr"/> which is a pointer to the function within the library.</param>
		public static void Hook<TLibraryHandle>(TLibraryHandle libraryHandle, Func<TLibraryHandle, string, IntPtr> getFunctionPointer)
		{
			IntPtr functionPointer;

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamName);
			EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteam = (EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_Create_WindowsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_Create_WindowsName);
			EOS_Platform_Create_Windows = (EOS_Platform_Create_WindowsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_Create_WindowsDelegate));
		}

		/// <summary>
		/// Unhooks dynamic bindings.
		/// </summary>
		public static void Unhook()
		{
			EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteam = null;
			EOS_Platform_Create_Windows = null;
		}

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamDelegate(IntPtr handle, ref IntegratedPlatform.WindowsSteamIntegratedPlatformOptionsContainerAddOptionsInternal inOptions);
		internal static EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteamDelegate EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteam;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_Create_WindowsDelegate(ref Platform.WindowsOptionsInternal options);
		internal static EOS_Platform_Create_WindowsDelegate EOS_Platform_Create_Windows;
#else
		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatformOptionsContainer_Add", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_IntegratedPlatformOptionsContainer_Add_WindowsSteam(IntPtr handle, ref IntegratedPlatform.WindowsSteamIntegratedPlatformOptionsContainerAddOptionsInternal inOptions);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_Create", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_Create_Windows(ref Platform.WindowsOptionsInternal options);
#endif
	}
}
#endif
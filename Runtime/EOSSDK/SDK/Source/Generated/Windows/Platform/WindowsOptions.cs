// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_EDITOR_WIN
	#define EOS_PLATFORM_WINDOWS_64
#elif UNITY_STANDALONE_WIN
	#if UNITY_64
		#define EOS_PLATFORM_WINDOWS_64
	#else
		#define EOS_PLATFORM_WINDOWS_32
	#endif
#endif

#if EOS_PLATFORM_WINDOWS_32 || EOS_PLATFORM_WINDOWS_64
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Platform options for <see cref="PlatformInterface.Create" />.
	/// </summary>
	public struct WindowsOptions
	{
		/// <summary>
		/// A reserved field that should always be <see langword="null" />.
		/// </summary>
		public IntPtr Reserved { get; set; }

		/// <summary>
		/// The product ID for the running application, found on the dev portal. Max length is <see cref="PlatformInterface.OPTIONS_PRODUCTID_MAX_LENGTH" />.
		/// </summary>
		public Utf8String ProductId { get; set; }

		/// <summary>
		/// The sandbox ID for the running application, found on the dev portal. Max length is <see cref="PlatformInterface.OPTIONS_SANDBOXID_MAX_LENGTH" />.
		/// </summary>
		public Utf8String SandboxId { get; set; }

		/// <summary>
		/// Set of service permissions associated with the running application
		/// </summary>
		public ClientCredentials ClientCredentials { get; set; }

		/// <summary>
		/// Set this to <see langword="false" /> if the application is running as a client with a local user, otherwise set to <see langword="true" /> (e.g. for a dedicated game server)
		/// </summary>
		public bool IsServer { get; set; }

		/// <summary>
		/// Used by Player Data Storage and Title Storage. Must be <see langword="null" /> initialized if unused. 256-bit Encryption Key for file encryption in hexadecimal format; <see cref="PlatformInterface.OPTIONS_ENCRYPTIONKEY_LENGTH" /> hex chars.
		/// </summary>
		public Utf8String EncryptionKey { get; set; }

		/// <summary>
		/// The override country code to use for the logged in user. (<see cref="PlatformInterface.COUNTRYCODE_MAX_LENGTH" />)
		/// </summary>
		public Utf8String OverrideCountryCode { get; set; }

		/// <summary>
		/// The override locale code to use for the logged in user. This follows ISO 639. (<see cref="PlatformInterface.LOCALECODE_MAX_LENGTH" />)
		/// </summary>
		public Utf8String OverrideLocaleCode { get; set; }

		/// <summary>
		/// The deployment ID for the running application, found on the dev portal. Max length is <see cref="PlatformInterface.OPTIONS_DEPLOYMENTID_MAX_LENGTH" />.
		/// </summary>
		public Utf8String DeploymentId { get; set; }

		/// <summary>
		/// Platform creation flags, e.g. <see cref="PlatformFlags.LoadingInEditor" />. This is a bitwise-or union of the defined flags.
		/// </summary>
		public PlatformFlags Flags { get; set; }

		/// <summary>
		/// Used by Player Data Storage and Title Storage. Must be <see langword="null" /> initialized if unused. Cache directory path. Absolute path to the folder that is going to be used for caching temporary data. The path is created if it's missing.
		/// </summary>
		public Utf8String CacheDirectory { get; set; }

		/// <summary>
		/// A budget, measured in milliseconds, for <see cref="PlatformInterface.Tick" /> to do its work. When the budget is met or exceeded (or if no work is available), <see cref="PlatformInterface.Tick" /> will return.
		/// This allows your game to amortize the cost of SDK work across multiple frames in the event that a lot of work is queued for processing.
		/// Zero is interpreted as "perform all available work".
		/// </summary>
		public uint TickBudgetInMilliseconds { get; set; }

		/// <summary>
		/// RTC options. Setting to <see langword="null" /> will disable RTC features (e.g. voice)
		/// </summary>
		public WindowsRTCOptions? RTCOptions { get; set; }

		/// <summary>
		/// A handle that contains all the options for setting up integrated platforms.
		/// When set to <see langword="null" />, the EOS Integrated Platform behavior for the host platform will be disabled.
		/// </summary>
		public IntegratedPlatform.IntegratedPlatformOptionsContainer IntegratedPlatformOptionsContainerHandle { get; set; }

		/// <summary>
		/// <see cref="IntPtr" /> to EOS_"PLATFORM_NAME"_SystemSpecificOptions. This structure will be located in "PLATFORM_NAME"/eos_"PLATFORM_NAME".h
		/// </summary>
		public IntPtr SystemSpecificOptions { get; set; }

		/// <summary>
		/// Number of seconds for a task to wait for the network to become available before timing out with an <see cref="Result.TimedOut" /> error.
		/// This timeout period applies when the network status is not <see cref="NetworkStatus.Online" />. Tasks that need the network will queue for up to
		/// this timeout until <see cref="PlatformInterface.SetNetworkStatus" /> is used to set the network status to online.
		/// 
		/// Pass a <see langword="null" /> <see cref="IntPtr" /> to use the default.
		/// Otherwise, pass a <see cref="IntPtr" /> to a <see cref="double" /> containing the number of seconds for tasks that are waiting for network to time out.
		/// <see cref="PlatformInterface.SetNetworkStatus" />
		/// <see cref="NetworkStatus" />
		/// </summary>
		public double? TaskNetworkTimeoutSeconds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct WindowsOptionsInternal : ISettable<WindowsOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_Reserved;
		private IntPtr m_ProductId;
		private IntPtr m_SandboxId;
		private ClientCredentialsInternal m_ClientCredentials;
		private int m_IsServer;
		private IntPtr m_EncryptionKey;
		private IntPtr m_OverrideCountryCode;
		private IntPtr m_OverrideLocaleCode;
		private IntPtr m_DeploymentId;
		private PlatformFlags m_Flags;
		private IntPtr m_CacheDirectory;
		private uint m_TickBudgetInMilliseconds;
		private IntPtr m_RTCOptions;
		private IntPtr m_IntegratedPlatformOptionsContainerHandle;
		private IntPtr m_SystemSpecificOptions;
		private IntPtr m_TaskNetworkTimeoutSeconds;

		public void Set(ref WindowsOptions other)
		{
			Dispose();

			m_ApiVersion = PlatformInterface.OPTIONS_API_LATEST;
			m_Reserved = other.Reserved;
			Helper.Set(other.ProductId, ref m_ProductId);
			Helper.Set(other.SandboxId, ref m_SandboxId);
			Helper.Set<ClientCredentials, ClientCredentialsInternal>(other.ClientCredentials, ref m_ClientCredentials);
			Helper.Set(other.IsServer, ref m_IsServer);
			Helper.Set(other.EncryptionKey, ref m_EncryptionKey);
			Helper.Set(other.OverrideCountryCode, ref m_OverrideCountryCode);
			Helper.Set(other.OverrideLocaleCode, ref m_OverrideLocaleCode);
			Helper.Set(other.DeploymentId, ref m_DeploymentId);
			m_Flags = other.Flags;
			Helper.Set(other.CacheDirectory, ref m_CacheDirectory);
			m_TickBudgetInMilliseconds = other.TickBudgetInMilliseconds;
			Helper.Set<WindowsRTCOptions, WindowsRTCOptionsInternal>(other.RTCOptions, ref m_RTCOptions);
			Helper.Set(other.IntegratedPlatformOptionsContainerHandle, ref m_IntegratedPlatformOptionsContainerHandle);
			m_SystemSpecificOptions = other.SystemSpecificOptions;
			Helper.Set(other.TaskNetworkTimeoutSeconds, ref m_TaskNetworkTimeoutSeconds);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Reserved);
			Helper.Dispose(ref m_ProductId);
			Helper.Dispose(ref m_SandboxId);
			Helper.Dispose(ref m_ClientCredentials);
			Helper.Dispose(ref m_EncryptionKey);
			Helper.Dispose(ref m_OverrideCountryCode);
			Helper.Dispose(ref m_OverrideLocaleCode);
			Helper.Dispose(ref m_DeploymentId);
			Helper.Dispose(ref m_CacheDirectory);
			Helper.Dispose(ref m_RTCOptions);
			Helper.Dispose(ref m_IntegratedPlatformOptionsContainerHandle);
			Helper.Dispose(ref m_SystemSpecificOptions);
			Helper.Dispose(ref m_TaskNetworkTimeoutSeconds);
		}
	}
}
#endif

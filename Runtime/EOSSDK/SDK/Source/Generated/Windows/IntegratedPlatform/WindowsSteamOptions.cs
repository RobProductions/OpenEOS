// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_EDITOR_WIN
	#define EOS_PLATFORM_WINDOWS_64
#elif UNITY_STANDALONE_WIN
	#if UNITY_64
		#define EOS_PLATFORM_WINDOWS_64
	#else
		#define EOS_PLATFORM_WINDOWS_32
	#endif
#endif

#if EOS_PLATFORM_WINDOWS_32 || EOS_PLATFORM_WINDOWS_64
using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.IntegratedPlatform
{
	/// <summary>
	/// </summary>
	public struct WindowsSteamOptions
	{
		/// <summary>
		/// The type to be initialized.
		/// </summary>
		public Utf8String Type { get; set; }

		/// <summary>
		/// Identifies how to initialize the IntegratedPlatform.
		/// </summary>
		public IntegratedPlatformManagementFlags Flags { get; set; }

		/// <summary>
		/// Options specific to this integrated platform type.
		/// This parameter is either required or set to <see langword="null" /> based on the platform type.
		/// <see cref="WindowsSteamOptionsInitOptions" />
		/// </summary>
		public WindowsSteamOptionsInitOptions? InitOptions { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct WindowsSteamOptionsInternal : ISettable<WindowsSteamOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_Type;
		private IntegratedPlatformManagementFlags m_Flags;
		private IntPtr m_InitOptions;

		public void Set(ref WindowsSteamOptions other)
		{
			Dispose();

			m_ApiVersion = IntegratedPlatformInterface.OPTIONS_API_LATEST;
			Helper.Set(other.Type, ref m_Type);
			m_Flags = other.Flags;
			Helper.Set<WindowsSteamOptionsInitOptions, WindowsSteamOptionsInitOptionsInternal>(other.InitOptions, ref m_InitOptions);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Type);
			Helper.Dispose(ref m_InitOptions);
		}
	}
}
#endif

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.KWS
{
	public sealed partial class KWSInterface : Handle
	{
		public KWSInterface()
		{
		}

		public KWSInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyPermissionsUpdateReceived" /> API.
		/// </summary>
		public const int ADDNOTIFYPERMISSIONSUPDATERECEIVED_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CopyPermissionByIndex" /> API.
		/// </summary>
		public const int COPYPERMISSIONBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CreateUser" /> API.
		/// </summary>
		public const int CREATEUSER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CreateUser" /> API.
		/// </summary>
		public const int GETPERMISSIONBYKEY_API_LATEST = 1;
		public const int GETPERMISSIONSCOUNT_API_LATEST = 1;
		/// <summary>
		/// Maximum number of permissions that may be requested
		/// </summary>
		public const int MAX_PERMISSIONS = 16;
		/// <summary>
		/// Maximum size of the name for the permission
		/// </summary>
		public const int MAX_PERMISSION_LENGTH = 32;
		/// <summary>
		/// The most recent version of the <see cref="PermissionStatus" /> API.
		/// </summary>
		public const int PERMISSIONSTATUS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="QueryAgeGate" /> API.
		/// </summary>
		public const int QUERYAGEGATE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="QueryPermissions" /> API.
		/// </summary>
		public const int QUERYPERMISSIONS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="RequestPermissions" /> API.
		/// </summary>
		public const int REQUESTPERMISSIONS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UpdateParentEmail" /> API.
		/// </summary>
		public const int UPDATEPARENTEMAIL_API_LATEST = 1;

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Register to receive notifications about KWS permissions changes for any logged in local users
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyPermissionsUpdateReceived" /> when you no longer wish to have your NotificationHandler called.
		/// </summary>
		/// <param name="options">
		/// Structure containing information about the request.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate.
		/// </param>
		/// <param name="notificationFn">
		/// A callback that is fired when a notification is received.
		/// </param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyPermissionsUpdateReceived(ref AddNotifyPermissionsUpdateReceivedOptions options, object clientData, OnPermissionsUpdateReceivedCallback notificationFn)
		{
			if (notificationFn == null)
			{
				throw new ArgumentNullException("notificationFn");
			}

			var optionsInternal = default(AddNotifyPermissionsUpdateReceivedOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, notificationFn);

			var callResult = Bindings.EOS_KWS_AddNotifyPermissionsUpdateReceived(InnerHandle, ref optionsInternal, clientDataPointer, OnPermissionsUpdateReceivedCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Fetch a permission for a given by index for a given local user
		/// <see cref="CreateUser" />
		/// <see cref="QueryPermissions" />
		/// <see cref="RequestPermissions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outPermission">
		/// the permission for the given index, if it exists and is valid, use <see cref="Release" /> when finished
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the permission state is known for the given user and index
		/// <see cref="Result.NotFound" /> if the user is not found or the index is invalid
		/// </returns>
		public Result CopyPermissionByIndex(ref CopyPermissionByIndexOptions options, out PermissionStatus? outPermission)
		{
			var optionsInternal = default(CopyPermissionByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outPermissionPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_KWS_CopyPermissionByIndex(InnerHandle, ref optionsInternal, out outPermissionPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<PermissionStatusInternal, PermissionStatus>(outPermissionPointer, out outPermission);
			if (outPermissionPointer != IntPtr.Zero)
			{
				Bindings.EOS_KWS_PermissionStatus_Release(outPermissionPointer);
			}

			return callResult;
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Create an account with Kids Web Services and associate it with the local Product User ID
		/// </summary>
		/// <param name="options">
		/// options required for creating an account such as the local users Product User ID, their data of birth, and parental contact information
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// A callback that is fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if account creation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.TooManyRequests" /> if the number of allowed requests is exceeded
		/// </returns>
		public void CreateUser(ref CreateUserOptions options, object clientData, OnCreateUserCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(CreateUserOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_KWS_CreateUser(InnerHandle, ref optionsInternal, clientDataPointer, OnCreateUserCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Fetch the state of a given permission that are cached for a given local user.
		/// <see cref="CreateUser" />
		/// <see cref="QueryPermissions" />
		/// <see cref="RequestPermissions" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outPermission">
		/// the permission for the given key, if it exists and is valid
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the permission state is known for the given user and key
		/// <see cref="Result.NotFound" /> if the user or the permission is not found
		/// </returns>
		public Result GetPermissionByKey(ref GetPermissionByKeyOptions options, out KWSPermissionStatus outPermission)
		{
			var optionsInternal = default(GetPermissionByKeyOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_KWS_GetPermissionByKey(InnerHandle, ref optionsInternal, out outPermission);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Fetch the number of permissions found for a given local user
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <returns>
		/// the number of permissions associated with the given user
		/// </returns>
		public int GetPermissionsCount(ref GetPermissionsCountOptions options)
		{
			var optionsInternal = default(GetPermissionsCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_KWS_GetPermissionsCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Query the client's country and age permissions for client side reasoning about the possible need enforce age based restrictions
		/// </summary>
		/// <param name="options">
		/// options required for interacting with the age gate system
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// A callback that is fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the query completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.TooManyRequests" /> if the number of allowed queries is exceeded
		/// </returns>
		public void QueryAgeGate(ref QueryAgeGateOptions options, object clientData, OnQueryAgeGateCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryAgeGateOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_KWS_QueryAgeGate(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryAgeGateCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Query the current state of permissions for a given local Product User ID
		/// </summary>
		/// <param name="options">
		/// options required for querying permissions such as the local users Product User ID
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// A callback that is fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the account query completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.TooManyRequests" /> if the number of allowed requests is exceeded
		/// </returns>
		public void QueryPermissions(ref QueryPermissionsOptions options, object clientData, OnQueryPermissionsCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryPermissionsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_KWS_QueryPermissions(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryPermissionsCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Unregister from receiving notifications about KWS permissions related to logged in users
		/// </summary>
		/// <param name="inId">
		/// Handle representing the registered callback
		/// </param>
		public void RemoveNotifyPermissionsUpdateReceived(ulong inId)
		{
			Bindings.EOS_KWS_RemoveNotifyPermissionsUpdateReceived(InnerHandle, inId);

			Helper.RemoveCallbackByNotificationId(inId);
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Request new permissions for a given local Product User ID
		/// </summary>
		/// <param name="options">
		/// options required for updating permissions such as the new list of permissions
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// A callback that is fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if contact information update completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.TooManyRequests" /> if the number of allowed requests is exceeded
		/// <see cref="Result.ParentEmailMissing" /> if the account requesting permissions has no parent email associated with it
		/// <see cref="Result.LimitExceeded" /> if the number of permissions exceeds <see cref="MAX_PERMISSIONS" />, or if any permission name exceeds <see cref="MAX_PERMISSION_LENGTH" />
		/// </returns>
		public void RequestPermissions(ref RequestPermissionsOptions options, object clientData, OnRequestPermissionsCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(RequestPermissionsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_KWS_RequestPermissions(InnerHandle, ref optionsInternal, clientDataPointer, OnRequestPermissionsCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// This interface is not available for general access at this time.
		/// 
		/// Update the parent contact information for a given local Product User ID
		/// </summary>
		/// <param name="options">
		/// options required for updating the contact information such as the new email address
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// A callback that is fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if contact information update completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.TooManyRequests" /> if the number of allowed requests is exceeded
		/// </returns>
		public void UpdateParentEmail(ref UpdateParentEmailOptions options, object clientData, OnUpdateParentEmailCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UpdateParentEmailOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_KWS_UpdateParentEmail(InnerHandle, ref optionsInternal, clientDataPointer, OnUpdateParentEmailCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

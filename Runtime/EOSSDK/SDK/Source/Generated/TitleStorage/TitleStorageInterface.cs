// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.TitleStorage
{
	public sealed partial class TitleStorageInterface : Handle
	{
		public TitleStorageInterface()
		{
		}

		public TitleStorageInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="COPYFILEMETADATAATINDEX_API_LATEST" /> instead.
		/// </summary>
		public const int COPYFILEMETADATAATINDEXOPTIONS_API_LATEST = COPYFILEMETADATAATINDEX_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="CopyFileMetadataAtIndex" /> API.
		/// </summary>
		public const int COPYFILEMETADATAATINDEX_API_LATEST = 1;
		/// <summary>
		/// DEPRECATED! Use <see cref="COPYFILEMETADATABYFILENAME_API_LATEST" /> instead.
		/// </summary>
		public const int COPYFILEMETADATABYFILENAMEOPTIONS_API_LATEST = COPYFILEMETADATABYFILENAME_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="CopyFileMetadataByFilename" /> API.
		/// </summary>
		public const int COPYFILEMETADATABYFILENAME_API_LATEST = 1;
		/// <summary>
		/// DEPRECATED! Use <see cref="DELETECACHE_API_LATEST" /> instead.
		/// </summary>
		public const int DELETECACHEOPTIONS_API_LATEST = DELETECACHE_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="DeleteCache" /> API.
		/// </summary>
		public const int DELETECACHE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="FileMetadata" /> API.
		/// </summary>
		public const int FILEMETADATA_API_LATEST = 2;
		/// <summary>
		/// Maximum File Name Length in bytes
		/// </summary>
		public const int FILENAME_MAX_LENGTH_BYTES = 64;
		/// <summary>
		/// DEPRECATED! Use <see cref="GETFILEMETADATACOUNT_API_LATEST" /> instead.
		/// </summary>
		public const int GETFILEMETADATACOUNTOPTIONS_API_LATEST = GETFILEMETADATACOUNT_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="GetFileMetadataCount" /> API.
		/// </summary>
		public const int GETFILEMETADATACOUNT_API_LATEST = 1;
		/// <summary>
		/// DEPRECATED! Use <see cref="QUERYFILELIST_API_LATEST" /> instead.
		/// </summary>
		public const int QUERYFILELISTOPTIONS_API_LATEST = QUERYFILELIST_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="QueryFileList" /> API.
		/// </summary>
		public const int QUERYFILELIST_API_LATEST = 1;
		/// <summary>
		/// DEPRECATED! Use <see cref="QUERYFILE_API_LATEST" /> instead.
		/// </summary>
		public const int QUERYFILEOPTIONS_API_LATEST = QUERYFILE_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="QueryFile" /> API.
		/// </summary>
		public const int QUERYFILE_API_LATEST = 1;
		/// <summary>
		/// DEPRECATED! Use <see cref="READFILE_API_LATEST" /> instead.
		/// </summary>
		public const int READFILEOPTIONS_API_LATEST = READFILE_API_LATEST;
		/// <summary>
		/// The most recent version of the <see cref="ReadFile" /> API.
		/// </summary>
		public const int READFILE_API_LATEST = 2;

		/// <summary>
		/// Get the cached copy of a file's metadata by index. The metadata will be for the last retrieved version. The returned <see cref="IntPtr" /> must be released by the user when no longer needed.
		/// <see cref="GetFileMetadataCount" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is requesting metadata, and at what index
		/// </param>
		/// <param name="outMetadata">
		/// A copy of the FileMetadata structure will be set if successful. This data must be released by calling <see cref="Release" />.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the requested metadata is currently cached, otherwise an error result explaining what went wrong.
		/// </returns>
		public Result CopyFileMetadataAtIndex(ref CopyFileMetadataAtIndexOptions options, out FileMetadata? outMetadata)
		{
			var optionsInternal = default(CopyFileMetadataAtIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outMetadataPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_TitleStorage_CopyFileMetadataAtIndex(InnerHandle, ref optionsInternal, out outMetadataPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<FileMetadataInternal, FileMetadata>(outMetadataPointer, out outMetadata);
			if (outMetadataPointer != IntPtr.Zero)
			{
				Bindings.EOS_TitleStorage_FileMetadata_Release(outMetadataPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Create a cached copy of a file's metadata by filename. The metadata will be for the last retrieved or successfully saved version, and will not include any changes that have not
		/// completed writing. The returned <see cref="IntPtr" /> must be released by the user when no longer needed.
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is requesting metadata, and for which filename
		/// </param>
		/// <param name="outMetadata">
		/// A copy of the FileMetadata structure will be set if successful. This data must be released by calling <see cref="Release" />.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the metadata is currently cached, otherwise an error result explaining what went wrong
		/// </returns>
		public Result CopyFileMetadataByFilename(ref CopyFileMetadataByFilenameOptions options, out FileMetadata? outMetadata)
		{
			var optionsInternal = default(CopyFileMetadataByFilenameOptionsInternal);
			optionsInternal.Set(ref options);

			var outMetadataPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_TitleStorage_CopyFileMetadataByFilename(InnerHandle, ref optionsInternal, out outMetadataPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<FileMetadataInternal, FileMetadata>(outMetadataPointer, out outMetadata);
			if (outMetadataPointer != IntPtr.Zero)
			{
				Bindings.EOS_TitleStorage_FileMetadata_Release(outMetadataPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Clear previously cached file data. This operation will be done asynchronously. All cached files except those corresponding to the transfers in progress will be removed.
		/// Warning: Use this with care. Cache system generally tries to clear old and unused cached files from time to time. Unnecessarily clearing cache can degrade performance as SDK will have to re-download data.
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is deleting cache
		/// </param>
		/// <param name="clientData">
		/// Optional <see cref="IntPtr" /> to help clients track this request, that is returned in associated callbacks
		/// </param>
		/// <param name="completionCallback">
		/// This function is called when the delete cache operation completes
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation was started correctly, otherwise an error result explaining what went wrong
		/// </returns>
		public Result DeleteCache(ref DeleteCacheOptions options, object clientData, OnDeleteCacheCompleteCallback completionCallback)
		{
			if (completionCallback == null)
			{
				throw new ArgumentNullException("completionCallback");
			}

			var optionsInternal = default(DeleteCacheOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionCallback);

			var callResult = Bindings.EOS_TitleStorage_DeleteCache(InnerHandle, ref optionsInternal, clientDataPointer, OnDeleteCacheCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Get the count of files we have previously queried information for and files we have previously read from / written to.
		/// <see cref="CopyFileMetadataAtIndex" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is requesting the metadata count
		/// </param>
		/// <returns>
		/// If successful, the count of metadata currently cached. Returns 0 on failure.
		/// </returns>
		public uint GetFileMetadataCount(ref GetFileMetadataCountOptions options)
		{
			var optionsInternal = default(GetFileMetadataCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_TitleStorage_GetFileMetadataCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Query a specific file's metadata, such as file names, size, and a MD5 hash of the data. This is not required before a file may be opened. Once a file has
		/// been queried, its metadata will be available by the <see cref="CopyFileMetadataAtIndex" /> and <see cref="CopyFileMetadataByFilename" /> functions.
		/// <see cref="GetFileMetadataCount" />
		/// <see cref="CopyFileMetadataAtIndex" />
		/// <see cref="CopyFileMetadataByFilename" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is querying files, and what file is being queried
		/// </param>
		/// <param name="clientData">
		/// Optional <see cref="IntPtr" /> to help clients track this request, that is returned in the completion callback
		/// </param>
		/// <param name="completionCallback">
		/// This function is called when the query operation completes
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the query completes successfully and a file is found
		/// <see cref="Result.NotFound" /> if no file is found
		/// </returns>
		public void QueryFile(ref QueryFileOptions options, object clientData, OnQueryFileCompleteCallback completionCallback)
		{
			if (completionCallback == null)
			{
				throw new ArgumentNullException("completionCallback");
			}

			var optionsInternal = default(QueryFileOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionCallback);

			Bindings.EOS_TitleStorage_QueryFile(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryFileCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Query the file metadata, such as file names, size, and a MD5 hash of the data, for all files available for current user based on their settings (such as game role) and tags provided.
		/// This is not required before a file can be downloaded by name.
		/// <see cref="GetFileMetadataCount" />
		/// <see cref="CopyFileMetadataAtIndex" />
		/// <see cref="CopyFileMetadataByFilename" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is querying files and the list of tags
		/// </param>
		/// <param name="clientData">
		/// Optional <see cref="IntPtr" /> to help clients track this request, that is returned in the completion callback
		/// </param>
		/// <param name="completionCallback">
		/// This function is called when the query operation completes
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the query completes successfully (whether any files are found or not)
		/// </returns>
		public void QueryFileList(ref QueryFileListOptions options, object clientData, OnQueryFileListCompleteCallback completionCallback)
		{
			if (completionCallback == null)
			{
				throw new ArgumentNullException("completionCallback");
			}

			var optionsInternal = default(QueryFileListOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionCallback);

			Bindings.EOS_TitleStorage_QueryFileList(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryFileListCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Retrieve the contents of a specific file, potentially downloading the contents if we do not have a local copy, from the cloud. This request will occur asynchronously, potentially over
		/// multiple frames. All callbacks for this function will come from the same thread that the SDK is ticked from. If specified, the FileTransferProgressCallback will always be called at
		/// least once if the request is started successfully.
		/// <see cref="TitleStorageFileTransferRequest.Release" />
		/// </summary>
		/// <param name="options">
		/// Object containing properties related to which user is opening the file, what the file's name is, and related mechanisms for copying the data
		/// </param>
		/// <param name="clientData">
		/// Optional <see cref="IntPtr" /> to help clients track this request, that is returned in associated callbacks
		/// </param>
		/// <param name="completionCallback">
		/// This function is called when the read operation completes
		/// </param>
		/// <returns>
		/// A valid Title Storage File Request handle if successful, or <see langword="null" /> otherwise. Data contained in the completion callback will have more detailed information about issues with the request in failure cases. This handle must be released when it is no longer needed
		/// <see cref="Result.Success" /> if the file is exists and the read operation completes successfully
		/// <see cref="Result.NotFound" /> if no file is found
		/// </returns>
		public TitleStorageFileTransferRequest ReadFile(ref ReadFileOptions options, object clientData, OnReadFileCompleteCallback completionCallback)
		{
			if (completionCallback == null)
			{
				throw new ArgumentNullException("completionCallback");
			}

			var optionsInternal = default(ReadFileOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionCallback);

			Helper.AddCallback(clientDataPointer, options.ReadFileDataCallback);
			Helper.AddCallback(clientDataPointer, options.FileTransferProgressCallback);

			var callResult = Bindings.EOS_TitleStorage_ReadFile(InnerHandle, ref optionsInternal, clientDataPointer, OnReadFileCompleteCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			TitleStorageFileTransferRequest callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.TitleStorage
{
	/// <summary>
	/// Structure containing data for a chunk of a file being read
	/// </summary>
	public struct ReadFileDataCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into the file request
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// Product User ID of the local user who initiated this request (optional, will only be present in case it was provided during operation start)
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The file name being read
		/// </summary>
		public Utf8String Filename { get; set; }

		/// <summary>
		/// The total file size of the file being read
		/// </summary>
		public uint TotalFileSizeBytes { get; set; }

		/// <summary>
		/// Is this chunk the last chunk of data?
		/// </summary>
		public bool IsLastChunk { get; set; }

		/// <summary>
		/// <see cref="IntPtr" /> to the start of data to be read
		/// </summary>
		public ArraySegment<byte> DataChunk { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct ReadFileDataCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileDataCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_Filename;
		private uint m_TotalFileSizeBytes;
		private int m_IsLastChunk;
		private uint m_DataChunkLengthBytes;
		private IntPtr m_DataChunk;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out ReadFileDataCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			Utf8String FilenamePublic;
			Helper.Get(m_Filename, out FilenamePublic);
			other.Filename = FilenamePublic;
			other.TotalFileSizeBytes = m_TotalFileSizeBytes;
			bool IsLastChunkPublic;
			Helper.Get(m_IsLastChunk, out IsLastChunkPublic);
			other.IsLastChunk = IsLastChunkPublic;
			ArraySegment<byte> DataChunkPublic;
			Helper.Get(m_DataChunk, out DataChunkPublic, m_DataChunkLengthBytes);
			other.DataChunk = DataChunkPublic;
		}
	}
}

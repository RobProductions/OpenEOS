// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatCommon
{
	public struct LogGameRoundStartOptions
	{
		/// <summary>
		/// Optional game session or match identifier useful for some backend API integrations
		/// </summary>
		public Utf8String SessionIdentifier { get; set; }

		/// <summary>
		/// Optional name of the map being played
		/// </summary>
		public Utf8String LevelName { get; set; }

		/// <summary>
		/// Optional name of the game mode being played
		/// </summary>
		public Utf8String ModeName { get; set; }

		/// <summary>
		/// Optional length of the game round to be played, in seconds. If none, use 0.
		/// </summary>
		public uint RoundTimeSeconds { get; set; }

		/// <summary>
		/// Type of competition for this game round
		/// </summary>
		public AntiCheatCommonGameRoundCompetitionType CompetitionType { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct LogGameRoundStartOptionsInternal : ISettable<LogGameRoundStartOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_SessionIdentifier;
		private IntPtr m_LevelName;
		private IntPtr m_ModeName;
		private uint m_RoundTimeSeconds;
		private AntiCheatCommonGameRoundCompetitionType m_CompetitionType;

		public void Set(ref LogGameRoundStartOptions other)
		{
			Dispose();

			m_ApiVersion = AntiCheatCommonInterface.LOGGAMEROUNDSTART_API_LATEST;
			Helper.Set(other.SessionIdentifier, ref m_SessionIdentifier);
			Helper.Set(other.LevelName, ref m_LevelName);
			Helper.Set(other.ModeName, ref m_ModeName);
			m_RoundTimeSeconds = other.RoundTimeSeconds;
			m_CompetitionType = other.CompetitionType;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_SessionIdentifier);
			Helper.Dispose(ref m_LevelName);
			Helper.Dispose(ref m_ModeName);
		}
	}
}

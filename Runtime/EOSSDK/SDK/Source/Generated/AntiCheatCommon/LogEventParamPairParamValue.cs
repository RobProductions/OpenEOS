// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatCommon
{
	/// <summary>
	/// Parameter value
	/// </summary>
	public struct LogEventParamPairParamValue
	{
		private IntPtr? m_ClientHandle;
		private Utf8String m_String;
		private uint? m_UInt32;
		private int? m_Int32;
		private ulong? m_UInt64;
		private long? m_Int64;
		private Vec3f? m_Vec3f;
		private Quat? m_Quat;
		private float? m_Float;
		private AntiCheatCommonEventParamType m_ParamValueType;

		public IntPtr? ClientHandle
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.ClientHandle)
				{
					return m_ClientHandle;
				}

				return default;
			}
			set
			{
				m_ClientHandle = value;
				m_ParamValueType = AntiCheatCommonEventParamType.ClientHandle;
			}
		}

		public Utf8String String
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.String)
				{
					return m_String;
				}

				return default;
			}
			set
			{
				m_String = value;
				m_ParamValueType = AntiCheatCommonEventParamType.String;
			}
		}

		public uint? UInt32
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.UInt32)
				{
					return m_UInt32;
				}

				return default;
			}
			set
			{
				m_UInt32 = value;
				m_ParamValueType = AntiCheatCommonEventParamType.UInt32;
			}
		}

		public int? Int32
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.Int32)
				{
					return m_Int32;
				}

				return default;
			}
			set
			{
				m_Int32 = value;
				m_ParamValueType = AntiCheatCommonEventParamType.Int32;
			}
		}

		public ulong? UInt64
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.UInt64)
				{
					return m_UInt64;
				}

				return default;
			}
			set
			{
				m_UInt64 = value;
				m_ParamValueType = AntiCheatCommonEventParamType.UInt64;
			}
		}

		public long? Int64
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.Int64)
				{
					return m_Int64;
				}

				return default;
			}
			set
			{
				m_Int64 = value;
				m_ParamValueType = AntiCheatCommonEventParamType.Int64;
			}
		}

		public Vec3f? Vec3f
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.Vector3f)
				{
					return m_Vec3f;
				}

				return default;
			}
			set
			{
				m_Vec3f = value;
				m_ParamValueType = AntiCheatCommonEventParamType.Vector3f;
			}
		}

		public Quat? Quat
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.Quat)
				{
					return m_Quat;
				}

				return default;
			}
			set
			{
				m_Quat = value;
				m_ParamValueType = AntiCheatCommonEventParamType.Quat;
			}
		}

		public float? Float
		{
			get
			{
				if (m_ParamValueType == AntiCheatCommonEventParamType.Float)
				{
					return m_Float;
				}

				return default;
			}
			set
			{
				m_Float = value;
				m_ParamValueType = AntiCheatCommonEventParamType.Float;
			}
		}
		public AntiCheatCommonEventParamType ParamValueType
		{
			get
			{
				return m_ParamValueType;
			}
		}

		public static implicit operator LogEventParamPairParamValue(IntPtr? value)
		{
			return new LogEventParamPairParamValue() { ClientHandle = value };
		}

		public static implicit operator LogEventParamPairParamValue(Utf8String value)
		{
			return new LogEventParamPairParamValue() { String = value };
		}

		public static implicit operator LogEventParamPairParamValue(string value)
		{
			return new LogEventParamPairParamValue() { String = value };
		}

		public static implicit operator LogEventParamPairParamValue(uint? value)
		{
			return new LogEventParamPairParamValue() { UInt32 = value };
		}

		public static implicit operator LogEventParamPairParamValue(int? value)
		{
			return new LogEventParamPairParamValue() { Int32 = value };
		}

		public static implicit operator LogEventParamPairParamValue(ulong? value)
		{
			return new LogEventParamPairParamValue() { UInt64 = value };
		}

		public static implicit operator LogEventParamPairParamValue(long? value)
		{
			return new LogEventParamPairParamValue() { Int64 = value };
		}

		public static implicit operator LogEventParamPairParamValue(Vec3f? value)
		{
			return new LogEventParamPairParamValue() { Vec3f = value };
		}

		public static implicit operator LogEventParamPairParamValue(Quat? value)
		{
			return new LogEventParamPairParamValue() { Quat = value };
		}

		public static implicit operator LogEventParamPairParamValue(float? value)
		{
			return new LogEventParamPairParamValue() { Float = value };
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	internal struct LogEventParamPairParamValueInternal : ISettable<LogEventParamPairParamValue>
	{
		[FieldOffset(0)]
		private IntPtr m_ClientHandle;
		[FieldOffset(0)]
		private IntPtr m_String;
		[FieldOffset(0)]
		private uint m_UInt32;
		[FieldOffset(0)]
		private int m_Int32;
		[FieldOffset(0)]
		private ulong m_UInt64;
		[FieldOffset(0)]
		private long m_Int64;
		[FieldOffset(0)]
		private Vec3fInternal m_Vec3f;
		[FieldOffset(0)]
		private QuatInternal m_Quat;
		[FieldOffset(0)]
		private float m_Float;

		public void Set(ref LogEventParamPairParamValue other)
		{
			Dispose();

			if (other.ParamValueType == AntiCheatCommonEventParamType.ClientHandle)
			{
				Helper.Set(other.ClientHandle, ref m_ClientHandle);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.String)
			{
				Helper.Set(other.String, ref m_String);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.UInt32)
			{
				Helper.Set(other.UInt32, ref m_UInt32);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.Int32)
			{
				Helper.Set(other.Int32, ref m_Int32);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.UInt64)
			{
				Helper.Set(other.UInt64, ref m_UInt64);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.Int64)
			{
				Helper.Set(other.Int64, ref m_Int64);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.Vector3f)
			{
				Helper.Set<Vec3f, Vec3fInternal>(other.Vec3f, ref m_Vec3f);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.Quat)
			{
				Helper.Set<Quat, QuatInternal>(other.Quat, ref m_Quat);
			}

			if (other.ParamValueType == AntiCheatCommonEventParamType.Float)
			{
				Helper.Set(other.Float, ref m_Float);
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ClientHandle);
			Helper.Dispose(ref m_String);
			Helper.Dispose(ref m_Vec3f);
			Helper.Dispose(ref m_Quat);
		}
	}
}

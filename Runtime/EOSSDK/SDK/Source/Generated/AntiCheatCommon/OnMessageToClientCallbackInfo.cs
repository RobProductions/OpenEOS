// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatCommon
{
	/// <summary>
	/// Structure containing details about a new message that must be dispatched to a connected client/peer.
	/// </summary>
	public struct OnMessageToClientCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Caller-specified context data
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The identifier of the client/peer that this message must be delivered to. See the RegisterClient and RegisterPeer functions.
		/// </summary>
		public IntPtr ClientHandle { get; set; }

		/// <summary>
		/// The message data that must be sent to the client
		/// </summary>
		public ArraySegment<byte> MessageData { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct OnMessageToClientCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnMessageToClientCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_ClientHandle;
		private IntPtr m_MessageData;
		private uint m_MessageDataSizeBytes;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out OnMessageToClientCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			other.ClientHandle = m_ClientHandle;
			ArraySegment<byte> MessageDataPublic;
			Helper.Get(m_MessageData, out MessageDataPublic, m_MessageDataSizeBytes);
			other.MessageData = MessageDataPublic;
		}
	}
}

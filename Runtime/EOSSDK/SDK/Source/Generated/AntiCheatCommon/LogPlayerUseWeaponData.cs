// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.AntiCheatCommon
{
	public struct LogPlayerUseWeaponData
	{
		/// <summary>
		/// Locally unique value used in RegisterClient/RegisterPeer
		/// </summary>
		public IntPtr PlayerHandle { get; set; }

		/// <summary>
		/// Attack origin world position as a 3D vector
		/// </summary>
		public Vec3f? PlayerPosition { get; set; }

		/// <summary>
		/// Attack direction as a quaternion
		/// </summary>
		public Quat? PlayerViewRotation { get; set; }

		/// <summary>
		/// True if the player's view is zoomed (e.g. using a sniper rifle), otherwise <see langword="false" />
		/// </summary>
		public bool IsPlayerViewZoomed { get; set; }

		/// <summary>
		/// Set to <see langword="true" /> if the player is using a melee attack, otherwise <see langword="false" />
		/// </summary>
		public bool IsMeleeAttack { get; set; }

		/// <summary>
		/// Name of the weapon used. Will be truncated to <see cref="AntiCheatCommonInterface.LOGPLAYERUSEWEAPON_WEAPONNAME_MAX_LENGTH" /> bytes if longer.
		/// </summary>
		public Utf8String WeaponName { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct LogPlayerUseWeaponDataInternal : ISettable<LogPlayerUseWeaponData>
	{
		private IntPtr m_PlayerHandle;
		private IntPtr m_PlayerPosition;
		private IntPtr m_PlayerViewRotation;
		private int m_IsPlayerViewZoomed;
		private int m_IsMeleeAttack;
		private IntPtr m_WeaponName;

		public void Set(ref LogPlayerUseWeaponData other)
		{
			Dispose();

			m_PlayerHandle = other.PlayerHandle;
			Helper.Set<Vec3f, Vec3fInternal>(other.PlayerPosition, ref m_PlayerPosition);
			Helper.Set<Quat, QuatInternal>(other.PlayerViewRotation, ref m_PlayerViewRotation);
			Helper.Set(other.IsPlayerViewZoomed, ref m_IsPlayerViewZoomed);
			Helper.Set(other.IsMeleeAttack, ref m_IsMeleeAttack);
			Helper.Set(other.WeaponName, ref m_WeaponName);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PlayerHandle);
			Helper.Dispose(ref m_PlayerPosition);
			Helper.Dispose(ref m_PlayerViewRotation);
			Helper.Dispose(ref m_WeaponName);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about the packet queue's state and the incoming packet that would overflow the queue
	/// </summary>
	public struct OnIncomingPacketQueueFullInfo : ICallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into AddNotifyIncomingPacketQueueFull
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The maximum size in bytes the incoming packet queue is allowed to use
		/// </summary>
		public ulong PacketQueueMaxSizeBytes { get; set; }

		/// <summary>
		/// The current size in bytes the incoming packet queue is currently using
		/// </summary>
		public ulong PacketQueueCurrentSizeBytes { get; set; }

		/// <summary>
		/// The Product User ID of the local user who is receiving the packet that would overflow the queue
		/// </summary>
		public ProductUserId OverflowPacketLocalUserId { get; set; }

		/// <summary>
		/// The channel the incoming packet is for
		/// </summary>
		public byte OverflowPacketChannel { get; set; }

		/// <summary>
		/// The size in bytes of the incoming packet (and related metadata) that would overflow the queue
		/// </summary>
		public uint OverflowPacketSizeBytes { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct OnIncomingPacketQueueFullInfoInternal : ICallbackInfoInternal, IGettable<OnIncomingPacketQueueFullInfo>
	{
		private IntPtr m_ClientData;
		private ulong m_PacketQueueMaxSizeBytes;
		private ulong m_PacketQueueCurrentSizeBytes;
		private IntPtr m_OverflowPacketLocalUserId;
		private byte m_OverflowPacketChannel;
		private uint m_OverflowPacketSizeBytes;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out OnIncomingPacketQueueFullInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			other.PacketQueueMaxSizeBytes = m_PacketQueueMaxSizeBytes;
			other.PacketQueueCurrentSizeBytes = m_PacketQueueCurrentSizeBytes;
			ProductUserId OverflowPacketLocalUserIdPublic;
			Helper.Get(m_OverflowPacketLocalUserId, out OverflowPacketLocalUserIdPublic);
			other.OverflowPacketLocalUserId = OverflowPacketLocalUserIdPublic;
			other.OverflowPacketChannel = m_OverflowPacketChannel;
			other.OverflowPacketSizeBytes = m_OverflowPacketSizeBytes;
		}
	}
}

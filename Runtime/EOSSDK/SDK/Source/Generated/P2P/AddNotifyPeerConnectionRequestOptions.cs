// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about who would like connection notifications, and about which socket.
	/// </summary>
	public struct AddNotifyPeerConnectionRequestOptions
	{
		/// <summary>
		/// The Product User ID of the user who is listening for incoming connection requests
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The optional socket ID to listen for, used as a filter for incoming connection requests; If <see langword="null" />, incoming connection requests will not be filtered
		/// </summary>
		public SocketId? SocketId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct AddNotifyPeerConnectionRequestOptionsInternal : ISettable<AddNotifyPeerConnectionRequestOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_SocketId;

		public void Set(ref AddNotifyPeerConnectionRequestOptions other)
		{
			Dispose();

			m_ApiVersion = P2PInterface.ADDNOTIFYPEERCONNECTIONREQUEST_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_SocketId);
		}
	}
}

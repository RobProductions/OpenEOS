// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about an incoming connection request.
	/// </summary>
	public struct OnIncomingConnectionRequestInfo : ICallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into <see cref="Presence.PresenceInterface.AddNotifyOnPresenceChanged" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the local user who is being requested to open a P2P session with RemoteUserId
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The Product User ID of the remote user who requested a peer connection with the local user
		/// </summary>
		public ProductUserId RemoteUserId { get; set; }

		/// <summary>
		/// The ID of the socket the Remote User wishes to communicate on
		/// </summary>
		public SocketId? SocketId { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct OnIncomingConnectionRequestInfoInternal : ICallbackInfoInternal, IGettable<OnIncomingConnectionRequestInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_RemoteUserId;
		private IntPtr m_SocketId;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out OnIncomingConnectionRequestInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			ProductUserId RemoteUserIdPublic;
			Helper.Get(m_RemoteUserId, out RemoteUserIdPublic);
			other.RemoteUserId = RemoteUserIdPublic;
			SocketId? SocketIdPublic;
			Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketIdPublic);
			other.SocketId = SocketIdPublic;
		}
	}
}

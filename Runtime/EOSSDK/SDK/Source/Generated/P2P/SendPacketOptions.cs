// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about the data being sent and to which player
	/// </summary>
	public struct SendPacketOptions
	{
		/// <summary>
		/// The Product User ID of the local user who is sending this packet
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The Product User ID of the Peer you would like to send a packet to
		/// </summary>
		public ProductUserId RemoteUserId { get; set; }

		/// <summary>
		/// The socket ID for data you are sending in this packet
		/// </summary>
		public SocketId? SocketId { get; set; }

		/// <summary>
		/// Channel associated with this data
		/// </summary>
		public byte Channel { get; set; }

		/// <summary>
		/// The data to be sent to the RemoteUser
		/// </summary>
		public ArraySegment<byte> Data { get; set; }

		/// <summary>
		/// If <see langword="false" /> and we do not already have an established connection to the peer, this data will be dropped
		/// </summary>
		public bool AllowDelayedDelivery { get; set; }

		/// <summary>
		/// Sets the reliability of the delivery of this packet. The reliability can be `<see cref="PacketReliability.UnreliableUnordered" />`, `<see cref="PacketReliability.ReliableUnordered" />`, or `<see cref="PacketReliability.ReliableOrdered" />`.
		/// </summary>
		public PacketReliability Reliability { get; set; }

		/// <summary>
		/// If set to <see langword="true" />, <see cref="P2PInterface.SendPacket" /> will not automatically establish a connection with the RemoteUserId and will require explicit calls to
		/// <see cref="P2PInterface.AcceptConnection" /> first whenever the connection is closed. If set to <see langword="false" />, <see cref="P2PInterface.SendPacket" /> will automatically accept and start
		/// the connection any time it is called and the connection is not already open.
		/// </summary>
		public bool DisableAutoAcceptConnection { get; set; }
	}

}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about who would like notifications about interrupted connections, and for which socket.
	/// </summary>
	public struct AddNotifyPeerConnectionInterruptedOptions
	{
		/// <summary>
		/// The Product User ID of the local user who would like notifications
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// An optional socket ID to filter interrupted connections on. If <see langword="null" />, this function handler will be called for all interrupted connections
		/// </summary>
		public SocketId? SocketId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct AddNotifyPeerConnectionInterruptedOptionsInternal : ISettable<AddNotifyPeerConnectionInterruptedOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_SocketId;

		public void Set(ref AddNotifyPeerConnectionInterruptedOptions other)
		{
			Dispose();

			m_ApiVersion = P2PInterface.ADDNOTIFYPEERCONNECTIONINTERRUPTED_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set<SocketId, SocketIdInternal>(other.SocketId, ref m_SocketId);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_SocketId);
		}
	}
}

// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Platform
{
	public sealed partial class PlatformInterface : Handle
	{
		public PlatformInterface()
		{
		}

		public PlatformInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The name of the env var used to determine if the game was launched by the Epic Games Launcher.
		/// 
		/// During the call to <see cref="Create" />, the command line that was used to launch the app is inspected, and if it is
		/// recognized as coming from the Epic Games Launcher, this environment variable is set to 1.
		/// 
		/// NOTE: You can force the <see cref="CheckForLauncherAndRestart" /> API to relaunch the title by
		/// explicitly unsetting this environment variable before calling <see cref="CheckForLauncherAndRestart" />.
		/// </summary>
		public static readonly Utf8String CHECKFORLAUNCHERANDRESTART_ENV_VAR = "EOS_LAUNCHED_BY_EPIC";
		/// <summary>
		/// Max length of a client id, not including the terminating <see langword="null" />.
		/// </summary>
		public const int CLIENTCREDENTIALS_CLIENTID_MAX_LENGTH = 64;
		/// <summary>
		/// Max length of a client secret, not including the terminating <see langword="null" />.
		/// </summary>
		public const int CLIENTCREDENTIALS_CLIENTSECRET_MAX_LENGTH = 64;
		public const int COUNTRYCODE_MAX_BUFFER_LEN = (COUNTRYCODE_MAX_LENGTH + 1);
		public const int COUNTRYCODE_MAX_LENGTH = 4;
		/// <summary>
		/// The most recent version of the <see cref="GetDesktopCrossplayStatus" /> API.
		/// </summary>
		public const int GETDESKTOPCROSSPLAYSTATUS_API_LATEST = 1;
		/// <summary>
		/// Max length of a product name, not including the terminating <see langword="null" />.
		/// </summary>
		public const int INITIALIZEOPTIONS_PRODUCTNAME_MAX_LENGTH = 64;
		/// <summary>
		/// Max length of a product version, not including the terminating <see langword="null" />.
		/// </summary>
		public const int INITIALIZEOPTIONS_PRODUCTVERSION_MAX_LENGTH = 64;
		/// <summary>
		/// The most recent version of the <see cref="Initialize" /> API.
		/// </summary>
		public const int INITIALIZE_API_LATEST = 4;
		/// <summary>
		/// The most recent version of the <see cref="InitializeThreadAffinity" /> API.
		/// </summary>
		public const int INITIALIZE_THREADAFFINITY_API_LATEST = 3;
		public const int LOCALECODE_MAX_BUFFER_LEN = (LOCALECODE_MAX_LENGTH + 1);
		public const int LOCALECODE_MAX_LENGTH = 9;
		public const int OPTIONS_API_LATEST = 14;
		/// <summary>
		/// Max length of a deployment id, not including the terminating <see langword="null" />.
		/// </summary>
		public const int OPTIONS_DEPLOYMENTID_MAX_LENGTH = 64;
		/// <summary>
		/// Length of an encryption key, not including the terminating <see langword="null" />.
		/// </summary>
		public const int OPTIONS_ENCRYPTIONKEY_LENGTH = 64;
		/// <summary>
		/// Max length of a product id, not including the terminating <see langword="null" />.
		/// </summary>
		public const int OPTIONS_PRODUCTID_MAX_LENGTH = 64;
		/// <summary>
		/// Max length of a sandbox id, not including the terminating <see langword="null" />.
		/// </summary>
		public const int OPTIONS_SANDBOXID_MAX_LENGTH = 64;
		/// <summary>
		/// The most recent version of the <see cref="RTCOptions" /> API.
		/// </summary>
		public const int RTCOPTIONS_API_LATEST = 2;

		/// <summary>
		/// Gets the <see cref="Utf8String" /> representation of an <see cref="ApplicationStatus" /> value.
		/// 
		/// Example: <see cref="ToString" />(<see cref="ApplicationStatus.Foreground" />) returns "EOS_AS_Foreground".
		/// </summary>
		/// <param name="applicationStatus">
		/// <see cref="ApplicationStatus" /> value to get as <see cref="Utf8String" />.
		/// </param>
		/// <returns>
		/// <see cref="IntPtr" /> to a static <see cref="Utf8String" /> representing the input enum value.
		/// The returned <see cref="Utf8String" /> is guaranteed to be non-<see langword="null" />, and must not be freed by the application.
		/// </returns>
		public static Utf8String ToString(ApplicationStatus applicationStatus)
		{
			var callResult = Bindings.EOS_EApplicationStatus_ToString(applicationStatus);

			Utf8String callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Gets the <see cref="Utf8String" /> representation of an <see cref="NetworkStatus" /> value.
		/// 
		/// Example: <see cref="ToString" />(<see cref="NetworkStatus.Online" />) returns "EOS_NS_Online".
		/// </summary>
		/// <param name="networkStatus">
		/// <see cref="NetworkStatus" /> value to get as <see cref="Utf8String" />.
		/// </param>
		/// <returns>
		/// <see cref="IntPtr" /> to a static <see cref="Utf8String" /> representing the input enum value.
		/// The returned <see cref="Utf8String" /> is guaranteed to be non-<see langword="null" />, and must not be freed by the application.
		/// </returns>
		public static Utf8String ToString(NetworkStatus networkStatus)
		{
			var callResult = Bindings.EOS_ENetworkStatus_ToString(networkStatus);

			Utf8String callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Initialize the Epic Online Services SDK.
		/// 
		/// Before calling any other function in the SDK, clients must call this function.
		/// 
		/// This function must only be called one time and must have a corresponding <see cref="Shutdown" /> call.
		/// </summary>
		/// <param name="options">
		/// - The initialization options to use for the SDK.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> is returned to indicate success or an error.
		/// <see cref="Result.Success" /> is returned if the SDK successfully initializes.
		/// <see cref="Result.AlreadyConfigured" /> is returned if the function has already been called.
		/// <see cref="Result.InvalidParameters" /> is returned if the provided options are invalid.
		/// </returns>
		public static Result Initialize(ref InitializeOptions options)
		{
			var optionsInternal = default(InitializeOptionsInternal);
			optionsInternal.Set(ref options);


			var callResult = Bindings.EOS_Initialize(ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Checks if the app was launched through the Epic Games Launcher, and relaunches it through the Epic Games Launcher if it wasn't.
		/// 
		/// NOTE: During the call to <see cref="Create" />, the command line that was used to launch the app is inspected, and if it is
		/// recognized as coming from the Epic Games Launcher, an environment variable is set to 1. The name of the environment variable
		/// is defined by <see cref="CHECKFORLAUNCHERANDRESTART_ENV_VAR" />.
		/// 
		/// You can force the <see cref="CheckForLauncherAndRestart" /> API to relaunch the title by
		/// explicitly unsetting this environment variable before calling <see cref="CheckForLauncherAndRestart" />.
		/// </summary>
		/// <returns>
		/// An <see cref="Result" /> is returned to indicate success or an error.
		/// <see cref="Result.Success" /> is returned if the app is being restarted. You should quit your process as soon as possible.
		/// <see cref="Result.NoChange" /> is returned if the app was already launched through the Epic Launcher, and no action needs to be taken.
		/// <see cref="Result.UnexpectedError" /> is returned if the LauncherCheck module failed to initialize, or the module tried and failed to restart the app.
		/// </returns>
		public Result CheckForLauncherAndRestart()
		{
			var callResult = Bindings.EOS_Platform_CheckForLauncherAndRestart(InnerHandle);

			return callResult;
		}

		/// <summary>
		/// Create a single Epic Online Services Platform Instance.
		/// 
		/// The platform instance is used to gain access to the various Epic Online Services.
		/// 
		/// This function returns an opaque handle to the platform instance, and that handle must be passed to <see cref="Release" /> to release the instance.
		/// </summary>
		/// <returns>
		/// An opaque handle to the platform instance.
		/// </returns>
		public static PlatformInterface Create(ref Options options)
		{
			var optionsInternal = default(OptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Platform_Create(ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			PlatformInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Achievements Interface.
		/// eos_achievements.h
		/// eos_achievements_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Achievements.AchievementsInterface" /> handle
		/// </returns>
		public Achievements.AchievementsInterface GetAchievementsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetAchievementsInterface(InnerHandle);

			Achievements.AchievementsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// This only will return the value set as the override otherwise <see cref="Result.NotFound" /> is returned.
		/// This is not currently used for anything internally.
		/// eos_ecom.h
		/// <see cref="COUNTRYCODE_MAX_LENGTH" />
		/// </summary>
		/// <param name="localUserId">
		/// The account to use for lookup if no override exists.
		/// </param>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written. The buffer must be long enough to hold a <see cref="Utf8String" /> of <see cref="COUNTRYCODE_MAX_LENGTH" />.
		/// </param>
		/// <param name="inOutBufferLength">
		/// The size of the OutBuffer in characters.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the active country code <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> if the information is available and passed out in OutBuffer
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if there is not an override country code for the user.
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the country code <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result GetActiveCountryCode(EpicAccountId localUserId, out Utf8String outBuffer)
		{
			int inOutBufferLength = COUNTRYCODE_MAX_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_Platform_GetActiveCountryCode(InnerHandle, localUserId.InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}

		/// <summary>
		/// Get the active locale code that the SDK will send to services which require it.
		/// This returns the override value otherwise it will use the locale code of the given user.
		/// This is used for localization. This follows ISO 639.
		/// eos_ecom.h
		/// <see cref="LOCALECODE_MAX_LENGTH" />
		/// </summary>
		/// <param name="localUserId">
		/// The account to use for lookup if no override exists.
		/// </param>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written. The buffer must be long enough to hold a <see cref="Utf8String" /> of <see cref="LOCALECODE_MAX_LENGTH" />.
		/// </param>
		/// <param name="inOutBufferLength">
		/// The size of the OutBuffer in characters.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the active locale code <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> if the information is available and passed out in OutBuffer
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if there is neither an override nor an available locale code for the user.
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the locale code <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result GetActiveLocaleCode(EpicAccountId localUserId, out Utf8String outBuffer)
		{
			int inOutBufferLength = LOCALECODE_MAX_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_Platform_GetActiveLocaleCode(InnerHandle, localUserId.InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}

		/// <summary>
		/// Get a handle to the Anti-Cheat Client Interface.
		/// eos_anticheatclient.h
		/// eos_anticheatclient_types.h
		/// </summary>
		/// <returns>
		/// <see cref="AntiCheatClient.AntiCheatClientInterface" /> handle
		/// </returns>
		public AntiCheatClient.AntiCheatClientInterface GetAntiCheatClientInterface()
		{
			var callResult = Bindings.EOS_Platform_GetAntiCheatClientInterface(InnerHandle);

			AntiCheatClient.AntiCheatClientInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Anti-Cheat Server Interface.
		/// eos_anticheatserver.h
		/// eos_anticheatserver_types.h
		/// </summary>
		/// <returns>
		/// <see cref="AntiCheatServer.AntiCheatServerInterface" /> handle
		/// </returns>
		public AntiCheatServer.AntiCheatServerInterface GetAntiCheatServerInterface()
		{
			var callResult = Bindings.EOS_Platform_GetAntiCheatServerInterface(InnerHandle);

			AntiCheatServer.AntiCheatServerInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Retrieves the current application state as told to the SDK by the application.
		/// </summary>
		/// <returns>
		/// The current application status.
		/// </returns>
		public ApplicationStatus GetApplicationStatus()
		{
			var callResult = Bindings.EOS_Platform_GetApplicationStatus(InnerHandle);

			return callResult;
		}

		/// <summary>
		/// Get a handle to the Auth Interface.
		/// eos_auth.h
		/// eos_auth_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Auth.AuthInterface" /> handle
		/// </returns>
		public Auth.AuthInterface GetAuthInterface()
		{
			var callResult = Bindings.EOS_Platform_GetAuthInterface(InnerHandle);

			Auth.AuthInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Connect Interface.
		/// eos_connect.h
		/// eos_connect_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Connect.ConnectInterface" /> handle
		/// </returns>
		public Connect.ConnectInterface GetConnectInterface()
		{
			var callResult = Bindings.EOS_Platform_GetConnectInterface(InnerHandle);

			Connect.ConnectInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Custom Invites Interface.
		/// eos_custominvites.h
		/// eos_custominvites_types.h
		/// </summary>
		/// <returns>
		/// <see cref="CustomInvites.CustomInvitesInterface" /> handle
		/// </returns>
		public CustomInvites.CustomInvitesInterface GetCustomInvitesInterface()
		{
			var callResult = Bindings.EOS_Platform_GetCustomInvitesInterface(InnerHandle);

			CustomInvites.CustomInvitesInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Windows only.
		/// Checks that the application is ready to use desktop crossplay functionality, with the necessary prerequisites having been met.
		/// 
		/// This function verifies that the application was launched through the Bootstrapper application,
		/// the redistributable service has been installed and is running in the background,
		/// and that the overlay has been loaded successfully.
		/// 
		/// On Windows, the desktop crossplay functionality is required to use Epic accounts login
		/// with applications that are distributed outside the Epic Games Store.
		/// </summary>
		/// <param name="options">
		/// input structure that specifies the API version.
		/// </param>
		/// <param name="outDesktopCrossplayStatusInfo">
		/// output structure to receive the desktop crossplay status information.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> is returned to indicate success or an error.
		/// <see cref="Result.NotImplemented" /> is returned on non-Windows platforms.
		/// </returns>
		public Result GetDesktopCrossplayStatus(ref GetDesktopCrossplayStatusOptions options, out DesktopCrossplayStatusInfo outDesktopCrossplayStatusInfo)
		{
			var optionsInternal = default(GetDesktopCrossplayStatusOptionsInternal);
			optionsInternal.Set(ref options);

			var outDesktopCrossplayStatusInfoInternal = default(DesktopCrossplayStatusInfoInternal);

			var callResult = Bindings.EOS_Platform_GetDesktopCrossplayStatus(InnerHandle, ref optionsInternal, out outDesktopCrossplayStatusInfoInternal);

			Helper.Dispose(ref optionsInternal);

			Helper.Get(ref outDesktopCrossplayStatusInfoInternal, out outDesktopCrossplayStatusInfo);

			return callResult;
		}

		/// <summary>
		/// Get a handle to the Ecom Interface.
		/// eos_ecom.h
		/// eos_ecom_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Ecom.EcomInterface" /> handle
		/// </returns>
		public Ecom.EcomInterface GetEcomInterface()
		{
			var callResult = Bindings.EOS_Platform_GetEcomInterface(InnerHandle);

			Ecom.EcomInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Friends Interface.
		/// eos_friends.h
		/// eos_friends_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Friends.FriendsInterface" /> handle
		/// </returns>
		public Friends.FriendsInterface GetFriendsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetFriendsInterface(InnerHandle);

			Friends.FriendsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Integrated Platform Interface.
		/// eos_integratedplatform.h
		/// eos_integratedplatform_types.h
		/// </summary>
		/// <returns>
		/// <see cref="IntegratedPlatform.IntegratedPlatformInterface" /> handle
		/// </returns>
		public IntegratedPlatform.IntegratedPlatformInterface GetIntegratedPlatformInterface()
		{
			var callResult = Bindings.EOS_Platform_GetIntegratedPlatformInterface(InnerHandle);

			IntegratedPlatform.IntegratedPlatformInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Kids Web Service Interface.
		/// eos_kws.h
		/// eos_kws_types.h
		/// </summary>
		/// <returns>
		/// <see cref="KWS.KWSInterface" /> handle
		/// </returns>
		public KWS.KWSInterface GetKWSInterface()
		{
			var callResult = Bindings.EOS_Platform_GetKWSInterface(InnerHandle);

			KWS.KWSInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Leaderboards Interface.
		/// eos_leaderboards.h
		/// eos_leaderboards_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Leaderboards.LeaderboardsInterface" /> handle
		/// </returns>
		public Leaderboards.LeaderboardsInterface GetLeaderboardsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetLeaderboardsInterface(InnerHandle);

			Leaderboards.LeaderboardsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Lobby Interface.
		/// eos_lobby.h
		/// eos_lobby_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Lobby.LobbyInterface" /> handle
		/// </returns>
		public Lobby.LobbyInterface GetLobbyInterface()
		{
			var callResult = Bindings.EOS_Platform_GetLobbyInterface(InnerHandle);

			Lobby.LobbyInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Metrics Interface.
		/// eos_metrics.h
		/// eos_metrics_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Metrics.MetricsInterface" /> handle
		/// </returns>
		public Metrics.MetricsInterface GetMetricsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetMetricsInterface(InnerHandle);

			Metrics.MetricsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Mods Interface.
		/// eos_mods.h
		/// eos_mods_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Mods.ModsInterface" /> handle
		/// </returns>
		public Mods.ModsInterface GetModsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetModsInterface(InnerHandle);

			Mods.ModsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Retrieves the current network state as told to the SDK by the application.
		/// </summary>
		/// <returns>
		/// The current network status.
		/// </returns>
		public NetworkStatus GetNetworkStatus()
		{
			var callResult = Bindings.EOS_Platform_GetNetworkStatus(InnerHandle);

			return callResult;
		}

		/// <summary>
		/// Get the override country code that the SDK will send to services which require it.
		/// This is not currently used for anything internally.
		/// eos_ecom.h
		/// <see cref="COUNTRYCODE_MAX_LENGTH" />
		/// </summary>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written. The buffer must be long enough to hold a <see cref="Utf8String" /> of <see cref="COUNTRYCODE_MAX_LENGTH" />.
		/// </param>
		/// <param name="inOutBufferLength">
		/// The size of the OutBuffer in characters.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the override country code <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> if the information is available and passed out in OutBuffer
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the country code <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result GetOverrideCountryCode(out Utf8String outBuffer)
		{
			int inOutBufferLength = COUNTRYCODE_MAX_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_Platform_GetOverrideCountryCode(InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}

		/// <summary>
		/// Get the override locale code that the SDK will send to services which require it.
		/// This is used for localization. This follows ISO 639.
		/// eos_ecom.h
		/// <see cref="LOCALECODE_MAX_LENGTH" />
		/// </summary>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written. The buffer must be long enough to hold a <see cref="Utf8String" /> of <see cref="LOCALECODE_MAX_LENGTH" />.
		/// </param>
		/// <param name="inOutBufferLength">
		/// The size of the OutBuffer in characters.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the override locale code <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> if the information is available and passed out in OutBuffer
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the locale code <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result GetOverrideLocaleCode(out Utf8String outBuffer)
		{
			int inOutBufferLength = LOCALECODE_MAX_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_Platform_GetOverrideLocaleCode(InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}

		/// <summary>
		/// Get a handle to the Peer-to-Peer Networking Interface.
		/// eos_p2p.h
		/// eos_p2p_types.h
		/// </summary>
		/// <returns>
		/// <see cref="P2P.P2PInterface" /> handle
		/// </returns>
		public P2P.P2PInterface GetP2PInterface()
		{
			var callResult = Bindings.EOS_Platform_GetP2PInterface(InnerHandle);

			P2P.P2PInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the PlayerDataStorage Interface.
		/// eos_playerdatastorage.h
		/// eos_playerdatastorage_types.h
		/// </summary>
		/// <returns>
		/// <see cref="PlayerDataStorage.PlayerDataStorageInterface" /> handle
		/// </returns>
		public PlayerDataStorage.PlayerDataStorageInterface GetPlayerDataStorageInterface()
		{
			var callResult = Bindings.EOS_Platform_GetPlayerDataStorageInterface(InnerHandle);

			PlayerDataStorage.PlayerDataStorageInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Presence Interface.
		/// eos_presence.h
		/// eos_presence_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Presence.PresenceInterface" /> handle
		/// </returns>
		public Presence.PresenceInterface GetPresenceInterface()
		{
			var callResult = Bindings.EOS_Platform_GetPresenceInterface(InnerHandle);

			Presence.PresenceInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get the active country code that the SDK will send to services which require it.
		/// This returns the override value otherwise it will use the country code of the given user.
		/// This is currently used for determining pricing.
		/// Get a handle to the ProgressionSnapshot Interface.
		/// eos_progressionsnapshot.h
		/// eos_progressionsnapshot_types.h
		/// </summary>
		/// <returns>
		/// <see cref="ProgressionSnapshot.ProgressionSnapshotInterface" /> handle
		/// </returns>
		public ProgressionSnapshot.ProgressionSnapshotInterface GetProgressionSnapshotInterface()
		{
			var callResult = Bindings.EOS_Platform_GetProgressionSnapshotInterface(InnerHandle);

			ProgressionSnapshot.ProgressionSnapshotInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the RTC Admin interface
		/// eos_rtc_admin.h
		/// eos_admin_types.h
		/// </summary>
		/// <returns>
		/// <see cref="RTCAdmin.RTCAdminInterface" /> handle
		/// </returns>
		public RTCAdmin.RTCAdminInterface GetRTCAdminInterface()
		{
			var callResult = Bindings.EOS_Platform_GetRTCAdminInterface(InnerHandle);

			RTCAdmin.RTCAdminInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Real Time Communications Interface (RTC).
		/// From the RTC interface you can retrieve the handle to the audio interface (RTCAudio), which is a component of RTC.
		/// <see cref="RTC.RTCInterface.GetAudioInterface" />
		/// eos_rtc.h
		/// eos_rtc_types.h
		/// </summary>
		/// <returns>
		/// <see cref="RTC.RTCInterface" /> handle
		/// </returns>
		public RTC.RTCInterface GetRTCInterface()
		{
			var callResult = Bindings.EOS_Platform_GetRTCInterface(InnerHandle);

			RTC.RTCInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Reports Interface.
		/// eos_reports.h
		/// eos_reports_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Reports.ReportsInterface" /> handle
		/// </returns>
		public Reports.ReportsInterface GetReportsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetReportsInterface(InnerHandle);

			Reports.ReportsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Sanctions Interface.
		/// eos_sanctions.h
		/// eos_sanctions_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Sanctions.SanctionsInterface" /> handle
		/// </returns>
		public Sanctions.SanctionsInterface GetSanctionsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetSanctionsInterface(InnerHandle);

			Sanctions.SanctionsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Sessions Interface.
		/// eos_sessions.h
		/// eos_sessions_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Sessions.SessionsInterface" /> handle
		/// </returns>
		public Sessions.SessionsInterface GetSessionsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetSessionsInterface(InnerHandle);

			Sessions.SessionsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the Stats Interface.
		/// eos_stats.h
		/// eos_stats_types.h
		/// </summary>
		/// <returns>
		/// <see cref="Stats.StatsInterface" /> handle
		/// </returns>
		public Stats.StatsInterface GetStatsInterface()
		{
			var callResult = Bindings.EOS_Platform_GetStatsInterface(InnerHandle);

			Stats.StatsInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the TitleStorage Interface.
		/// eos_titlestorage.h
		/// eos_titlestorage_types.h
		/// </summary>
		/// <returns>
		/// <see cref="TitleStorage.TitleStorageInterface" /> handle
		/// </returns>
		public TitleStorage.TitleStorageInterface GetTitleStorageInterface()
		{
			var callResult = Bindings.EOS_Platform_GetTitleStorageInterface(InnerHandle);

			TitleStorage.TitleStorageInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the UI Interface.
		/// eos_ui.h
		/// eos_ui_types.h
		/// </summary>
		/// <returns>
		/// <see cref="UI.UIInterface" /> handle
		/// </returns>
		public UI.UIInterface GetUIInterface()
		{
			var callResult = Bindings.EOS_Platform_GetUIInterface(InnerHandle);

			UI.UIInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Get a handle to the UserInfo Interface.
		/// eos_userinfo.h
		/// eos_userinfo_types.h
		/// </summary>
		/// <returns>
		/// <see cref="UserInfo.UserInfoInterface" /> handle
		/// </returns>
		public UserInfo.UserInfoInterface GetUserInfoInterface()
		{
			var callResult = Bindings.EOS_Platform_GetUserInfoInterface(InnerHandle);

			UserInfo.UserInfoInterface callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Release an Epic Online Services platform instance previously returned from <see cref="Create" />.
		/// 
		/// This function should only be called once per instance returned by <see cref="Create" />. Undefined behavior will result in calling it with a single instance more than once.
		/// Typically only a single platform instance needs to be created during the lifetime of a game.
		/// You should release each platform instance before calling the <see cref="Shutdown" /> function.
		/// </summary>
		public void Release()
		{
			Bindings.EOS_Platform_Release(InnerHandle);
		}

		/// <summary>
		/// Notify a change in application state.
		/// Calling SetApplicationStatus must happen before Tick when foregrounding for the cases where we won't get the background notification.
		/// </summary>
		/// <param name="newStatus">
		/// The new status for the application.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether we changed the application status successfully.
		/// <see cref="Result.Success" /> if the application was changed successfully.
		/// <see cref="Result.InvalidParameters" /> if the value of NewStatus is invalid.
		/// <see cref="Result.NotImplemented" /> if <see cref="ApplicationStatus.BackgroundConstrained" /> or <see cref="ApplicationStatus.BackgroundUnconstrained" /> are attempted to be set on platforms that do not have such application states.
		/// </returns>
		public Result SetApplicationStatus(ApplicationStatus newStatus)
		{
			var callResult = Bindings.EOS_Platform_SetApplicationStatus(InnerHandle, newStatus);

			return callResult;
		}

		/// <summary>
		/// Notify a change in network state.
		/// </summary>
		/// <param name="newStatus">
		/// The new network status.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether we changed the network status successfully.
		/// <see cref="Result.Success" /> if the network was changed successfully.
		/// <see cref="Result.InvalidParameters" /> if the value of NewStatus is invalid.
		/// </returns>
		public Result SetNetworkStatus(NetworkStatus newStatus)
		{
			var callResult = Bindings.EOS_Platform_SetNetworkStatus(InnerHandle, newStatus);

			return callResult;
		}

		/// <summary>
		/// Set the override country code that the SDK will send to services which require it.
		/// This is not currently used for anything internally.
		/// eos_ecom.h
		/// <see cref="COUNTRYCODE_MAX_LENGTH" />
		/// </summary>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the override country code <see cref="Utf8String" /> was saved.
		/// <see cref="Result.Success" /> if the country code was overridden
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid country code
		/// </returns>
		public Result SetOverrideCountryCode(Utf8String newCountryCode)
		{
			var newCountryCodePointer = IntPtr.Zero;
			Helper.Set(newCountryCode, ref newCountryCodePointer);

			var callResult = Bindings.EOS_Platform_SetOverrideCountryCode(InnerHandle, newCountryCodePointer);

			Helper.Dispose(ref newCountryCodePointer);

			return callResult;
		}

		/// <summary>
		/// Set the override locale code that the SDK will send to services which require it.
		/// This is used for localization. This follows ISO 639.
		/// eos_ecom.h
		/// <see cref="LOCALECODE_MAX_LENGTH" />
		/// </summary>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the override locale code <see cref="Utf8String" /> was saved.
		/// <see cref="Result.Success" /> if the locale code was overridden
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid locale code
		/// </returns>
		public Result SetOverrideLocaleCode(Utf8String newLocaleCode)
		{
			var newLocaleCodePointer = IntPtr.Zero;
			Helper.Set(newLocaleCode, ref newLocaleCodePointer);

			var callResult = Bindings.EOS_Platform_SetOverrideLocaleCode(InnerHandle, newLocaleCodePointer);

			Helper.Dispose(ref newLocaleCodePointer);

			return callResult;
		}

		/// <summary>
		/// Notify the platform instance to do work. This function must be called frequently in order for the services provided by the SDK to properly
		/// function. For tick-based applications, it is usually desirable to call this once per-tick.
		/// </summary>
		public void Tick()
		{
			Bindings.EOS_Platform_Tick(InnerHandle);
		}

		/// <summary>
		/// Tear down the Epic Online Services SDK.
		/// 
		/// Once this function has been called, no more SDK calls are permitted; calling anything after <see cref="Shutdown" /> will result in undefined behavior.
		/// </summary>
		/// <returns>
		/// An <see cref="Result" /> is returned to indicate success or an error.
		/// <see cref="Result.Success" /> is returned if the SDK is successfully torn down.
		/// <see cref="Result.NotConfigured" /> is returned if a successful call to <see cref="Initialize" /> has not been made.
		/// <see cref="Result.UnexpectedError" /> is returned if <see cref="Shutdown" /> has already been called.
		/// </returns>
		public static Result Shutdown()
		{
			var callResult = Bindings.EOS_Shutdown();

			return callResult;
		}
	}
}

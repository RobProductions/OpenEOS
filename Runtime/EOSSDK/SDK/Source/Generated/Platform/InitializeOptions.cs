// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Options for initializing the Epic Online Services SDK.
	/// </summary>
	public struct InitializeOptions
	{
		/// <summary>
		/// A custom memory allocator, if desired.
		/// </summary>
		public IntPtr AllocateMemoryFunction { get; set; }

		/// <summary>
		/// A corresponding memory reallocator. If the AllocateMemoryFunction is <see langword="null" />, then this field must also be <see langword="null" />.
		/// </summary>
		public IntPtr ReallocateMemoryFunction { get; set; }

		/// <summary>
		/// A corresponding memory releaser. If the AllocateMemoryFunction is <see langword="null" />, then this field must also be <see langword="null" />.
		/// </summary>
		public IntPtr ReleaseMemoryFunction { get; set; }

		/// <summary>
		/// The name of the product using the Epic Online Services SDK.
		/// 
		/// The name <see cref="Utf8String" /> is required to be non-empty and at maximum of <see cref="PlatformInterface.INITIALIZEOPTIONS_PRODUCTNAME_MAX_LENGTH" /> bytes long.
		/// The <see cref="Utf8String" /> buffer can consist of the following characters:
		/// A-Z, a-z, 0-9, dot, underscore, space, exclamation mark, question mark, and sign, hyphen, parenthesis, plus, minus, colon.
		/// </summary>
		public Utf8String ProductName { get; set; }

		/// <summary>
		/// Product version of the running application.
		/// 
		/// The version <see cref="Utf8String" /> is required to be non-empty and at maximum of <see cref="PlatformInterface.INITIALIZEOPTIONS_PRODUCTVERSION_MAX_LENGTH" /> bytes long.
		/// The <see cref="Utf8String" /> buffer can consist of the following characters:
		/// A-Z, a-z, 0-9, dot, underscore, space, exclamation mark, question mark, and sign, hyphen, parenthesis, plus, minus, colon.
		/// </summary>
		public Utf8String ProductVersion { get; set; }

		/// <summary>
		/// A reserved field that should always be <see langword="null" />.
		/// </summary>
		public IntPtr Reserved { get; set; }

		/// <summary>
		/// This field is for system specific initialization if any.
		/// 
		/// If provided then the structure will be located in <System>/eos_<system>.h.
		/// The structure will be named EOS_<System>_InitializeOptions.
		/// </summary>
		public IntPtr SystemInitializeOptions { get; set; }

		/// <summary>
		/// The thread affinity override values for each category of thread.
		/// </summary>
		public InitializeThreadAffinity? OverrideThreadAffinity { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct InitializeOptionsInternal : ISettable<InitializeOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_AllocateMemoryFunction;
		private IntPtr m_ReallocateMemoryFunction;
		private IntPtr m_ReleaseMemoryFunction;
		private IntPtr m_ProductName;
		private IntPtr m_ProductVersion;
		private IntPtr m_Reserved;
		private IntPtr m_SystemInitializeOptions;
		private IntPtr m_OverrideThreadAffinity;

		public void Set(ref InitializeOptions other)
		{
			Dispose();

			m_ApiVersion = PlatformInterface.INITIALIZE_API_LATEST;
			m_AllocateMemoryFunction = other.AllocateMemoryFunction;
			m_ReallocateMemoryFunction = other.ReallocateMemoryFunction;
			m_ReleaseMemoryFunction = other.ReleaseMemoryFunction;
			Helper.Set(other.ProductName, ref m_ProductName);
			Helper.Set(other.ProductVersion, ref m_ProductVersion);
			m_Reserved = other.Reserved;
			if (m_Reserved == IntPtr.Zero) Helper.Set(new int[] { 1, 1 }, ref m_Reserved, false);
			m_SystemInitializeOptions = other.SystemInitializeOptions;
			Helper.Set<InitializeThreadAffinity, InitializeThreadAffinityInternal>(other.OverrideThreadAffinity, ref m_OverrideThreadAffinity);
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ProductName);
			Helper.Dispose(ref m_ProductVersion);
			Helper.Dispose(ref m_Reserved);
			Helper.Dispose(ref m_SystemInitializeOptions);
			Helper.Dispose(ref m_OverrideThreadAffinity);
		}
	}
}

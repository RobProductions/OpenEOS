// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Options for initializing defining thread affinity for use by Epic Online Services SDK.
	/// Set the affinity to 0 to allow EOS SDK to use a platform specific default value.
	/// </summary>
	public struct InitializeThreadAffinity
	{
		/// <summary>
		/// Any thread related to network management that is not IO.
		/// </summary>
		public ulong NetworkWork { get; set; }

		/// <summary>
		/// Any thread that will interact with a storage device.
		/// </summary>
		public ulong StorageIo { get; set; }

		/// <summary>
		/// Any thread that will generate web socket IO.
		/// </summary>
		public ulong WebSocketIo { get; set; }

		/// <summary>
		/// Any thread that will generate IO related to P2P traffic and management.
		/// </summary>
		public ulong P2PIo { get; set; }

		/// <summary>
		/// Any thread that will generate http request IO.
		/// </summary>
		public ulong HttpRequestIo { get; set; }

		/// <summary>
		/// Any thread that will generate IO related to RTC traffic and management.
		/// </summary>
		public ulong RTCIo { get; set; }

		/// <summary>
		/// Main thread of the external overlay
		/// </summary>
		public ulong EmbeddedOverlayMainThread { get; set; }

		/// <summary>
		/// Worker threads of the external overlay
		/// </summary>
		public ulong EmbeddedOverlayWorkerThreads { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct InitializeThreadAffinityInternal : ISettable<InitializeThreadAffinity>
	{
		private int m_ApiVersion;
		private ulong m_NetworkWork;
		private ulong m_StorageIo;
		private ulong m_WebSocketIo;
		private ulong m_P2PIo;
		private ulong m_HttpRequestIo;
		private ulong m_RTCIo;
		private ulong m_EmbeddedOverlayMainThread;
		private ulong m_EmbeddedOverlayWorkerThreads;

		public void Set(ref InitializeThreadAffinity other)
		{
			Dispose();

			m_ApiVersion = PlatformInterface.INITIALIZE_THREADAFFINITY_API_LATEST;
			m_NetworkWork = other.NetworkWork;
			m_StorageIo = other.StorageIo;
			m_WebSocketIo = other.WebSocketIo;
			m_P2PIo = other.P2PIo;
			m_HttpRequestIo = other.HttpRequestIo;
			m_RTCIo = other.RTCIo;
			m_EmbeddedOverlayMainThread = other.EmbeddedOverlayMainThread;
			m_EmbeddedOverlayWorkerThreads = other.EmbeddedOverlayWorkerThreads;
		}

		public void Dispose()
		{
		}
	}
}

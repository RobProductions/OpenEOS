// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices
{
	public sealed partial class ProductUserId : Handle
	{
		public ProductUserId()
		{
		}

		public ProductUserId(IntPtr innerHandle) : base(innerHandle)
		{
		}
		/// <summary>
		/// Retrieve an <see cref="ProductUserId" /> from a raw <see cref="Utf8String" /> representing an Epic Online Services Product User ID. The input <see cref="Utf8String" /> must be <see langword="null" />-terminated.
		/// NOTE: There is no validation on the <see cref="Utf8String" /> format, this should only be used with values serialized from legitimate sources such as <see cref="ToString" />
		/// </summary>
		/// <param name="productUserIdString">
		/// The stringified product user ID for which to retrieve the Epic Online Services Product User ID
		/// </param>
		/// <returns>
		/// The <see cref="ProductUserId" /> that corresponds to the ProductUserIdString
		/// </returns>
		public static ProductUserId FromString(Utf8String productUserIdString)
		{
			var productUserIdStringPointer = IntPtr.Zero;
			Helper.Set(productUserIdString, ref productUserIdStringPointer);

			var callResult = Bindings.EOS_ProductUserId_FromString(productUserIdStringPointer);

			Helper.Dispose(ref productUserIdStringPointer);

			ProductUserId callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}
		public static explicit operator ProductUserId(Utf8String productUserIdString)
		{
			return FromString(productUserIdString);
		}

		/// <summary>
		/// Check whether or not the given account unique ID is considered valid
		/// NOTE: This will return <see langword="true" /> for any <see cref="ProductUserId" /> created with <see cref="FromString" /> as there is no validation
		/// </summary>
		/// <param name="accountId">
		/// The Product User ID to check for validity
		/// </param>
		/// <returns>
		/// <see langword="true" /> if the <see cref="ProductUserId" /> is valid, otherwise <see langword="false" />
		/// </returns>
		public bool IsValid()
		{
			var callResult = Bindings.EOS_ProductUserId_IsValid(InnerHandle);

			bool callResultReturn;
			Helper.Get(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// Retrieve a <see langword="null" />-terminated stringified Product User ID from an <see cref="ProductUserId" />. This is useful for replication of Product User IDs in multiplayer games.
		/// This <see cref="Utf8String" /> will be no larger than <see cref="Common.PRODUCTUSERID_MAX_LENGTH" /> + 1 and will only contain UTF8-encoded printable characters as well as the <see langword="null" />-terminator.
		/// </summary>
		/// <param name="accountId">
		/// The Product User ID for which to retrieve the stringified version.
		/// </param>
		/// <param name="outBuffer">
		/// The buffer into which the character data should be written
		/// </param>
		/// <param name="inOutBufferLength">
		/// The size of the OutBuffer in characters.
		/// The input buffer should include enough space to be <see langword="null" />-terminated.
		/// When the function returns, this parameter will be filled with the length of the <see cref="Utf8String" /> copied into OutBuffer including the <see langword="null" />-termination character.
		/// </param>
		/// <returns>
		/// An <see cref="Result" /> that indicates whether the Product User ID <see cref="Utf8String" /> was copied into the OutBuffer.
		/// <see cref="Result.Success" /> - The OutBuffer was filled, and InOutBufferLength contains the number of characters copied into OutBuffer including the <see langword="null" />-terminator.
		/// <see cref="Result.InvalidParameters" /> - Either OutBuffer or InOutBufferLength were passed as <see langword="null" /> parameters.
		/// <see cref="Result.InvalidUser" /> - The AccountId is invalid and cannot be stringified.
		/// <see cref="Result.LimitExceeded" /> - The OutBuffer is not large enough to receive the Product User ID <see cref="Utf8String" />. InOutBufferLength contains the required minimum length to perform the operation successfully.
		/// </returns>
		public Result ToString(out Utf8String outBuffer)
		{
			int inOutBufferLength = Common.PRODUCTUSERID_MAX_LENGTH + 1;
			var outBufferPointer = Helper.AddAllocation(inOutBufferLength);

			var callResult = Bindings.EOS_ProductUserId_ToString(InnerHandle, outBufferPointer, ref inOutBufferLength);

			Helper.Get(outBufferPointer, out outBuffer);
			Helper.Dispose(ref outBufferPointer);

			return callResult;
		}
		public override string ToString()
		{
			Utf8String callResult;
			ToString(out callResult);
			return callResult;
		}

		public override string ToString(string format, IFormatProvider formatProvider)
		{
			if (format != null)
			{
				return string.Format(format, ToString());
			}

			return ToString();
		}

		public static explicit operator Utf8String(ProductUserId accountId)
		{
			Utf8String callResult = null;

			if (accountId != null)
			{
				accountId.ToString(out callResult);
			}

			return callResult;
		}
	}
}

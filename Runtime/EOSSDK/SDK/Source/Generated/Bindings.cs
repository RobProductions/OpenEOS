// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_STANDALONE_WIN && !UNITY_64
	#define EOS_PLATFORM_WINDOWS_32
#endif

#if UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX
	#define EOS_PLATFORM_OSX
#endif

#if UNITY_IOS || __IOS__
	#define EOS_PLATFORM_IOS
#endif

#if UNITY_EDITOR
	#define EOS_EDITOR
#endif

#if EOS_EDITOR
	#define EOS_DYNAMIC_BINDINGS
#endif

#if EOS_DYNAMIC_BINDINGS
	#if EOS_PLATFORM_WINDOWS_32
		#define EOS_DYNAMIC_BINDINGS_MANGLING_WINDOWS_32
	#elif EOS_PLATFORM_OSX || EOS_PLATFORM_IOS
		#define EOS_DYNAMIC_BINDINGS_MANGLING_APPLE
	#else
		#define EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
	#endif
#endif

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices
{
	public static partial class Bindings
	{
#if EOS_DYNAMIC_BINDINGS_MANGLING_STANDARD
		private const string EOS_Achievements_AddNotifyAchievementsUnlockedName = "EOS_Achievements_AddNotifyAchievementsUnlocked";
		private const string EOS_Achievements_AddNotifyAchievementsUnlockedV2Name = "EOS_Achievements_AddNotifyAchievementsUnlockedV2";
		private const string EOS_Achievements_CopyAchievementDefinitionByAchievementIdName = "EOS_Achievements_CopyAchievementDefinitionByAchievementId";
		private const string EOS_Achievements_CopyAchievementDefinitionByIndexName = "EOS_Achievements_CopyAchievementDefinitionByIndex";
		private const string EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdName = "EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId";
		private const string EOS_Achievements_CopyAchievementDefinitionV2ByIndexName = "EOS_Achievements_CopyAchievementDefinitionV2ByIndex";
		private const string EOS_Achievements_CopyPlayerAchievementByAchievementIdName = "EOS_Achievements_CopyPlayerAchievementByAchievementId";
		private const string EOS_Achievements_CopyPlayerAchievementByIndexName = "EOS_Achievements_CopyPlayerAchievementByIndex";
		private const string EOS_Achievements_CopyUnlockedAchievementByAchievementIdName = "EOS_Achievements_CopyUnlockedAchievementByAchievementId";
		private const string EOS_Achievements_CopyUnlockedAchievementByIndexName = "EOS_Achievements_CopyUnlockedAchievementByIndex";
		private const string EOS_Achievements_DefinitionV2_ReleaseName = "EOS_Achievements_DefinitionV2_Release";
		private const string EOS_Achievements_Definition_ReleaseName = "EOS_Achievements_Definition_Release";
		private const string EOS_Achievements_GetAchievementDefinitionCountName = "EOS_Achievements_GetAchievementDefinitionCount";
		private const string EOS_Achievements_GetPlayerAchievementCountName = "EOS_Achievements_GetPlayerAchievementCount";
		private const string EOS_Achievements_GetUnlockedAchievementCountName = "EOS_Achievements_GetUnlockedAchievementCount";
		private const string EOS_Achievements_PlayerAchievement_ReleaseName = "EOS_Achievements_PlayerAchievement_Release";
		private const string EOS_Achievements_QueryDefinitionsName = "EOS_Achievements_QueryDefinitions";
		private const string EOS_Achievements_QueryPlayerAchievementsName = "EOS_Achievements_QueryPlayerAchievements";
		private const string EOS_Achievements_RemoveNotifyAchievementsUnlockedName = "EOS_Achievements_RemoveNotifyAchievementsUnlocked";
		private const string EOS_Achievements_UnlockAchievementsName = "EOS_Achievements_UnlockAchievements";
		private const string EOS_Achievements_UnlockedAchievement_ReleaseName = "EOS_Achievements_UnlockedAchievement_Release";
		private const string EOS_ActiveSession_CopyInfoName = "EOS_ActiveSession_CopyInfo";
		private const string EOS_ActiveSession_GetRegisteredPlayerByIndexName = "EOS_ActiveSession_GetRegisteredPlayerByIndex";
		private const string EOS_ActiveSession_GetRegisteredPlayerCountName = "EOS_ActiveSession_GetRegisteredPlayerCount";
		private const string EOS_ActiveSession_Info_ReleaseName = "EOS_ActiveSession_Info_Release";
		private const string EOS_ActiveSession_ReleaseName = "EOS_ActiveSession_Release";
		private const string EOS_AntiCheatClient_AddExternalIntegrityCatalogName = "EOS_AntiCheatClient_AddExternalIntegrityCatalog";
		private const string EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedName = "EOS_AntiCheatClient_AddNotifyClientIntegrityViolated";
		private const string EOS_AntiCheatClient_AddNotifyMessageToPeerName = "EOS_AntiCheatClient_AddNotifyMessageToPeer";
		private const string EOS_AntiCheatClient_AddNotifyMessageToServerName = "EOS_AntiCheatClient_AddNotifyMessageToServer";
		private const string EOS_AntiCheatClient_AddNotifyPeerActionRequiredName = "EOS_AntiCheatClient_AddNotifyPeerActionRequired";
		private const string EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedName = "EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged";
		private const string EOS_AntiCheatClient_BeginSessionName = "EOS_AntiCheatClient_BeginSession";
		private const string EOS_AntiCheatClient_EndSessionName = "EOS_AntiCheatClient_EndSession";
		private const string EOS_AntiCheatClient_GetProtectMessageOutputLengthName = "EOS_AntiCheatClient_GetProtectMessageOutputLength";
		private const string EOS_AntiCheatClient_PollStatusName = "EOS_AntiCheatClient_PollStatus";
		private const string EOS_AntiCheatClient_ProtectMessageName = "EOS_AntiCheatClient_ProtectMessage";
		private const string EOS_AntiCheatClient_ReceiveMessageFromPeerName = "EOS_AntiCheatClient_ReceiveMessageFromPeer";
		private const string EOS_AntiCheatClient_ReceiveMessageFromServerName = "EOS_AntiCheatClient_ReceiveMessageFromServer";
		private const string EOS_AntiCheatClient_RegisterPeerName = "EOS_AntiCheatClient_RegisterPeer";
		private const string EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedName = "EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated";
		private const string EOS_AntiCheatClient_RemoveNotifyMessageToPeerName = "EOS_AntiCheatClient_RemoveNotifyMessageToPeer";
		private const string EOS_AntiCheatClient_RemoveNotifyMessageToServerName = "EOS_AntiCheatClient_RemoveNotifyMessageToServer";
		private const string EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredName = "EOS_AntiCheatClient_RemoveNotifyPeerActionRequired";
		private const string EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedName = "EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged";
		private const string EOS_AntiCheatClient_Reserved01Name = "EOS_AntiCheatClient_Reserved01";
		private const string EOS_AntiCheatClient_UnprotectMessageName = "EOS_AntiCheatClient_UnprotectMessage";
		private const string EOS_AntiCheatClient_UnregisterPeerName = "EOS_AntiCheatClient_UnregisterPeer";
		private const string EOS_AntiCheatServer_AddNotifyClientActionRequiredName = "EOS_AntiCheatServer_AddNotifyClientActionRequired";
		private const string EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedName = "EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged";
		private const string EOS_AntiCheatServer_AddNotifyMessageToClientName = "EOS_AntiCheatServer_AddNotifyMessageToClient";
		private const string EOS_AntiCheatServer_BeginSessionName = "EOS_AntiCheatServer_BeginSession";
		private const string EOS_AntiCheatServer_EndSessionName = "EOS_AntiCheatServer_EndSession";
		private const string EOS_AntiCheatServer_GetProtectMessageOutputLengthName = "EOS_AntiCheatServer_GetProtectMessageOutputLength";
		private const string EOS_AntiCheatServer_LogEventName = "EOS_AntiCheatServer_LogEvent";
		private const string EOS_AntiCheatServer_LogGameRoundEndName = "EOS_AntiCheatServer_LogGameRoundEnd";
		private const string EOS_AntiCheatServer_LogGameRoundStartName = "EOS_AntiCheatServer_LogGameRoundStart";
		private const string EOS_AntiCheatServer_LogPlayerDespawnName = "EOS_AntiCheatServer_LogPlayerDespawn";
		private const string EOS_AntiCheatServer_LogPlayerReviveName = "EOS_AntiCheatServer_LogPlayerRevive";
		private const string EOS_AntiCheatServer_LogPlayerSpawnName = "EOS_AntiCheatServer_LogPlayerSpawn";
		private const string EOS_AntiCheatServer_LogPlayerTakeDamageName = "EOS_AntiCheatServer_LogPlayerTakeDamage";
		private const string EOS_AntiCheatServer_LogPlayerTickName = "EOS_AntiCheatServer_LogPlayerTick";
		private const string EOS_AntiCheatServer_LogPlayerUseAbilityName = "EOS_AntiCheatServer_LogPlayerUseAbility";
		private const string EOS_AntiCheatServer_LogPlayerUseWeaponName = "EOS_AntiCheatServer_LogPlayerUseWeapon";
		private const string EOS_AntiCheatServer_ProtectMessageName = "EOS_AntiCheatServer_ProtectMessage";
		private const string EOS_AntiCheatServer_ReceiveMessageFromClientName = "EOS_AntiCheatServer_ReceiveMessageFromClient";
		private const string EOS_AntiCheatServer_RegisterClientName = "EOS_AntiCheatServer_RegisterClient";
		private const string EOS_AntiCheatServer_RegisterEventName = "EOS_AntiCheatServer_RegisterEvent";
		private const string EOS_AntiCheatServer_RemoveNotifyClientActionRequiredName = "EOS_AntiCheatServer_RemoveNotifyClientActionRequired";
		private const string EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedName = "EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged";
		private const string EOS_AntiCheatServer_RemoveNotifyMessageToClientName = "EOS_AntiCheatServer_RemoveNotifyMessageToClient";
		private const string EOS_AntiCheatServer_SetClientDetailsName = "EOS_AntiCheatServer_SetClientDetails";
		private const string EOS_AntiCheatServer_SetClientNetworkStateName = "EOS_AntiCheatServer_SetClientNetworkState";
		private const string EOS_AntiCheatServer_SetGameSessionIdName = "EOS_AntiCheatServer_SetGameSessionId";
		private const string EOS_AntiCheatServer_UnprotectMessageName = "EOS_AntiCheatServer_UnprotectMessage";
		private const string EOS_AntiCheatServer_UnregisterClientName = "EOS_AntiCheatServer_UnregisterClient";
		private const string EOS_Auth_AddNotifyLoginStatusChangedName = "EOS_Auth_AddNotifyLoginStatusChanged";
		private const string EOS_Auth_CopyIdTokenName = "EOS_Auth_CopyIdToken";
		private const string EOS_Auth_CopyUserAuthTokenName = "EOS_Auth_CopyUserAuthToken";
		private const string EOS_Auth_DeletePersistentAuthName = "EOS_Auth_DeletePersistentAuth";
		private const string EOS_Auth_GetLoggedInAccountByIndexName = "EOS_Auth_GetLoggedInAccountByIndex";
		private const string EOS_Auth_GetLoggedInAccountsCountName = "EOS_Auth_GetLoggedInAccountsCount";
		private const string EOS_Auth_GetLoginStatusName = "EOS_Auth_GetLoginStatus";
		private const string EOS_Auth_GetMergedAccountByIndexName = "EOS_Auth_GetMergedAccountByIndex";
		private const string EOS_Auth_GetMergedAccountsCountName = "EOS_Auth_GetMergedAccountsCount";
		private const string EOS_Auth_GetSelectedAccountIdName = "EOS_Auth_GetSelectedAccountId";
		private const string EOS_Auth_IdToken_ReleaseName = "EOS_Auth_IdToken_Release";
		private const string EOS_Auth_LinkAccountName = "EOS_Auth_LinkAccount";
		private const string EOS_Auth_LoginName = "EOS_Auth_Login";
		private const string EOS_Auth_LogoutName = "EOS_Auth_Logout";
		private const string EOS_Auth_QueryIdTokenName = "EOS_Auth_QueryIdToken";
		private const string EOS_Auth_RemoveNotifyLoginStatusChangedName = "EOS_Auth_RemoveNotifyLoginStatusChanged";
		private const string EOS_Auth_Token_ReleaseName = "EOS_Auth_Token_Release";
		private const string EOS_Auth_VerifyIdTokenName = "EOS_Auth_VerifyIdToken";
		private const string EOS_Auth_VerifyUserAuthName = "EOS_Auth_VerifyUserAuth";
		private const string EOS_ByteArray_ToStringName = "EOS_ByteArray_ToString";
		private const string EOS_Connect_AddNotifyAuthExpirationName = "EOS_Connect_AddNotifyAuthExpiration";
		private const string EOS_Connect_AddNotifyLoginStatusChangedName = "EOS_Connect_AddNotifyLoginStatusChanged";
		private const string EOS_Connect_CopyIdTokenName = "EOS_Connect_CopyIdToken";
		private const string EOS_Connect_CopyProductUserExternalAccountByAccountIdName = "EOS_Connect_CopyProductUserExternalAccountByAccountId";
		private const string EOS_Connect_CopyProductUserExternalAccountByAccountTypeName = "EOS_Connect_CopyProductUserExternalAccountByAccountType";
		private const string EOS_Connect_CopyProductUserExternalAccountByIndexName = "EOS_Connect_CopyProductUserExternalAccountByIndex";
		private const string EOS_Connect_CopyProductUserInfoName = "EOS_Connect_CopyProductUserInfo";
		private const string EOS_Connect_CreateDeviceIdName = "EOS_Connect_CreateDeviceId";
		private const string EOS_Connect_CreateUserName = "EOS_Connect_CreateUser";
		private const string EOS_Connect_DeleteDeviceIdName = "EOS_Connect_DeleteDeviceId";
		private const string EOS_Connect_ExternalAccountInfo_ReleaseName = "EOS_Connect_ExternalAccountInfo_Release";
		private const string EOS_Connect_GetExternalAccountMappingName = "EOS_Connect_GetExternalAccountMapping";
		private const string EOS_Connect_GetLoggedInUserByIndexName = "EOS_Connect_GetLoggedInUserByIndex";
		private const string EOS_Connect_GetLoggedInUsersCountName = "EOS_Connect_GetLoggedInUsersCount";
		private const string EOS_Connect_GetLoginStatusName = "EOS_Connect_GetLoginStatus";
		private const string EOS_Connect_GetProductUserExternalAccountCountName = "EOS_Connect_GetProductUserExternalAccountCount";
		private const string EOS_Connect_GetProductUserIdMappingName = "EOS_Connect_GetProductUserIdMapping";
		private const string EOS_Connect_IdToken_ReleaseName = "EOS_Connect_IdToken_Release";
		private const string EOS_Connect_LinkAccountName = "EOS_Connect_LinkAccount";
		private const string EOS_Connect_LoginName = "EOS_Connect_Login";
		private const string EOS_Connect_LogoutName = "EOS_Connect_Logout";
		private const string EOS_Connect_QueryExternalAccountMappingsName = "EOS_Connect_QueryExternalAccountMappings";
		private const string EOS_Connect_QueryProductUserIdMappingsName = "EOS_Connect_QueryProductUserIdMappings";
		private const string EOS_Connect_RemoveNotifyAuthExpirationName = "EOS_Connect_RemoveNotifyAuthExpiration";
		private const string EOS_Connect_RemoveNotifyLoginStatusChangedName = "EOS_Connect_RemoveNotifyLoginStatusChanged";
		private const string EOS_Connect_TransferDeviceIdAccountName = "EOS_Connect_TransferDeviceIdAccount";
		private const string EOS_Connect_UnlinkAccountName = "EOS_Connect_UnlinkAccount";
		private const string EOS_Connect_VerifyIdTokenName = "EOS_Connect_VerifyIdToken";
		private const string EOS_ContinuanceToken_ToStringName = "EOS_ContinuanceToken_ToString";
		private const string EOS_CustomInvites_AcceptRequestToJoinName = "EOS_CustomInvites_AcceptRequestToJoin";
		private const string EOS_CustomInvites_AddNotifyCustomInviteAcceptedName = "EOS_CustomInvites_AddNotifyCustomInviteAccepted";
		private const string EOS_CustomInvites_AddNotifyCustomInviteReceivedName = "EOS_CustomInvites_AddNotifyCustomInviteReceived";
		private const string EOS_CustomInvites_AddNotifyCustomInviteRejectedName = "EOS_CustomInvites_AddNotifyCustomInviteRejected";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinAcceptedName = "EOS_CustomInvites_AddNotifyRequestToJoinAccepted";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinReceivedName = "EOS_CustomInvites_AddNotifyRequestToJoinReceived";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinRejectedName = "EOS_CustomInvites_AddNotifyRequestToJoinRejected";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedName = "EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived";
		private const string EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedName = "EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested";
		private const string EOS_CustomInvites_FinalizeInviteName = "EOS_CustomInvites_FinalizeInvite";
		private const string EOS_CustomInvites_RejectRequestToJoinName = "EOS_CustomInvites_RejectRequestToJoin";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedName = "EOS_CustomInvites_RemoveNotifyCustomInviteAccepted";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteReceivedName = "EOS_CustomInvites_RemoveNotifyCustomInviteReceived";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteRejectedName = "EOS_CustomInvites_RemoveNotifyCustomInviteRejected";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedName = "EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedName = "EOS_CustomInvites_RemoveNotifyRequestToJoinReceived";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedName = "EOS_CustomInvites_RemoveNotifyRequestToJoinRejected";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedName = "EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived";
		private const string EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedName = "EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested";
		private const string EOS_CustomInvites_SendCustomInviteName = "EOS_CustomInvites_SendCustomInvite";
		private const string EOS_CustomInvites_SendRequestToJoinName = "EOS_CustomInvites_SendRequestToJoin";
		private const string EOS_CustomInvites_SetCustomInviteName = "EOS_CustomInvites_SetCustomInvite";
		private const string EOS_EApplicationStatus_ToStringName = "EOS_EApplicationStatus_ToString";
		private const string EOS_ENetworkStatus_ToStringName = "EOS_ENetworkStatus_ToString";
		private const string EOS_EResult_IsOperationCompleteName = "EOS_EResult_IsOperationComplete";
		private const string EOS_EResult_ToStringName = "EOS_EResult_ToString";
		private const string EOS_Ecom_CatalogItem_ReleaseName = "EOS_Ecom_CatalogItem_Release";
		private const string EOS_Ecom_CatalogOffer_ReleaseName = "EOS_Ecom_CatalogOffer_Release";
		private const string EOS_Ecom_CatalogRelease_ReleaseName = "EOS_Ecom_CatalogRelease_Release";
		private const string EOS_Ecom_CheckoutName = "EOS_Ecom_Checkout";
		private const string EOS_Ecom_CopyEntitlementByIdName = "EOS_Ecom_CopyEntitlementById";
		private const string EOS_Ecom_CopyEntitlementByIndexName = "EOS_Ecom_CopyEntitlementByIndex";
		private const string EOS_Ecom_CopyEntitlementByNameAndIndexName = "EOS_Ecom_CopyEntitlementByNameAndIndex";
		private const string EOS_Ecom_CopyItemByIdName = "EOS_Ecom_CopyItemById";
		private const string EOS_Ecom_CopyItemImageInfoByIndexName = "EOS_Ecom_CopyItemImageInfoByIndex";
		private const string EOS_Ecom_CopyItemReleaseByIndexName = "EOS_Ecom_CopyItemReleaseByIndex";
		private const string EOS_Ecom_CopyLastRedeemedEntitlementByIndexName = "EOS_Ecom_CopyLastRedeemedEntitlementByIndex";
		private const string EOS_Ecom_CopyOfferByIdName = "EOS_Ecom_CopyOfferById";
		private const string EOS_Ecom_CopyOfferByIndexName = "EOS_Ecom_CopyOfferByIndex";
		private const string EOS_Ecom_CopyOfferImageInfoByIndexName = "EOS_Ecom_CopyOfferImageInfoByIndex";
		private const string EOS_Ecom_CopyOfferItemByIndexName = "EOS_Ecom_CopyOfferItemByIndex";
		private const string EOS_Ecom_CopyTransactionByIdName = "EOS_Ecom_CopyTransactionById";
		private const string EOS_Ecom_CopyTransactionByIndexName = "EOS_Ecom_CopyTransactionByIndex";
		private const string EOS_Ecom_Entitlement_ReleaseName = "EOS_Ecom_Entitlement_Release";
		private const string EOS_Ecom_GetEntitlementsByNameCountName = "EOS_Ecom_GetEntitlementsByNameCount";
		private const string EOS_Ecom_GetEntitlementsCountName = "EOS_Ecom_GetEntitlementsCount";
		private const string EOS_Ecom_GetItemImageInfoCountName = "EOS_Ecom_GetItemImageInfoCount";
		private const string EOS_Ecom_GetItemReleaseCountName = "EOS_Ecom_GetItemReleaseCount";
		private const string EOS_Ecom_GetLastRedeemedEntitlementsCountName = "EOS_Ecom_GetLastRedeemedEntitlementsCount";
		private const string EOS_Ecom_GetOfferCountName = "EOS_Ecom_GetOfferCount";
		private const string EOS_Ecom_GetOfferImageInfoCountName = "EOS_Ecom_GetOfferImageInfoCount";
		private const string EOS_Ecom_GetOfferItemCountName = "EOS_Ecom_GetOfferItemCount";
		private const string EOS_Ecom_GetTransactionCountName = "EOS_Ecom_GetTransactionCount";
		private const string EOS_Ecom_KeyImageInfo_ReleaseName = "EOS_Ecom_KeyImageInfo_Release";
		private const string EOS_Ecom_QueryEntitlementTokenName = "EOS_Ecom_QueryEntitlementToken";
		private const string EOS_Ecom_QueryEntitlementsName = "EOS_Ecom_QueryEntitlements";
		private const string EOS_Ecom_QueryOffersName = "EOS_Ecom_QueryOffers";
		private const string EOS_Ecom_QueryOwnershipName = "EOS_Ecom_QueryOwnership";
		private const string EOS_Ecom_QueryOwnershipBySandboxIdsName = "EOS_Ecom_QueryOwnershipBySandboxIds";
		private const string EOS_Ecom_QueryOwnershipTokenName = "EOS_Ecom_QueryOwnershipToken";
		private const string EOS_Ecom_RedeemEntitlementsName = "EOS_Ecom_RedeemEntitlements";
		private const string EOS_Ecom_Transaction_CopyEntitlementByIndexName = "EOS_Ecom_Transaction_CopyEntitlementByIndex";
		private const string EOS_Ecom_Transaction_GetEntitlementsCountName = "EOS_Ecom_Transaction_GetEntitlementsCount";
		private const string EOS_Ecom_Transaction_GetTransactionIdName = "EOS_Ecom_Transaction_GetTransactionId";
		private const string EOS_Ecom_Transaction_ReleaseName = "EOS_Ecom_Transaction_Release";
		private const string EOS_EpicAccountId_FromStringName = "EOS_EpicAccountId_FromString";
		private const string EOS_EpicAccountId_IsValidName = "EOS_EpicAccountId_IsValid";
		private const string EOS_EpicAccountId_ToStringName = "EOS_EpicAccountId_ToString";
		private const string EOS_Friends_AcceptInviteName = "EOS_Friends_AcceptInvite";
		private const string EOS_Friends_AddNotifyBlockedUsersUpdateName = "EOS_Friends_AddNotifyBlockedUsersUpdate";
		private const string EOS_Friends_AddNotifyFriendsUpdateName = "EOS_Friends_AddNotifyFriendsUpdate";
		private const string EOS_Friends_GetBlockedUserAtIndexName = "EOS_Friends_GetBlockedUserAtIndex";
		private const string EOS_Friends_GetBlockedUsersCountName = "EOS_Friends_GetBlockedUsersCount";
		private const string EOS_Friends_GetFriendAtIndexName = "EOS_Friends_GetFriendAtIndex";
		private const string EOS_Friends_GetFriendsCountName = "EOS_Friends_GetFriendsCount";
		private const string EOS_Friends_GetStatusName = "EOS_Friends_GetStatus";
		private const string EOS_Friends_QueryFriendsName = "EOS_Friends_QueryFriends";
		private const string EOS_Friends_RejectInviteName = "EOS_Friends_RejectInvite";
		private const string EOS_Friends_RemoveNotifyBlockedUsersUpdateName = "EOS_Friends_RemoveNotifyBlockedUsersUpdate";
		private const string EOS_Friends_RemoveNotifyFriendsUpdateName = "EOS_Friends_RemoveNotifyFriendsUpdate";
		private const string EOS_Friends_SendInviteName = "EOS_Friends_SendInvite";
		private const string EOS_GetVersionName = "EOS_GetVersion";
		private const string EOS_InitializeName = "EOS_Initialize";
		private const string EOS_IntegratedPlatformOptionsContainer_AddName = "EOS_IntegratedPlatformOptionsContainer_Add";
		private const string EOS_IntegratedPlatformOptionsContainer_ReleaseName = "EOS_IntegratedPlatformOptionsContainer_Release";
		private const string EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedName = "EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged";
		private const string EOS_IntegratedPlatform_ClearUserPreLogoutCallbackName = "EOS_IntegratedPlatform_ClearUserPreLogoutCallback";
		private const string EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerName = "EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer";
		private const string EOS_IntegratedPlatform_FinalizeDeferredUserLogoutName = "EOS_IntegratedPlatform_FinalizeDeferredUserLogout";
		private const string EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedName = "EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged";
		private const string EOS_IntegratedPlatform_SetUserLoginStatusName = "EOS_IntegratedPlatform_SetUserLoginStatus";
		private const string EOS_IntegratedPlatform_SetUserPreLogoutCallbackName = "EOS_IntegratedPlatform_SetUserPreLogoutCallback";
		private const string EOS_KWS_AddNotifyPermissionsUpdateReceivedName = "EOS_KWS_AddNotifyPermissionsUpdateReceived";
		private const string EOS_KWS_CopyPermissionByIndexName = "EOS_KWS_CopyPermissionByIndex";
		private const string EOS_KWS_CreateUserName = "EOS_KWS_CreateUser";
		private const string EOS_KWS_GetPermissionByKeyName = "EOS_KWS_GetPermissionByKey";
		private const string EOS_KWS_GetPermissionsCountName = "EOS_KWS_GetPermissionsCount";
		private const string EOS_KWS_PermissionStatus_ReleaseName = "EOS_KWS_PermissionStatus_Release";
		private const string EOS_KWS_QueryAgeGateName = "EOS_KWS_QueryAgeGate";
		private const string EOS_KWS_QueryPermissionsName = "EOS_KWS_QueryPermissions";
		private const string EOS_KWS_RemoveNotifyPermissionsUpdateReceivedName = "EOS_KWS_RemoveNotifyPermissionsUpdateReceived";
		private const string EOS_KWS_RequestPermissionsName = "EOS_KWS_RequestPermissions";
		private const string EOS_KWS_UpdateParentEmailName = "EOS_KWS_UpdateParentEmail";
		private const string EOS_Leaderboards_CopyLeaderboardDefinitionByIndexName = "EOS_Leaderboards_CopyLeaderboardDefinitionByIndex";
		private const string EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdName = "EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId";
		private const string EOS_Leaderboards_CopyLeaderboardRecordByIndexName = "EOS_Leaderboards_CopyLeaderboardRecordByIndex";
		private const string EOS_Leaderboards_CopyLeaderboardRecordByUserIdName = "EOS_Leaderboards_CopyLeaderboardRecordByUserId";
		private const string EOS_Leaderboards_CopyLeaderboardUserScoreByIndexName = "EOS_Leaderboards_CopyLeaderboardUserScoreByIndex";
		private const string EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdName = "EOS_Leaderboards_CopyLeaderboardUserScoreByUserId";
		private const string EOS_Leaderboards_Definition_ReleaseName = "EOS_Leaderboards_Definition_Release";
		private const string EOS_Leaderboards_GetLeaderboardDefinitionCountName = "EOS_Leaderboards_GetLeaderboardDefinitionCount";
		private const string EOS_Leaderboards_GetLeaderboardRecordCountName = "EOS_Leaderboards_GetLeaderboardRecordCount";
		private const string EOS_Leaderboards_GetLeaderboardUserScoreCountName = "EOS_Leaderboards_GetLeaderboardUserScoreCount";
		private const string EOS_Leaderboards_LeaderboardRecord_ReleaseName = "EOS_Leaderboards_LeaderboardRecord_Release";
		private const string EOS_Leaderboards_LeaderboardUserScore_ReleaseName = "EOS_Leaderboards_LeaderboardUserScore_Release";
		private const string EOS_Leaderboards_QueryLeaderboardDefinitionsName = "EOS_Leaderboards_QueryLeaderboardDefinitions";
		private const string EOS_Leaderboards_QueryLeaderboardRanksName = "EOS_Leaderboards_QueryLeaderboardRanks";
		private const string EOS_Leaderboards_QueryLeaderboardUserScoresName = "EOS_Leaderboards_QueryLeaderboardUserScores";
		private const string EOS_LobbyDetails_CopyAttributeByIndexName = "EOS_LobbyDetails_CopyAttributeByIndex";
		private const string EOS_LobbyDetails_CopyAttributeByKeyName = "EOS_LobbyDetails_CopyAttributeByKey";
		private const string EOS_LobbyDetails_CopyInfoName = "EOS_LobbyDetails_CopyInfo";
		private const string EOS_LobbyDetails_CopyMemberAttributeByIndexName = "EOS_LobbyDetails_CopyMemberAttributeByIndex";
		private const string EOS_LobbyDetails_CopyMemberAttributeByKeyName = "EOS_LobbyDetails_CopyMemberAttributeByKey";
		private const string EOS_LobbyDetails_CopyMemberInfoName = "EOS_LobbyDetails_CopyMemberInfo";
		private const string EOS_LobbyDetails_GetAttributeCountName = "EOS_LobbyDetails_GetAttributeCount";
		private const string EOS_LobbyDetails_GetLobbyOwnerName = "EOS_LobbyDetails_GetLobbyOwner";
		private const string EOS_LobbyDetails_GetMemberAttributeCountName = "EOS_LobbyDetails_GetMemberAttributeCount";
		private const string EOS_LobbyDetails_GetMemberByIndexName = "EOS_LobbyDetails_GetMemberByIndex";
		private const string EOS_LobbyDetails_GetMemberCountName = "EOS_LobbyDetails_GetMemberCount";
		private const string EOS_LobbyDetails_Info_ReleaseName = "EOS_LobbyDetails_Info_Release";
		private const string EOS_LobbyDetails_MemberInfo_ReleaseName = "EOS_LobbyDetails_MemberInfo_Release";
		private const string EOS_LobbyDetails_ReleaseName = "EOS_LobbyDetails_Release";
		private const string EOS_LobbyModification_AddAttributeName = "EOS_LobbyModification_AddAttribute";
		private const string EOS_LobbyModification_AddMemberAttributeName = "EOS_LobbyModification_AddMemberAttribute";
		private const string EOS_LobbyModification_ReleaseName = "EOS_LobbyModification_Release";
		private const string EOS_LobbyModification_RemoveAttributeName = "EOS_LobbyModification_RemoveAttribute";
		private const string EOS_LobbyModification_RemoveMemberAttributeName = "EOS_LobbyModification_RemoveMemberAttribute";
		private const string EOS_LobbyModification_SetAllowedPlatformIdsName = "EOS_LobbyModification_SetAllowedPlatformIds";
		private const string EOS_LobbyModification_SetBucketIdName = "EOS_LobbyModification_SetBucketId";
		private const string EOS_LobbyModification_SetInvitesAllowedName = "EOS_LobbyModification_SetInvitesAllowed";
		private const string EOS_LobbyModification_SetMaxMembersName = "EOS_LobbyModification_SetMaxMembers";
		private const string EOS_LobbyModification_SetPermissionLevelName = "EOS_LobbyModification_SetPermissionLevel";
		private const string EOS_LobbySearch_CopySearchResultByIndexName = "EOS_LobbySearch_CopySearchResultByIndex";
		private const string EOS_LobbySearch_FindName = "EOS_LobbySearch_Find";
		private const string EOS_LobbySearch_GetSearchResultCountName = "EOS_LobbySearch_GetSearchResultCount";
		private const string EOS_LobbySearch_ReleaseName = "EOS_LobbySearch_Release";
		private const string EOS_LobbySearch_RemoveParameterName = "EOS_LobbySearch_RemoveParameter";
		private const string EOS_LobbySearch_SetLobbyIdName = "EOS_LobbySearch_SetLobbyId";
		private const string EOS_LobbySearch_SetMaxResultsName = "EOS_LobbySearch_SetMaxResults";
		private const string EOS_LobbySearch_SetParameterName = "EOS_LobbySearch_SetParameter";
		private const string EOS_LobbySearch_SetTargetUserIdName = "EOS_LobbySearch_SetTargetUserId";
		private const string EOS_Lobby_AddNotifyJoinLobbyAcceptedName = "EOS_Lobby_AddNotifyJoinLobbyAccepted";
		private const string EOS_Lobby_AddNotifyLeaveLobbyRequestedName = "EOS_Lobby_AddNotifyLeaveLobbyRequested";
		private const string EOS_Lobby_AddNotifyLobbyInviteAcceptedName = "EOS_Lobby_AddNotifyLobbyInviteAccepted";
		private const string EOS_Lobby_AddNotifyLobbyInviteReceivedName = "EOS_Lobby_AddNotifyLobbyInviteReceived";
		private const string EOS_Lobby_AddNotifyLobbyInviteRejectedName = "EOS_Lobby_AddNotifyLobbyInviteRejected";
		private const string EOS_Lobby_AddNotifyLobbyMemberStatusReceivedName = "EOS_Lobby_AddNotifyLobbyMemberStatusReceived";
		private const string EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedName = "EOS_Lobby_AddNotifyLobbyMemberUpdateReceived";
		private const string EOS_Lobby_AddNotifyLobbyUpdateReceivedName = "EOS_Lobby_AddNotifyLobbyUpdateReceived";
		private const string EOS_Lobby_AddNotifyRTCRoomConnectionChangedName = "EOS_Lobby_AddNotifyRTCRoomConnectionChanged";
		private const string EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedName = "EOS_Lobby_AddNotifySendLobbyNativeInviteRequested";
		private const string EOS_Lobby_Attribute_ReleaseName = "EOS_Lobby_Attribute_Release";
		private const string EOS_Lobby_CopyLobbyDetailsHandleName = "EOS_Lobby_CopyLobbyDetailsHandle";
		private const string EOS_Lobby_CopyLobbyDetailsHandleByInviteIdName = "EOS_Lobby_CopyLobbyDetailsHandleByInviteId";
		private const string EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdName = "EOS_Lobby_CopyLobbyDetailsHandleByUiEventId";
		private const string EOS_Lobby_CreateLobbyName = "EOS_Lobby_CreateLobby";
		private const string EOS_Lobby_CreateLobbySearchName = "EOS_Lobby_CreateLobbySearch";
		private const string EOS_Lobby_DestroyLobbyName = "EOS_Lobby_DestroyLobby";
		private const string EOS_Lobby_GetConnectStringName = "EOS_Lobby_GetConnectString";
		private const string EOS_Lobby_GetInviteCountName = "EOS_Lobby_GetInviteCount";
		private const string EOS_Lobby_GetInviteIdByIndexName = "EOS_Lobby_GetInviteIdByIndex";
		private const string EOS_Lobby_GetRTCRoomNameName = "EOS_Lobby_GetRTCRoomName";
		private const string EOS_Lobby_HardMuteMemberName = "EOS_Lobby_HardMuteMember";
		private const string EOS_Lobby_IsRTCRoomConnectedName = "EOS_Lobby_IsRTCRoomConnected";
		private const string EOS_Lobby_JoinLobbyName = "EOS_Lobby_JoinLobby";
		private const string EOS_Lobby_JoinLobbyByIdName = "EOS_Lobby_JoinLobbyById";
		private const string EOS_Lobby_JoinRTCRoomName = "EOS_Lobby_JoinRTCRoom";
		private const string EOS_Lobby_KickMemberName = "EOS_Lobby_KickMember";
		private const string EOS_Lobby_LeaveLobbyName = "EOS_Lobby_LeaveLobby";
		private const string EOS_Lobby_LeaveRTCRoomName = "EOS_Lobby_LeaveRTCRoom";
		private const string EOS_Lobby_ParseConnectStringName = "EOS_Lobby_ParseConnectString";
		private const string EOS_Lobby_PromoteMemberName = "EOS_Lobby_PromoteMember";
		private const string EOS_Lobby_QueryInvitesName = "EOS_Lobby_QueryInvites";
		private const string EOS_Lobby_RejectInviteName = "EOS_Lobby_RejectInvite";
		private const string EOS_Lobby_RemoveNotifyJoinLobbyAcceptedName = "EOS_Lobby_RemoveNotifyJoinLobbyAccepted";
		private const string EOS_Lobby_RemoveNotifyLeaveLobbyRequestedName = "EOS_Lobby_RemoveNotifyLeaveLobbyRequested";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteAcceptedName = "EOS_Lobby_RemoveNotifyLobbyInviteAccepted";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteReceivedName = "EOS_Lobby_RemoveNotifyLobbyInviteReceived";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteRejectedName = "EOS_Lobby_RemoveNotifyLobbyInviteRejected";
		private const string EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedName = "EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived";
		private const string EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedName = "EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived";
		private const string EOS_Lobby_RemoveNotifyLobbyUpdateReceivedName = "EOS_Lobby_RemoveNotifyLobbyUpdateReceived";
		private const string EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedName = "EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged";
		private const string EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedName = "EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested";
		private const string EOS_Lobby_SendInviteName = "EOS_Lobby_SendInvite";
		private const string EOS_Lobby_UpdateLobbyName = "EOS_Lobby_UpdateLobby";
		private const string EOS_Lobby_UpdateLobbyModificationName = "EOS_Lobby_UpdateLobbyModification";
		private const string EOS_Logging_SetCallbackName = "EOS_Logging_SetCallback";
		private const string EOS_Logging_SetLogLevelName = "EOS_Logging_SetLogLevel";
		private const string EOS_Metrics_BeginPlayerSessionName = "EOS_Metrics_BeginPlayerSession";
		private const string EOS_Metrics_EndPlayerSessionName = "EOS_Metrics_EndPlayerSession";
		private const string EOS_Mods_CopyModInfoName = "EOS_Mods_CopyModInfo";
		private const string EOS_Mods_EnumerateModsName = "EOS_Mods_EnumerateMods";
		private const string EOS_Mods_InstallModName = "EOS_Mods_InstallMod";
		private const string EOS_Mods_ModInfo_ReleaseName = "EOS_Mods_ModInfo_Release";
		private const string EOS_Mods_UninstallModName = "EOS_Mods_UninstallMod";
		private const string EOS_Mods_UpdateModName = "EOS_Mods_UpdateMod";
		private const string EOS_P2P_AcceptConnectionName = "EOS_P2P_AcceptConnection";
		private const string EOS_P2P_AddNotifyIncomingPacketQueueFullName = "EOS_P2P_AddNotifyIncomingPacketQueueFull";
		private const string EOS_P2P_AddNotifyPeerConnectionClosedName = "EOS_P2P_AddNotifyPeerConnectionClosed";
		private const string EOS_P2P_AddNotifyPeerConnectionEstablishedName = "EOS_P2P_AddNotifyPeerConnectionEstablished";
		private const string EOS_P2P_AddNotifyPeerConnectionInterruptedName = "EOS_P2P_AddNotifyPeerConnectionInterrupted";
		private const string EOS_P2P_AddNotifyPeerConnectionRequestName = "EOS_P2P_AddNotifyPeerConnectionRequest";
		private const string EOS_P2P_ClearPacketQueueName = "EOS_P2P_ClearPacketQueue";
		private const string EOS_P2P_CloseConnectionName = "EOS_P2P_CloseConnection";
		private const string EOS_P2P_CloseConnectionsName = "EOS_P2P_CloseConnections";
		private const string EOS_P2P_GetNATTypeName = "EOS_P2P_GetNATType";
		private const string EOS_P2P_GetNextReceivedPacketSizeName = "EOS_P2P_GetNextReceivedPacketSize";
		private const string EOS_P2P_GetPacketQueueInfoName = "EOS_P2P_GetPacketQueueInfo";
		private const string EOS_P2P_GetPortRangeName = "EOS_P2P_GetPortRange";
		private const string EOS_P2P_GetRelayControlName = "EOS_P2P_GetRelayControl";
		private const string EOS_P2P_QueryNATTypeName = "EOS_P2P_QueryNATType";
		private const string EOS_P2P_ReceivePacketName = "EOS_P2P_ReceivePacket";
		private const string EOS_P2P_RemoveNotifyIncomingPacketQueueFullName = "EOS_P2P_RemoveNotifyIncomingPacketQueueFull";
		private const string EOS_P2P_RemoveNotifyPeerConnectionClosedName = "EOS_P2P_RemoveNotifyPeerConnectionClosed";
		private const string EOS_P2P_RemoveNotifyPeerConnectionEstablishedName = "EOS_P2P_RemoveNotifyPeerConnectionEstablished";
		private const string EOS_P2P_RemoveNotifyPeerConnectionInterruptedName = "EOS_P2P_RemoveNotifyPeerConnectionInterrupted";
		private const string EOS_P2P_RemoveNotifyPeerConnectionRequestName = "EOS_P2P_RemoveNotifyPeerConnectionRequest";
		private const string EOS_P2P_SendPacketName = "EOS_P2P_SendPacket";
		private const string EOS_P2P_SetPacketQueueSizeName = "EOS_P2P_SetPacketQueueSize";
		private const string EOS_P2P_SetPortRangeName = "EOS_P2P_SetPortRange";
		private const string EOS_P2P_SetRelayControlName = "EOS_P2P_SetRelayControl";
		private const string EOS_Platform_CheckForLauncherAndRestartName = "EOS_Platform_CheckForLauncherAndRestart";
		private const string EOS_Platform_CreateName = "EOS_Platform_Create";
		private const string EOS_Platform_GetAchievementsInterfaceName = "EOS_Platform_GetAchievementsInterface";
		private const string EOS_Platform_GetActiveCountryCodeName = "EOS_Platform_GetActiveCountryCode";
		private const string EOS_Platform_GetActiveLocaleCodeName = "EOS_Platform_GetActiveLocaleCode";
		private const string EOS_Platform_GetAntiCheatClientInterfaceName = "EOS_Platform_GetAntiCheatClientInterface";
		private const string EOS_Platform_GetAntiCheatServerInterfaceName = "EOS_Platform_GetAntiCheatServerInterface";
		private const string EOS_Platform_GetApplicationStatusName = "EOS_Platform_GetApplicationStatus";
		private const string EOS_Platform_GetAuthInterfaceName = "EOS_Platform_GetAuthInterface";
		private const string EOS_Platform_GetConnectInterfaceName = "EOS_Platform_GetConnectInterface";
		private const string EOS_Platform_GetCustomInvitesInterfaceName = "EOS_Platform_GetCustomInvitesInterface";
		private const string EOS_Platform_GetDesktopCrossplayStatusName = "EOS_Platform_GetDesktopCrossplayStatus";
		private const string EOS_Platform_GetEcomInterfaceName = "EOS_Platform_GetEcomInterface";
		private const string EOS_Platform_GetFriendsInterfaceName = "EOS_Platform_GetFriendsInterface";
		private const string EOS_Platform_GetIntegratedPlatformInterfaceName = "EOS_Platform_GetIntegratedPlatformInterface";
		private const string EOS_Platform_GetKWSInterfaceName = "EOS_Platform_GetKWSInterface";
		private const string EOS_Platform_GetLeaderboardsInterfaceName = "EOS_Platform_GetLeaderboardsInterface";
		private const string EOS_Platform_GetLobbyInterfaceName = "EOS_Platform_GetLobbyInterface";
		private const string EOS_Platform_GetMetricsInterfaceName = "EOS_Platform_GetMetricsInterface";
		private const string EOS_Platform_GetModsInterfaceName = "EOS_Platform_GetModsInterface";
		private const string EOS_Platform_GetNetworkStatusName = "EOS_Platform_GetNetworkStatus";
		private const string EOS_Platform_GetOverrideCountryCodeName = "EOS_Platform_GetOverrideCountryCode";
		private const string EOS_Platform_GetOverrideLocaleCodeName = "EOS_Platform_GetOverrideLocaleCode";
		private const string EOS_Platform_GetP2PInterfaceName = "EOS_Platform_GetP2PInterface";
		private const string EOS_Platform_GetPlayerDataStorageInterfaceName = "EOS_Platform_GetPlayerDataStorageInterface";
		private const string EOS_Platform_GetPresenceInterfaceName = "EOS_Platform_GetPresenceInterface";
		private const string EOS_Platform_GetProgressionSnapshotInterfaceName = "EOS_Platform_GetProgressionSnapshotInterface";
		private const string EOS_Platform_GetRTCAdminInterfaceName = "EOS_Platform_GetRTCAdminInterface";
		private const string EOS_Platform_GetRTCInterfaceName = "EOS_Platform_GetRTCInterface";
		private const string EOS_Platform_GetReportsInterfaceName = "EOS_Platform_GetReportsInterface";
		private const string EOS_Platform_GetSanctionsInterfaceName = "EOS_Platform_GetSanctionsInterface";
		private const string EOS_Platform_GetSessionsInterfaceName = "EOS_Platform_GetSessionsInterface";
		private const string EOS_Platform_GetStatsInterfaceName = "EOS_Platform_GetStatsInterface";
		private const string EOS_Platform_GetTitleStorageInterfaceName = "EOS_Platform_GetTitleStorageInterface";
		private const string EOS_Platform_GetUIInterfaceName = "EOS_Platform_GetUIInterface";
		private const string EOS_Platform_GetUserInfoInterfaceName = "EOS_Platform_GetUserInfoInterface";
		private const string EOS_Platform_ReleaseName = "EOS_Platform_Release";
		private const string EOS_Platform_SetApplicationStatusName = "EOS_Platform_SetApplicationStatus";
		private const string EOS_Platform_SetNetworkStatusName = "EOS_Platform_SetNetworkStatus";
		private const string EOS_Platform_SetOverrideCountryCodeName = "EOS_Platform_SetOverrideCountryCode";
		private const string EOS_Platform_SetOverrideLocaleCodeName = "EOS_Platform_SetOverrideLocaleCode";
		private const string EOS_Platform_TickName = "EOS_Platform_Tick";
		private const string EOS_PlayerDataStorageFileTransferRequest_CancelRequestName = "EOS_PlayerDataStorageFileTransferRequest_CancelRequest";
		private const string EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateName = "EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState";
		private const string EOS_PlayerDataStorageFileTransferRequest_GetFilenameName = "EOS_PlayerDataStorageFileTransferRequest_GetFilename";
		private const string EOS_PlayerDataStorageFileTransferRequest_ReleaseName = "EOS_PlayerDataStorageFileTransferRequest_Release";
		private const string EOS_PlayerDataStorage_CopyFileMetadataAtIndexName = "EOS_PlayerDataStorage_CopyFileMetadataAtIndex";
		private const string EOS_PlayerDataStorage_CopyFileMetadataByFilenameName = "EOS_PlayerDataStorage_CopyFileMetadataByFilename";
		private const string EOS_PlayerDataStorage_DeleteCacheName = "EOS_PlayerDataStorage_DeleteCache";
		private const string EOS_PlayerDataStorage_DeleteFileName = "EOS_PlayerDataStorage_DeleteFile";
		private const string EOS_PlayerDataStorage_DuplicateFileName = "EOS_PlayerDataStorage_DuplicateFile";
		private const string EOS_PlayerDataStorage_FileMetadata_ReleaseName = "EOS_PlayerDataStorage_FileMetadata_Release";
		private const string EOS_PlayerDataStorage_GetFileMetadataCountName = "EOS_PlayerDataStorage_GetFileMetadataCount";
		private const string EOS_PlayerDataStorage_QueryFileName = "EOS_PlayerDataStorage_QueryFile";
		private const string EOS_PlayerDataStorage_QueryFileListName = "EOS_PlayerDataStorage_QueryFileList";
		private const string EOS_PlayerDataStorage_ReadFileName = "EOS_PlayerDataStorage_ReadFile";
		private const string EOS_PlayerDataStorage_WriteFileName = "EOS_PlayerDataStorage_WriteFile";
		private const string EOS_PresenceModification_DeleteDataName = "EOS_PresenceModification_DeleteData";
		private const string EOS_PresenceModification_ReleaseName = "EOS_PresenceModification_Release";
		private const string EOS_PresenceModification_SetDataName = "EOS_PresenceModification_SetData";
		private const string EOS_PresenceModification_SetJoinInfoName = "EOS_PresenceModification_SetJoinInfo";
		private const string EOS_PresenceModification_SetRawRichTextName = "EOS_PresenceModification_SetRawRichText";
		private const string EOS_PresenceModification_SetStatusName = "EOS_PresenceModification_SetStatus";
		private const string EOS_Presence_AddNotifyJoinGameAcceptedName = "EOS_Presence_AddNotifyJoinGameAccepted";
		private const string EOS_Presence_AddNotifyOnPresenceChangedName = "EOS_Presence_AddNotifyOnPresenceChanged";
		private const string EOS_Presence_CopyPresenceName = "EOS_Presence_CopyPresence";
		private const string EOS_Presence_CreatePresenceModificationName = "EOS_Presence_CreatePresenceModification";
		private const string EOS_Presence_GetJoinInfoName = "EOS_Presence_GetJoinInfo";
		private const string EOS_Presence_HasPresenceName = "EOS_Presence_HasPresence";
		private const string EOS_Presence_Info_ReleaseName = "EOS_Presence_Info_Release";
		private const string EOS_Presence_QueryPresenceName = "EOS_Presence_QueryPresence";
		private const string EOS_Presence_RemoveNotifyJoinGameAcceptedName = "EOS_Presence_RemoveNotifyJoinGameAccepted";
		private const string EOS_Presence_RemoveNotifyOnPresenceChangedName = "EOS_Presence_RemoveNotifyOnPresenceChanged";
		private const string EOS_Presence_SetPresenceName = "EOS_Presence_SetPresence";
		private const string EOS_ProductUserId_FromStringName = "EOS_ProductUserId_FromString";
		private const string EOS_ProductUserId_IsValidName = "EOS_ProductUserId_IsValid";
		private const string EOS_ProductUserId_ToStringName = "EOS_ProductUserId_ToString";
		private const string EOS_ProgressionSnapshot_AddProgressionName = "EOS_ProgressionSnapshot_AddProgression";
		private const string EOS_ProgressionSnapshot_BeginSnapshotName = "EOS_ProgressionSnapshot_BeginSnapshot";
		private const string EOS_ProgressionSnapshot_DeleteSnapshotName = "EOS_ProgressionSnapshot_DeleteSnapshot";
		private const string EOS_ProgressionSnapshot_EndSnapshotName = "EOS_ProgressionSnapshot_EndSnapshot";
		private const string EOS_ProgressionSnapshot_SubmitSnapshotName = "EOS_ProgressionSnapshot_SubmitSnapshot";
		private const string EOS_RTCAdmin_CopyUserTokenByIndexName = "EOS_RTCAdmin_CopyUserTokenByIndex";
		private const string EOS_RTCAdmin_CopyUserTokenByUserIdName = "EOS_RTCAdmin_CopyUserTokenByUserId";
		private const string EOS_RTCAdmin_KickName = "EOS_RTCAdmin_Kick";
		private const string EOS_RTCAdmin_QueryJoinRoomTokenName = "EOS_RTCAdmin_QueryJoinRoomToken";
		private const string EOS_RTCAdmin_SetParticipantHardMuteName = "EOS_RTCAdmin_SetParticipantHardMute";
		private const string EOS_RTCAdmin_UserToken_ReleaseName = "EOS_RTCAdmin_UserToken_Release";
		private const string EOS_RTCAudio_AddNotifyAudioBeforeRenderName = "EOS_RTCAudio_AddNotifyAudioBeforeRender";
		private const string EOS_RTCAudio_AddNotifyAudioBeforeSendName = "EOS_RTCAudio_AddNotifyAudioBeforeSend";
		private const string EOS_RTCAudio_AddNotifyAudioDevicesChangedName = "EOS_RTCAudio_AddNotifyAudioDevicesChanged";
		private const string EOS_RTCAudio_AddNotifyAudioInputStateName = "EOS_RTCAudio_AddNotifyAudioInputState";
		private const string EOS_RTCAudio_AddNotifyAudioOutputStateName = "EOS_RTCAudio_AddNotifyAudioOutputState";
		private const string EOS_RTCAudio_AddNotifyParticipantUpdatedName = "EOS_RTCAudio_AddNotifyParticipantUpdated";
		private const string EOS_RTCAudio_CopyInputDeviceInformationByIndexName = "EOS_RTCAudio_CopyInputDeviceInformationByIndex";
		private const string EOS_RTCAudio_CopyOutputDeviceInformationByIndexName = "EOS_RTCAudio_CopyOutputDeviceInformationByIndex";
		private const string EOS_RTCAudio_GetAudioInputDeviceByIndexName = "EOS_RTCAudio_GetAudioInputDeviceByIndex";
		private const string EOS_RTCAudio_GetAudioInputDevicesCountName = "EOS_RTCAudio_GetAudioInputDevicesCount";
		private const string EOS_RTCAudio_GetAudioOutputDeviceByIndexName = "EOS_RTCAudio_GetAudioOutputDeviceByIndex";
		private const string EOS_RTCAudio_GetAudioOutputDevicesCountName = "EOS_RTCAudio_GetAudioOutputDevicesCount";
		private const string EOS_RTCAudio_GetInputDevicesCountName = "EOS_RTCAudio_GetInputDevicesCount";
		private const string EOS_RTCAudio_GetOutputDevicesCountName = "EOS_RTCAudio_GetOutputDevicesCount";
		private const string EOS_RTCAudio_InputDeviceInformation_ReleaseName = "EOS_RTCAudio_InputDeviceInformation_Release";
		private const string EOS_RTCAudio_OutputDeviceInformation_ReleaseName = "EOS_RTCAudio_OutputDeviceInformation_Release";
		private const string EOS_RTCAudio_QueryInputDevicesInformationName = "EOS_RTCAudio_QueryInputDevicesInformation";
		private const string EOS_RTCAudio_QueryOutputDevicesInformationName = "EOS_RTCAudio_QueryOutputDevicesInformation";
		private const string EOS_RTCAudio_RegisterPlatformAudioUserName = "EOS_RTCAudio_RegisterPlatformAudioUser";
		private const string EOS_RTCAudio_RegisterPlatformUserName = "EOS_RTCAudio_RegisterPlatformUser";
		private const string EOS_RTCAudio_RemoveNotifyAudioBeforeRenderName = "EOS_RTCAudio_RemoveNotifyAudioBeforeRender";
		private const string EOS_RTCAudio_RemoveNotifyAudioBeforeSendName = "EOS_RTCAudio_RemoveNotifyAudioBeforeSend";
		private const string EOS_RTCAudio_RemoveNotifyAudioDevicesChangedName = "EOS_RTCAudio_RemoveNotifyAudioDevicesChanged";
		private const string EOS_RTCAudio_RemoveNotifyAudioInputStateName = "EOS_RTCAudio_RemoveNotifyAudioInputState";
		private const string EOS_RTCAudio_RemoveNotifyAudioOutputStateName = "EOS_RTCAudio_RemoveNotifyAudioOutputState";
		private const string EOS_RTCAudio_RemoveNotifyParticipantUpdatedName = "EOS_RTCAudio_RemoveNotifyParticipantUpdated";
		private const string EOS_RTCAudio_SendAudioName = "EOS_RTCAudio_SendAudio";
		private const string EOS_RTCAudio_SetAudioInputSettingsName = "EOS_RTCAudio_SetAudioInputSettings";
		private const string EOS_RTCAudio_SetAudioOutputSettingsName = "EOS_RTCAudio_SetAudioOutputSettings";
		private const string EOS_RTCAudio_SetInputDeviceSettingsName = "EOS_RTCAudio_SetInputDeviceSettings";
		private const string EOS_RTCAudio_SetOutputDeviceSettingsName = "EOS_RTCAudio_SetOutputDeviceSettings";
		private const string EOS_RTCAudio_UnregisterPlatformAudioUserName = "EOS_RTCAudio_UnregisterPlatformAudioUser";
		private const string EOS_RTCAudio_UnregisterPlatformUserName = "EOS_RTCAudio_UnregisterPlatformUser";
		private const string EOS_RTCAudio_UpdateParticipantVolumeName = "EOS_RTCAudio_UpdateParticipantVolume";
		private const string EOS_RTCAudio_UpdateReceivingName = "EOS_RTCAudio_UpdateReceiving";
		private const string EOS_RTCAudio_UpdateReceivingVolumeName = "EOS_RTCAudio_UpdateReceivingVolume";
		private const string EOS_RTCAudio_UpdateSendingName = "EOS_RTCAudio_UpdateSending";
		private const string EOS_RTCAudio_UpdateSendingVolumeName = "EOS_RTCAudio_UpdateSendingVolume";
		private const string EOS_RTCData_AddNotifyDataReceivedName = "EOS_RTCData_AddNotifyDataReceived";
		private const string EOS_RTCData_AddNotifyParticipantUpdatedName = "EOS_RTCData_AddNotifyParticipantUpdated";
		private const string EOS_RTCData_RemoveNotifyDataReceivedName = "EOS_RTCData_RemoveNotifyDataReceived";
		private const string EOS_RTCData_RemoveNotifyParticipantUpdatedName = "EOS_RTCData_RemoveNotifyParticipantUpdated";
		private const string EOS_RTCData_SendDataName = "EOS_RTCData_SendData";
		private const string EOS_RTCData_UpdateReceivingName = "EOS_RTCData_UpdateReceiving";
		private const string EOS_RTCData_UpdateSendingName = "EOS_RTCData_UpdateSending";
		private const string EOS_RTC_AddNotifyDisconnectedName = "EOS_RTC_AddNotifyDisconnected";
		private const string EOS_RTC_AddNotifyParticipantStatusChangedName = "EOS_RTC_AddNotifyParticipantStatusChanged";
		private const string EOS_RTC_AddNotifyRoomStatisticsUpdatedName = "EOS_RTC_AddNotifyRoomStatisticsUpdated";
		private const string EOS_RTC_BlockParticipantName = "EOS_RTC_BlockParticipant";
		private const string EOS_RTC_GetAudioInterfaceName = "EOS_RTC_GetAudioInterface";
		private const string EOS_RTC_GetDataInterfaceName = "EOS_RTC_GetDataInterface";
		private const string EOS_RTC_JoinRoomName = "EOS_RTC_JoinRoom";
		private const string EOS_RTC_LeaveRoomName = "EOS_RTC_LeaveRoom";
		private const string EOS_RTC_RemoveNotifyDisconnectedName = "EOS_RTC_RemoveNotifyDisconnected";
		private const string EOS_RTC_RemoveNotifyParticipantStatusChangedName = "EOS_RTC_RemoveNotifyParticipantStatusChanged";
		private const string EOS_RTC_RemoveNotifyRoomStatisticsUpdatedName = "EOS_RTC_RemoveNotifyRoomStatisticsUpdated";
		private const string EOS_RTC_SetRoomSettingName = "EOS_RTC_SetRoomSetting";
		private const string EOS_RTC_SetSettingName = "EOS_RTC_SetSetting";
		private const string EOS_Reports_SendPlayerBehaviorReportName = "EOS_Reports_SendPlayerBehaviorReport";
		private const string EOS_Sanctions_CopyPlayerSanctionByIndexName = "EOS_Sanctions_CopyPlayerSanctionByIndex";
		private const string EOS_Sanctions_CreatePlayerSanctionAppealName = "EOS_Sanctions_CreatePlayerSanctionAppeal";
		private const string EOS_Sanctions_GetPlayerSanctionCountName = "EOS_Sanctions_GetPlayerSanctionCount";
		private const string EOS_Sanctions_PlayerSanction_ReleaseName = "EOS_Sanctions_PlayerSanction_Release";
		private const string EOS_Sanctions_QueryActivePlayerSanctionsName = "EOS_Sanctions_QueryActivePlayerSanctions";
		private const string EOS_SessionDetails_Attribute_ReleaseName = "EOS_SessionDetails_Attribute_Release";
		private const string EOS_SessionDetails_CopyInfoName = "EOS_SessionDetails_CopyInfo";
		private const string EOS_SessionDetails_CopySessionAttributeByIndexName = "EOS_SessionDetails_CopySessionAttributeByIndex";
		private const string EOS_SessionDetails_CopySessionAttributeByKeyName = "EOS_SessionDetails_CopySessionAttributeByKey";
		private const string EOS_SessionDetails_GetSessionAttributeCountName = "EOS_SessionDetails_GetSessionAttributeCount";
		private const string EOS_SessionDetails_Info_ReleaseName = "EOS_SessionDetails_Info_Release";
		private const string EOS_SessionDetails_ReleaseName = "EOS_SessionDetails_Release";
		private const string EOS_SessionModification_AddAttributeName = "EOS_SessionModification_AddAttribute";
		private const string EOS_SessionModification_ReleaseName = "EOS_SessionModification_Release";
		private const string EOS_SessionModification_RemoveAttributeName = "EOS_SessionModification_RemoveAttribute";
		private const string EOS_SessionModification_SetAllowedPlatformIdsName = "EOS_SessionModification_SetAllowedPlatformIds";
		private const string EOS_SessionModification_SetBucketIdName = "EOS_SessionModification_SetBucketId";
		private const string EOS_SessionModification_SetHostAddressName = "EOS_SessionModification_SetHostAddress";
		private const string EOS_SessionModification_SetInvitesAllowedName = "EOS_SessionModification_SetInvitesAllowed";
		private const string EOS_SessionModification_SetJoinInProgressAllowedName = "EOS_SessionModification_SetJoinInProgressAllowed";
		private const string EOS_SessionModification_SetMaxPlayersName = "EOS_SessionModification_SetMaxPlayers";
		private const string EOS_SessionModification_SetPermissionLevelName = "EOS_SessionModification_SetPermissionLevel";
		private const string EOS_SessionSearch_CopySearchResultByIndexName = "EOS_SessionSearch_CopySearchResultByIndex";
		private const string EOS_SessionSearch_FindName = "EOS_SessionSearch_Find";
		private const string EOS_SessionSearch_GetSearchResultCountName = "EOS_SessionSearch_GetSearchResultCount";
		private const string EOS_SessionSearch_ReleaseName = "EOS_SessionSearch_Release";
		private const string EOS_SessionSearch_RemoveParameterName = "EOS_SessionSearch_RemoveParameter";
		private const string EOS_SessionSearch_SetMaxResultsName = "EOS_SessionSearch_SetMaxResults";
		private const string EOS_SessionSearch_SetParameterName = "EOS_SessionSearch_SetParameter";
		private const string EOS_SessionSearch_SetSessionIdName = "EOS_SessionSearch_SetSessionId";
		private const string EOS_SessionSearch_SetTargetUserIdName = "EOS_SessionSearch_SetTargetUserId";
		private const string EOS_Sessions_AddNotifyJoinSessionAcceptedName = "EOS_Sessions_AddNotifyJoinSessionAccepted";
		private const string EOS_Sessions_AddNotifyLeaveSessionRequestedName = "EOS_Sessions_AddNotifyLeaveSessionRequested";
		private const string EOS_Sessions_AddNotifySendSessionNativeInviteRequestedName = "EOS_Sessions_AddNotifySendSessionNativeInviteRequested";
		private const string EOS_Sessions_AddNotifySessionInviteAcceptedName = "EOS_Sessions_AddNotifySessionInviteAccepted";
		private const string EOS_Sessions_AddNotifySessionInviteReceivedName = "EOS_Sessions_AddNotifySessionInviteReceived";
		private const string EOS_Sessions_AddNotifySessionInviteRejectedName = "EOS_Sessions_AddNotifySessionInviteRejected";
		private const string EOS_Sessions_CopyActiveSessionHandleName = "EOS_Sessions_CopyActiveSessionHandle";
		private const string EOS_Sessions_CopySessionHandleByInviteIdName = "EOS_Sessions_CopySessionHandleByInviteId";
		private const string EOS_Sessions_CopySessionHandleByUiEventIdName = "EOS_Sessions_CopySessionHandleByUiEventId";
		private const string EOS_Sessions_CopySessionHandleForPresenceName = "EOS_Sessions_CopySessionHandleForPresence";
		private const string EOS_Sessions_CreateSessionModificationName = "EOS_Sessions_CreateSessionModification";
		private const string EOS_Sessions_CreateSessionSearchName = "EOS_Sessions_CreateSessionSearch";
		private const string EOS_Sessions_DestroySessionName = "EOS_Sessions_DestroySession";
		private const string EOS_Sessions_DumpSessionStateName = "EOS_Sessions_DumpSessionState";
		private const string EOS_Sessions_EndSessionName = "EOS_Sessions_EndSession";
		private const string EOS_Sessions_GetInviteCountName = "EOS_Sessions_GetInviteCount";
		private const string EOS_Sessions_GetInviteIdByIndexName = "EOS_Sessions_GetInviteIdByIndex";
		private const string EOS_Sessions_IsUserInSessionName = "EOS_Sessions_IsUserInSession";
		private const string EOS_Sessions_JoinSessionName = "EOS_Sessions_JoinSession";
		private const string EOS_Sessions_QueryInvitesName = "EOS_Sessions_QueryInvites";
		private const string EOS_Sessions_RegisterPlayersName = "EOS_Sessions_RegisterPlayers";
		private const string EOS_Sessions_RejectInviteName = "EOS_Sessions_RejectInvite";
		private const string EOS_Sessions_RemoveNotifyJoinSessionAcceptedName = "EOS_Sessions_RemoveNotifyJoinSessionAccepted";
		private const string EOS_Sessions_RemoveNotifyLeaveSessionRequestedName = "EOS_Sessions_RemoveNotifyLeaveSessionRequested";
		private const string EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedName = "EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested";
		private const string EOS_Sessions_RemoveNotifySessionInviteAcceptedName = "EOS_Sessions_RemoveNotifySessionInviteAccepted";
		private const string EOS_Sessions_RemoveNotifySessionInviteReceivedName = "EOS_Sessions_RemoveNotifySessionInviteReceived";
		private const string EOS_Sessions_RemoveNotifySessionInviteRejectedName = "EOS_Sessions_RemoveNotifySessionInviteRejected";
		private const string EOS_Sessions_SendInviteName = "EOS_Sessions_SendInvite";
		private const string EOS_Sessions_StartSessionName = "EOS_Sessions_StartSession";
		private const string EOS_Sessions_UnregisterPlayersName = "EOS_Sessions_UnregisterPlayers";
		private const string EOS_Sessions_UpdateSessionName = "EOS_Sessions_UpdateSession";
		private const string EOS_Sessions_UpdateSessionModificationName = "EOS_Sessions_UpdateSessionModification";
		private const string EOS_ShutdownName = "EOS_Shutdown";
		private const string EOS_Stats_CopyStatByIndexName = "EOS_Stats_CopyStatByIndex";
		private const string EOS_Stats_CopyStatByNameName = "EOS_Stats_CopyStatByName";
		private const string EOS_Stats_GetStatsCountName = "EOS_Stats_GetStatsCount";
		private const string EOS_Stats_IngestStatName = "EOS_Stats_IngestStat";
		private const string EOS_Stats_QueryStatsName = "EOS_Stats_QueryStats";
		private const string EOS_Stats_Stat_ReleaseName = "EOS_Stats_Stat_Release";
		private const string EOS_TitleStorageFileTransferRequest_CancelRequestName = "EOS_TitleStorageFileTransferRequest_CancelRequest";
		private const string EOS_TitleStorageFileTransferRequest_GetFileRequestStateName = "EOS_TitleStorageFileTransferRequest_GetFileRequestState";
		private const string EOS_TitleStorageFileTransferRequest_GetFilenameName = "EOS_TitleStorageFileTransferRequest_GetFilename";
		private const string EOS_TitleStorageFileTransferRequest_ReleaseName = "EOS_TitleStorageFileTransferRequest_Release";
		private const string EOS_TitleStorage_CopyFileMetadataAtIndexName = "EOS_TitleStorage_CopyFileMetadataAtIndex";
		private const string EOS_TitleStorage_CopyFileMetadataByFilenameName = "EOS_TitleStorage_CopyFileMetadataByFilename";
		private const string EOS_TitleStorage_DeleteCacheName = "EOS_TitleStorage_DeleteCache";
		private const string EOS_TitleStorage_FileMetadata_ReleaseName = "EOS_TitleStorage_FileMetadata_Release";
		private const string EOS_TitleStorage_GetFileMetadataCountName = "EOS_TitleStorage_GetFileMetadataCount";
		private const string EOS_TitleStorage_QueryFileName = "EOS_TitleStorage_QueryFile";
		private const string EOS_TitleStorage_QueryFileListName = "EOS_TitleStorage_QueryFileList";
		private const string EOS_TitleStorage_ReadFileName = "EOS_TitleStorage_ReadFile";
		private const string EOS_UI_AcknowledgeEventIdName = "EOS_UI_AcknowledgeEventId";
		private const string EOS_UI_AddNotifyDisplaySettingsUpdatedName = "EOS_UI_AddNotifyDisplaySettingsUpdated";
		private const string EOS_UI_AddNotifyMemoryMonitorName = "EOS_UI_AddNotifyMemoryMonitor";
		private const string EOS_UI_GetFriendsExclusiveInputName = "EOS_UI_GetFriendsExclusiveInput";
		private const string EOS_UI_GetFriendsVisibleName = "EOS_UI_GetFriendsVisible";
		private const string EOS_UI_GetNotificationLocationPreferenceName = "EOS_UI_GetNotificationLocationPreference";
		private const string EOS_UI_GetToggleFriendsButtonName = "EOS_UI_GetToggleFriendsButton";
		private const string EOS_UI_GetToggleFriendsKeyName = "EOS_UI_GetToggleFriendsKey";
		private const string EOS_UI_HideFriendsName = "EOS_UI_HideFriends";
		private const string EOS_UI_IsSocialOverlayPausedName = "EOS_UI_IsSocialOverlayPaused";
		private const string EOS_UI_IsValidButtonCombinationName = "EOS_UI_IsValidButtonCombination";
		private const string EOS_UI_IsValidKeyCombinationName = "EOS_UI_IsValidKeyCombination";
		private const string EOS_UI_PauseSocialOverlayName = "EOS_UI_PauseSocialOverlay";
		private const string EOS_UI_PrePresentName = "EOS_UI_PrePresent";
		private const string EOS_UI_RemoveNotifyDisplaySettingsUpdatedName = "EOS_UI_RemoveNotifyDisplaySettingsUpdated";
		private const string EOS_UI_RemoveNotifyMemoryMonitorName = "EOS_UI_RemoveNotifyMemoryMonitor";
		private const string EOS_UI_ReportInputStateName = "EOS_UI_ReportInputState";
		private const string EOS_UI_SetDisplayPreferenceName = "EOS_UI_SetDisplayPreference";
		private const string EOS_UI_SetToggleFriendsButtonName = "EOS_UI_SetToggleFriendsButton";
		private const string EOS_UI_SetToggleFriendsKeyName = "EOS_UI_SetToggleFriendsKey";
		private const string EOS_UI_ShowBlockPlayerName = "EOS_UI_ShowBlockPlayer";
		private const string EOS_UI_ShowFriendsName = "EOS_UI_ShowFriends";
		private const string EOS_UI_ShowNativeProfileName = "EOS_UI_ShowNativeProfile";
		private const string EOS_UI_ShowReportPlayerName = "EOS_UI_ShowReportPlayer";
		private const string EOS_UserInfo_BestDisplayName_ReleaseName = "EOS_UserInfo_BestDisplayName_Release";
		private const string EOS_UserInfo_CopyBestDisplayNameName = "EOS_UserInfo_CopyBestDisplayName";
		private const string EOS_UserInfo_CopyBestDisplayNameWithPlatformName = "EOS_UserInfo_CopyBestDisplayNameWithPlatform";
		private const string EOS_UserInfo_CopyExternalUserInfoByAccountIdName = "EOS_UserInfo_CopyExternalUserInfoByAccountId";
		private const string EOS_UserInfo_CopyExternalUserInfoByAccountTypeName = "EOS_UserInfo_CopyExternalUserInfoByAccountType";
		private const string EOS_UserInfo_CopyExternalUserInfoByIndexName = "EOS_UserInfo_CopyExternalUserInfoByIndex";
		private const string EOS_UserInfo_CopyUserInfoName = "EOS_UserInfo_CopyUserInfo";
		private const string EOS_UserInfo_ExternalUserInfo_ReleaseName = "EOS_UserInfo_ExternalUserInfo_Release";
		private const string EOS_UserInfo_GetExternalUserInfoCountName = "EOS_UserInfo_GetExternalUserInfoCount";
		private const string EOS_UserInfo_GetLocalPlatformTypeName = "EOS_UserInfo_GetLocalPlatformType";
		private const string EOS_UserInfo_QueryUserInfoName = "EOS_UserInfo_QueryUserInfo";
		private const string EOS_UserInfo_QueryUserInfoByDisplayNameName = "EOS_UserInfo_QueryUserInfoByDisplayName";
		private const string EOS_UserInfo_QueryUserInfoByExternalAccountName = "EOS_UserInfo_QueryUserInfoByExternalAccount";
		private const string EOS_UserInfo_ReleaseName = "EOS_UserInfo_Release";
#endif
#if EOS_DYNAMIC_BINDINGS_MANGLING_APPLE
		private const string EOS_Achievements_AddNotifyAchievementsUnlockedName = "_EOS_Achievements_AddNotifyAchievementsUnlocked";
		private const string EOS_Achievements_AddNotifyAchievementsUnlockedV2Name = "_EOS_Achievements_AddNotifyAchievementsUnlockedV2";
		private const string EOS_Achievements_CopyAchievementDefinitionByAchievementIdName = "_EOS_Achievements_CopyAchievementDefinitionByAchievementId";
		private const string EOS_Achievements_CopyAchievementDefinitionByIndexName = "_EOS_Achievements_CopyAchievementDefinitionByIndex";
		private const string EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdName = "_EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId";
		private const string EOS_Achievements_CopyAchievementDefinitionV2ByIndexName = "_EOS_Achievements_CopyAchievementDefinitionV2ByIndex";
		private const string EOS_Achievements_CopyPlayerAchievementByAchievementIdName = "_EOS_Achievements_CopyPlayerAchievementByAchievementId";
		private const string EOS_Achievements_CopyPlayerAchievementByIndexName = "_EOS_Achievements_CopyPlayerAchievementByIndex";
		private const string EOS_Achievements_CopyUnlockedAchievementByAchievementIdName = "_EOS_Achievements_CopyUnlockedAchievementByAchievementId";
		private const string EOS_Achievements_CopyUnlockedAchievementByIndexName = "_EOS_Achievements_CopyUnlockedAchievementByIndex";
		private const string EOS_Achievements_DefinitionV2_ReleaseName = "_EOS_Achievements_DefinitionV2_Release";
		private const string EOS_Achievements_Definition_ReleaseName = "_EOS_Achievements_Definition_Release";
		private const string EOS_Achievements_GetAchievementDefinitionCountName = "_EOS_Achievements_GetAchievementDefinitionCount";
		private const string EOS_Achievements_GetPlayerAchievementCountName = "_EOS_Achievements_GetPlayerAchievementCount";
		private const string EOS_Achievements_GetUnlockedAchievementCountName = "_EOS_Achievements_GetUnlockedAchievementCount";
		private const string EOS_Achievements_PlayerAchievement_ReleaseName = "_EOS_Achievements_PlayerAchievement_Release";
		private const string EOS_Achievements_QueryDefinitionsName = "_EOS_Achievements_QueryDefinitions";
		private const string EOS_Achievements_QueryPlayerAchievementsName = "_EOS_Achievements_QueryPlayerAchievements";
		private const string EOS_Achievements_RemoveNotifyAchievementsUnlockedName = "_EOS_Achievements_RemoveNotifyAchievementsUnlocked";
		private const string EOS_Achievements_UnlockAchievementsName = "_EOS_Achievements_UnlockAchievements";
		private const string EOS_Achievements_UnlockedAchievement_ReleaseName = "_EOS_Achievements_UnlockedAchievement_Release";
		private const string EOS_ActiveSession_CopyInfoName = "_EOS_ActiveSession_CopyInfo";
		private const string EOS_ActiveSession_GetRegisteredPlayerByIndexName = "_EOS_ActiveSession_GetRegisteredPlayerByIndex";
		private const string EOS_ActiveSession_GetRegisteredPlayerCountName = "_EOS_ActiveSession_GetRegisteredPlayerCount";
		private const string EOS_ActiveSession_Info_ReleaseName = "_EOS_ActiveSession_Info_Release";
		private const string EOS_ActiveSession_ReleaseName = "_EOS_ActiveSession_Release";
		private const string EOS_AntiCheatClient_AddExternalIntegrityCatalogName = "_EOS_AntiCheatClient_AddExternalIntegrityCatalog";
		private const string EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedName = "_EOS_AntiCheatClient_AddNotifyClientIntegrityViolated";
		private const string EOS_AntiCheatClient_AddNotifyMessageToPeerName = "_EOS_AntiCheatClient_AddNotifyMessageToPeer";
		private const string EOS_AntiCheatClient_AddNotifyMessageToServerName = "_EOS_AntiCheatClient_AddNotifyMessageToServer";
		private const string EOS_AntiCheatClient_AddNotifyPeerActionRequiredName = "_EOS_AntiCheatClient_AddNotifyPeerActionRequired";
		private const string EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedName = "_EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged";
		private const string EOS_AntiCheatClient_BeginSessionName = "_EOS_AntiCheatClient_BeginSession";
		private const string EOS_AntiCheatClient_EndSessionName = "_EOS_AntiCheatClient_EndSession";
		private const string EOS_AntiCheatClient_GetProtectMessageOutputLengthName = "_EOS_AntiCheatClient_GetProtectMessageOutputLength";
		private const string EOS_AntiCheatClient_PollStatusName = "_EOS_AntiCheatClient_PollStatus";
		private const string EOS_AntiCheatClient_ProtectMessageName = "_EOS_AntiCheatClient_ProtectMessage";
		private const string EOS_AntiCheatClient_ReceiveMessageFromPeerName = "_EOS_AntiCheatClient_ReceiveMessageFromPeer";
		private const string EOS_AntiCheatClient_ReceiveMessageFromServerName = "_EOS_AntiCheatClient_ReceiveMessageFromServer";
		private const string EOS_AntiCheatClient_RegisterPeerName = "_EOS_AntiCheatClient_RegisterPeer";
		private const string EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedName = "_EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated";
		private const string EOS_AntiCheatClient_RemoveNotifyMessageToPeerName = "_EOS_AntiCheatClient_RemoveNotifyMessageToPeer";
		private const string EOS_AntiCheatClient_RemoveNotifyMessageToServerName = "_EOS_AntiCheatClient_RemoveNotifyMessageToServer";
		private const string EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredName = "_EOS_AntiCheatClient_RemoveNotifyPeerActionRequired";
		private const string EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedName = "_EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged";
		private const string EOS_AntiCheatClient_Reserved01Name = "_EOS_AntiCheatClient_Reserved01";
		private const string EOS_AntiCheatClient_UnprotectMessageName = "_EOS_AntiCheatClient_UnprotectMessage";
		private const string EOS_AntiCheatClient_UnregisterPeerName = "_EOS_AntiCheatClient_UnregisterPeer";
		private const string EOS_AntiCheatServer_AddNotifyClientActionRequiredName = "_EOS_AntiCheatServer_AddNotifyClientActionRequired";
		private const string EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedName = "_EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged";
		private const string EOS_AntiCheatServer_AddNotifyMessageToClientName = "_EOS_AntiCheatServer_AddNotifyMessageToClient";
		private const string EOS_AntiCheatServer_BeginSessionName = "_EOS_AntiCheatServer_BeginSession";
		private const string EOS_AntiCheatServer_EndSessionName = "_EOS_AntiCheatServer_EndSession";
		private const string EOS_AntiCheatServer_GetProtectMessageOutputLengthName = "_EOS_AntiCheatServer_GetProtectMessageOutputLength";
		private const string EOS_AntiCheatServer_LogEventName = "_EOS_AntiCheatServer_LogEvent";
		private const string EOS_AntiCheatServer_LogGameRoundEndName = "_EOS_AntiCheatServer_LogGameRoundEnd";
		private const string EOS_AntiCheatServer_LogGameRoundStartName = "_EOS_AntiCheatServer_LogGameRoundStart";
		private const string EOS_AntiCheatServer_LogPlayerDespawnName = "_EOS_AntiCheatServer_LogPlayerDespawn";
		private const string EOS_AntiCheatServer_LogPlayerReviveName = "_EOS_AntiCheatServer_LogPlayerRevive";
		private const string EOS_AntiCheatServer_LogPlayerSpawnName = "_EOS_AntiCheatServer_LogPlayerSpawn";
		private const string EOS_AntiCheatServer_LogPlayerTakeDamageName = "_EOS_AntiCheatServer_LogPlayerTakeDamage";
		private const string EOS_AntiCheatServer_LogPlayerTickName = "_EOS_AntiCheatServer_LogPlayerTick";
		private const string EOS_AntiCheatServer_LogPlayerUseAbilityName = "_EOS_AntiCheatServer_LogPlayerUseAbility";
		private const string EOS_AntiCheatServer_LogPlayerUseWeaponName = "_EOS_AntiCheatServer_LogPlayerUseWeapon";
		private const string EOS_AntiCheatServer_ProtectMessageName = "_EOS_AntiCheatServer_ProtectMessage";
		private const string EOS_AntiCheatServer_ReceiveMessageFromClientName = "_EOS_AntiCheatServer_ReceiveMessageFromClient";
		private const string EOS_AntiCheatServer_RegisterClientName = "_EOS_AntiCheatServer_RegisterClient";
		private const string EOS_AntiCheatServer_RegisterEventName = "_EOS_AntiCheatServer_RegisterEvent";
		private const string EOS_AntiCheatServer_RemoveNotifyClientActionRequiredName = "_EOS_AntiCheatServer_RemoveNotifyClientActionRequired";
		private const string EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedName = "_EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged";
		private const string EOS_AntiCheatServer_RemoveNotifyMessageToClientName = "_EOS_AntiCheatServer_RemoveNotifyMessageToClient";
		private const string EOS_AntiCheatServer_SetClientDetailsName = "_EOS_AntiCheatServer_SetClientDetails";
		private const string EOS_AntiCheatServer_SetClientNetworkStateName = "_EOS_AntiCheatServer_SetClientNetworkState";
		private const string EOS_AntiCheatServer_SetGameSessionIdName = "_EOS_AntiCheatServer_SetGameSessionId";
		private const string EOS_AntiCheatServer_UnprotectMessageName = "_EOS_AntiCheatServer_UnprotectMessage";
		private const string EOS_AntiCheatServer_UnregisterClientName = "_EOS_AntiCheatServer_UnregisterClient";
		private const string EOS_Auth_AddNotifyLoginStatusChangedName = "_EOS_Auth_AddNotifyLoginStatusChanged";
		private const string EOS_Auth_CopyIdTokenName = "_EOS_Auth_CopyIdToken";
		private const string EOS_Auth_CopyUserAuthTokenName = "_EOS_Auth_CopyUserAuthToken";
		private const string EOS_Auth_DeletePersistentAuthName = "_EOS_Auth_DeletePersistentAuth";
		private const string EOS_Auth_GetLoggedInAccountByIndexName = "_EOS_Auth_GetLoggedInAccountByIndex";
		private const string EOS_Auth_GetLoggedInAccountsCountName = "_EOS_Auth_GetLoggedInAccountsCount";
		private const string EOS_Auth_GetLoginStatusName = "_EOS_Auth_GetLoginStatus";
		private const string EOS_Auth_GetMergedAccountByIndexName = "_EOS_Auth_GetMergedAccountByIndex";
		private const string EOS_Auth_GetMergedAccountsCountName = "_EOS_Auth_GetMergedAccountsCount";
		private const string EOS_Auth_GetSelectedAccountIdName = "_EOS_Auth_GetSelectedAccountId";
		private const string EOS_Auth_IdToken_ReleaseName = "_EOS_Auth_IdToken_Release";
		private const string EOS_Auth_LinkAccountName = "_EOS_Auth_LinkAccount";
		private const string EOS_Auth_LoginName = "_EOS_Auth_Login";
		private const string EOS_Auth_LogoutName = "_EOS_Auth_Logout";
		private const string EOS_Auth_QueryIdTokenName = "_EOS_Auth_QueryIdToken";
		private const string EOS_Auth_RemoveNotifyLoginStatusChangedName = "_EOS_Auth_RemoveNotifyLoginStatusChanged";
		private const string EOS_Auth_Token_ReleaseName = "_EOS_Auth_Token_Release";
		private const string EOS_Auth_VerifyIdTokenName = "_EOS_Auth_VerifyIdToken";
		private const string EOS_Auth_VerifyUserAuthName = "_EOS_Auth_VerifyUserAuth";
		private const string EOS_ByteArray_ToStringName = "_EOS_ByteArray_ToString";
		private const string EOS_Connect_AddNotifyAuthExpirationName = "_EOS_Connect_AddNotifyAuthExpiration";
		private const string EOS_Connect_AddNotifyLoginStatusChangedName = "_EOS_Connect_AddNotifyLoginStatusChanged";
		private const string EOS_Connect_CopyIdTokenName = "_EOS_Connect_CopyIdToken";
		private const string EOS_Connect_CopyProductUserExternalAccountByAccountIdName = "_EOS_Connect_CopyProductUserExternalAccountByAccountId";
		private const string EOS_Connect_CopyProductUserExternalAccountByAccountTypeName = "_EOS_Connect_CopyProductUserExternalAccountByAccountType";
		private const string EOS_Connect_CopyProductUserExternalAccountByIndexName = "_EOS_Connect_CopyProductUserExternalAccountByIndex";
		private const string EOS_Connect_CopyProductUserInfoName = "_EOS_Connect_CopyProductUserInfo";
		private const string EOS_Connect_CreateDeviceIdName = "_EOS_Connect_CreateDeviceId";
		private const string EOS_Connect_CreateUserName = "_EOS_Connect_CreateUser";
		private const string EOS_Connect_DeleteDeviceIdName = "_EOS_Connect_DeleteDeviceId";
		private const string EOS_Connect_ExternalAccountInfo_ReleaseName = "_EOS_Connect_ExternalAccountInfo_Release";
		private const string EOS_Connect_GetExternalAccountMappingName = "_EOS_Connect_GetExternalAccountMapping";
		private const string EOS_Connect_GetLoggedInUserByIndexName = "_EOS_Connect_GetLoggedInUserByIndex";
		private const string EOS_Connect_GetLoggedInUsersCountName = "_EOS_Connect_GetLoggedInUsersCount";
		private const string EOS_Connect_GetLoginStatusName = "_EOS_Connect_GetLoginStatus";
		private const string EOS_Connect_GetProductUserExternalAccountCountName = "_EOS_Connect_GetProductUserExternalAccountCount";
		private const string EOS_Connect_GetProductUserIdMappingName = "_EOS_Connect_GetProductUserIdMapping";
		private const string EOS_Connect_IdToken_ReleaseName = "_EOS_Connect_IdToken_Release";
		private const string EOS_Connect_LinkAccountName = "_EOS_Connect_LinkAccount";
		private const string EOS_Connect_LoginName = "_EOS_Connect_Login";
		private const string EOS_Connect_LogoutName = "_EOS_Connect_Logout";
		private const string EOS_Connect_QueryExternalAccountMappingsName = "_EOS_Connect_QueryExternalAccountMappings";
		private const string EOS_Connect_QueryProductUserIdMappingsName = "_EOS_Connect_QueryProductUserIdMappings";
		private const string EOS_Connect_RemoveNotifyAuthExpirationName = "_EOS_Connect_RemoveNotifyAuthExpiration";
		private const string EOS_Connect_RemoveNotifyLoginStatusChangedName = "_EOS_Connect_RemoveNotifyLoginStatusChanged";
		private const string EOS_Connect_TransferDeviceIdAccountName = "_EOS_Connect_TransferDeviceIdAccount";
		private const string EOS_Connect_UnlinkAccountName = "_EOS_Connect_UnlinkAccount";
		private const string EOS_Connect_VerifyIdTokenName = "_EOS_Connect_VerifyIdToken";
		private const string EOS_ContinuanceToken_ToStringName = "_EOS_ContinuanceToken_ToString";
		private const string EOS_CustomInvites_AcceptRequestToJoinName = "_EOS_CustomInvites_AcceptRequestToJoin";
		private const string EOS_CustomInvites_AddNotifyCustomInviteAcceptedName = "_EOS_CustomInvites_AddNotifyCustomInviteAccepted";
		private const string EOS_CustomInvites_AddNotifyCustomInviteReceivedName = "_EOS_CustomInvites_AddNotifyCustomInviteReceived";
		private const string EOS_CustomInvites_AddNotifyCustomInviteRejectedName = "_EOS_CustomInvites_AddNotifyCustomInviteRejected";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinAcceptedName = "_EOS_CustomInvites_AddNotifyRequestToJoinAccepted";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinReceivedName = "_EOS_CustomInvites_AddNotifyRequestToJoinReceived";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinRejectedName = "_EOS_CustomInvites_AddNotifyRequestToJoinRejected";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedName = "_EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived";
		private const string EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedName = "_EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested";
		private const string EOS_CustomInvites_FinalizeInviteName = "_EOS_CustomInvites_FinalizeInvite";
		private const string EOS_CustomInvites_RejectRequestToJoinName = "_EOS_CustomInvites_RejectRequestToJoin";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedName = "_EOS_CustomInvites_RemoveNotifyCustomInviteAccepted";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteReceivedName = "_EOS_CustomInvites_RemoveNotifyCustomInviteReceived";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteRejectedName = "_EOS_CustomInvites_RemoveNotifyCustomInviteRejected";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinReceived";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinRejected";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived";
		private const string EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedName = "_EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested";
		private const string EOS_CustomInvites_SendCustomInviteName = "_EOS_CustomInvites_SendCustomInvite";
		private const string EOS_CustomInvites_SendRequestToJoinName = "_EOS_CustomInvites_SendRequestToJoin";
		private const string EOS_CustomInvites_SetCustomInviteName = "_EOS_CustomInvites_SetCustomInvite";
		private const string EOS_EApplicationStatus_ToStringName = "_EOS_EApplicationStatus_ToString";
		private const string EOS_ENetworkStatus_ToStringName = "_EOS_ENetworkStatus_ToString";
		private const string EOS_EResult_IsOperationCompleteName = "_EOS_EResult_IsOperationComplete";
		private const string EOS_EResult_ToStringName = "_EOS_EResult_ToString";
		private const string EOS_Ecom_CatalogItem_ReleaseName = "_EOS_Ecom_CatalogItem_Release";
		private const string EOS_Ecom_CatalogOffer_ReleaseName = "_EOS_Ecom_CatalogOffer_Release";
		private const string EOS_Ecom_CatalogRelease_ReleaseName = "_EOS_Ecom_CatalogRelease_Release";
		private const string EOS_Ecom_CheckoutName = "_EOS_Ecom_Checkout";
		private const string EOS_Ecom_CopyEntitlementByIdName = "_EOS_Ecom_CopyEntitlementById";
		private const string EOS_Ecom_CopyEntitlementByIndexName = "_EOS_Ecom_CopyEntitlementByIndex";
		private const string EOS_Ecom_CopyEntitlementByNameAndIndexName = "_EOS_Ecom_CopyEntitlementByNameAndIndex";
		private const string EOS_Ecom_CopyItemByIdName = "_EOS_Ecom_CopyItemById";
		private const string EOS_Ecom_CopyItemImageInfoByIndexName = "_EOS_Ecom_CopyItemImageInfoByIndex";
		private const string EOS_Ecom_CopyItemReleaseByIndexName = "_EOS_Ecom_CopyItemReleaseByIndex";
		private const string EOS_Ecom_CopyLastRedeemedEntitlementByIndexName = "_EOS_Ecom_CopyLastRedeemedEntitlementByIndex";
		private const string EOS_Ecom_CopyOfferByIdName = "_EOS_Ecom_CopyOfferById";
		private const string EOS_Ecom_CopyOfferByIndexName = "_EOS_Ecom_CopyOfferByIndex";
		private const string EOS_Ecom_CopyOfferImageInfoByIndexName = "_EOS_Ecom_CopyOfferImageInfoByIndex";
		private const string EOS_Ecom_CopyOfferItemByIndexName = "_EOS_Ecom_CopyOfferItemByIndex";
		private const string EOS_Ecom_CopyTransactionByIdName = "_EOS_Ecom_CopyTransactionById";
		private const string EOS_Ecom_CopyTransactionByIndexName = "_EOS_Ecom_CopyTransactionByIndex";
		private const string EOS_Ecom_Entitlement_ReleaseName = "_EOS_Ecom_Entitlement_Release";
		private const string EOS_Ecom_GetEntitlementsByNameCountName = "_EOS_Ecom_GetEntitlementsByNameCount";
		private const string EOS_Ecom_GetEntitlementsCountName = "_EOS_Ecom_GetEntitlementsCount";
		private const string EOS_Ecom_GetItemImageInfoCountName = "_EOS_Ecom_GetItemImageInfoCount";
		private const string EOS_Ecom_GetItemReleaseCountName = "_EOS_Ecom_GetItemReleaseCount";
		private const string EOS_Ecom_GetLastRedeemedEntitlementsCountName = "_EOS_Ecom_GetLastRedeemedEntitlementsCount";
		private const string EOS_Ecom_GetOfferCountName = "_EOS_Ecom_GetOfferCount";
		private const string EOS_Ecom_GetOfferImageInfoCountName = "_EOS_Ecom_GetOfferImageInfoCount";
		private const string EOS_Ecom_GetOfferItemCountName = "_EOS_Ecom_GetOfferItemCount";
		private const string EOS_Ecom_GetTransactionCountName = "_EOS_Ecom_GetTransactionCount";
		private const string EOS_Ecom_KeyImageInfo_ReleaseName = "_EOS_Ecom_KeyImageInfo_Release";
		private const string EOS_Ecom_QueryEntitlementTokenName = "_EOS_Ecom_QueryEntitlementToken";
		private const string EOS_Ecom_QueryEntitlementsName = "_EOS_Ecom_QueryEntitlements";
		private const string EOS_Ecom_QueryOffersName = "_EOS_Ecom_QueryOffers";
		private const string EOS_Ecom_QueryOwnershipName = "_EOS_Ecom_QueryOwnership";
		private const string EOS_Ecom_QueryOwnershipBySandboxIdsName = "_EOS_Ecom_QueryOwnershipBySandboxIds";
		private const string EOS_Ecom_QueryOwnershipTokenName = "_EOS_Ecom_QueryOwnershipToken";
		private const string EOS_Ecom_RedeemEntitlementsName = "_EOS_Ecom_RedeemEntitlements";
		private const string EOS_Ecom_Transaction_CopyEntitlementByIndexName = "_EOS_Ecom_Transaction_CopyEntitlementByIndex";
		private const string EOS_Ecom_Transaction_GetEntitlementsCountName = "_EOS_Ecom_Transaction_GetEntitlementsCount";
		private const string EOS_Ecom_Transaction_GetTransactionIdName = "_EOS_Ecom_Transaction_GetTransactionId";
		private const string EOS_Ecom_Transaction_ReleaseName = "_EOS_Ecom_Transaction_Release";
		private const string EOS_EpicAccountId_FromStringName = "_EOS_EpicAccountId_FromString";
		private const string EOS_EpicAccountId_IsValidName = "_EOS_EpicAccountId_IsValid";
		private const string EOS_EpicAccountId_ToStringName = "_EOS_EpicAccountId_ToString";
		private const string EOS_Friends_AcceptInviteName = "_EOS_Friends_AcceptInvite";
		private const string EOS_Friends_AddNotifyBlockedUsersUpdateName = "_EOS_Friends_AddNotifyBlockedUsersUpdate";
		private const string EOS_Friends_AddNotifyFriendsUpdateName = "_EOS_Friends_AddNotifyFriendsUpdate";
		private const string EOS_Friends_GetBlockedUserAtIndexName = "_EOS_Friends_GetBlockedUserAtIndex";
		private const string EOS_Friends_GetBlockedUsersCountName = "_EOS_Friends_GetBlockedUsersCount";
		private const string EOS_Friends_GetFriendAtIndexName = "_EOS_Friends_GetFriendAtIndex";
		private const string EOS_Friends_GetFriendsCountName = "_EOS_Friends_GetFriendsCount";
		private const string EOS_Friends_GetStatusName = "_EOS_Friends_GetStatus";
		private const string EOS_Friends_QueryFriendsName = "_EOS_Friends_QueryFriends";
		private const string EOS_Friends_RejectInviteName = "_EOS_Friends_RejectInvite";
		private const string EOS_Friends_RemoveNotifyBlockedUsersUpdateName = "_EOS_Friends_RemoveNotifyBlockedUsersUpdate";
		private const string EOS_Friends_RemoveNotifyFriendsUpdateName = "_EOS_Friends_RemoveNotifyFriendsUpdate";
		private const string EOS_Friends_SendInviteName = "_EOS_Friends_SendInvite";
		private const string EOS_GetVersionName = "_EOS_GetVersion";
		private const string EOS_InitializeName = "_EOS_Initialize";
		private const string EOS_IntegratedPlatformOptionsContainer_AddName = "_EOS_IntegratedPlatformOptionsContainer_Add";
		private const string EOS_IntegratedPlatformOptionsContainer_ReleaseName = "_EOS_IntegratedPlatformOptionsContainer_Release";
		private const string EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedName = "_EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged";
		private const string EOS_IntegratedPlatform_ClearUserPreLogoutCallbackName = "_EOS_IntegratedPlatform_ClearUserPreLogoutCallback";
		private const string EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerName = "_EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer";
		private const string EOS_IntegratedPlatform_FinalizeDeferredUserLogoutName = "_EOS_IntegratedPlatform_FinalizeDeferredUserLogout";
		private const string EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedName = "_EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged";
		private const string EOS_IntegratedPlatform_SetUserLoginStatusName = "_EOS_IntegratedPlatform_SetUserLoginStatus";
		private const string EOS_IntegratedPlatform_SetUserPreLogoutCallbackName = "_EOS_IntegratedPlatform_SetUserPreLogoutCallback";
		private const string EOS_KWS_AddNotifyPermissionsUpdateReceivedName = "_EOS_KWS_AddNotifyPermissionsUpdateReceived";
		private const string EOS_KWS_CopyPermissionByIndexName = "_EOS_KWS_CopyPermissionByIndex";
		private const string EOS_KWS_CreateUserName = "_EOS_KWS_CreateUser";
		private const string EOS_KWS_GetPermissionByKeyName = "_EOS_KWS_GetPermissionByKey";
		private const string EOS_KWS_GetPermissionsCountName = "_EOS_KWS_GetPermissionsCount";
		private const string EOS_KWS_PermissionStatus_ReleaseName = "_EOS_KWS_PermissionStatus_Release";
		private const string EOS_KWS_QueryAgeGateName = "_EOS_KWS_QueryAgeGate";
		private const string EOS_KWS_QueryPermissionsName = "_EOS_KWS_QueryPermissions";
		private const string EOS_KWS_RemoveNotifyPermissionsUpdateReceivedName = "_EOS_KWS_RemoveNotifyPermissionsUpdateReceived";
		private const string EOS_KWS_RequestPermissionsName = "_EOS_KWS_RequestPermissions";
		private const string EOS_KWS_UpdateParentEmailName = "_EOS_KWS_UpdateParentEmail";
		private const string EOS_Leaderboards_CopyLeaderboardDefinitionByIndexName = "_EOS_Leaderboards_CopyLeaderboardDefinitionByIndex";
		private const string EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdName = "_EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId";
		private const string EOS_Leaderboards_CopyLeaderboardRecordByIndexName = "_EOS_Leaderboards_CopyLeaderboardRecordByIndex";
		private const string EOS_Leaderboards_CopyLeaderboardRecordByUserIdName = "_EOS_Leaderboards_CopyLeaderboardRecordByUserId";
		private const string EOS_Leaderboards_CopyLeaderboardUserScoreByIndexName = "_EOS_Leaderboards_CopyLeaderboardUserScoreByIndex";
		private const string EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdName = "_EOS_Leaderboards_CopyLeaderboardUserScoreByUserId";
		private const string EOS_Leaderboards_Definition_ReleaseName = "_EOS_Leaderboards_Definition_Release";
		private const string EOS_Leaderboards_GetLeaderboardDefinitionCountName = "_EOS_Leaderboards_GetLeaderboardDefinitionCount";
		private const string EOS_Leaderboards_GetLeaderboardRecordCountName = "_EOS_Leaderboards_GetLeaderboardRecordCount";
		private const string EOS_Leaderboards_GetLeaderboardUserScoreCountName = "_EOS_Leaderboards_GetLeaderboardUserScoreCount";
		private const string EOS_Leaderboards_LeaderboardRecord_ReleaseName = "_EOS_Leaderboards_LeaderboardRecord_Release";
		private const string EOS_Leaderboards_LeaderboardUserScore_ReleaseName = "_EOS_Leaderboards_LeaderboardUserScore_Release";
		private const string EOS_Leaderboards_QueryLeaderboardDefinitionsName = "_EOS_Leaderboards_QueryLeaderboardDefinitions";
		private const string EOS_Leaderboards_QueryLeaderboardRanksName = "_EOS_Leaderboards_QueryLeaderboardRanks";
		private const string EOS_Leaderboards_QueryLeaderboardUserScoresName = "_EOS_Leaderboards_QueryLeaderboardUserScores";
		private const string EOS_LobbyDetails_CopyAttributeByIndexName = "_EOS_LobbyDetails_CopyAttributeByIndex";
		private const string EOS_LobbyDetails_CopyAttributeByKeyName = "_EOS_LobbyDetails_CopyAttributeByKey";
		private const string EOS_LobbyDetails_CopyInfoName = "_EOS_LobbyDetails_CopyInfo";
		private const string EOS_LobbyDetails_CopyMemberAttributeByIndexName = "_EOS_LobbyDetails_CopyMemberAttributeByIndex";
		private const string EOS_LobbyDetails_CopyMemberAttributeByKeyName = "_EOS_LobbyDetails_CopyMemberAttributeByKey";
		private const string EOS_LobbyDetails_CopyMemberInfoName = "_EOS_LobbyDetails_CopyMemberInfo";
		private const string EOS_LobbyDetails_GetAttributeCountName = "_EOS_LobbyDetails_GetAttributeCount";
		private const string EOS_LobbyDetails_GetLobbyOwnerName = "_EOS_LobbyDetails_GetLobbyOwner";
		private const string EOS_LobbyDetails_GetMemberAttributeCountName = "_EOS_LobbyDetails_GetMemberAttributeCount";
		private const string EOS_LobbyDetails_GetMemberByIndexName = "_EOS_LobbyDetails_GetMemberByIndex";
		private const string EOS_LobbyDetails_GetMemberCountName = "_EOS_LobbyDetails_GetMemberCount";
		private const string EOS_LobbyDetails_Info_ReleaseName = "_EOS_LobbyDetails_Info_Release";
		private const string EOS_LobbyDetails_MemberInfo_ReleaseName = "_EOS_LobbyDetails_MemberInfo_Release";
		private const string EOS_LobbyDetails_ReleaseName = "_EOS_LobbyDetails_Release";
		private const string EOS_LobbyModification_AddAttributeName = "_EOS_LobbyModification_AddAttribute";
		private const string EOS_LobbyModification_AddMemberAttributeName = "_EOS_LobbyModification_AddMemberAttribute";
		private const string EOS_LobbyModification_ReleaseName = "_EOS_LobbyModification_Release";
		private const string EOS_LobbyModification_RemoveAttributeName = "_EOS_LobbyModification_RemoveAttribute";
		private const string EOS_LobbyModification_RemoveMemberAttributeName = "_EOS_LobbyModification_RemoveMemberAttribute";
		private const string EOS_LobbyModification_SetAllowedPlatformIdsName = "_EOS_LobbyModification_SetAllowedPlatformIds";
		private const string EOS_LobbyModification_SetBucketIdName = "_EOS_LobbyModification_SetBucketId";
		private const string EOS_LobbyModification_SetInvitesAllowedName = "_EOS_LobbyModification_SetInvitesAllowed";
		private const string EOS_LobbyModification_SetMaxMembersName = "_EOS_LobbyModification_SetMaxMembers";
		private const string EOS_LobbyModification_SetPermissionLevelName = "_EOS_LobbyModification_SetPermissionLevel";
		private const string EOS_LobbySearch_CopySearchResultByIndexName = "_EOS_LobbySearch_CopySearchResultByIndex";
		private const string EOS_LobbySearch_FindName = "_EOS_LobbySearch_Find";
		private const string EOS_LobbySearch_GetSearchResultCountName = "_EOS_LobbySearch_GetSearchResultCount";
		private const string EOS_LobbySearch_ReleaseName = "_EOS_LobbySearch_Release";
		private const string EOS_LobbySearch_RemoveParameterName = "_EOS_LobbySearch_RemoveParameter";
		private const string EOS_LobbySearch_SetLobbyIdName = "_EOS_LobbySearch_SetLobbyId";
		private const string EOS_LobbySearch_SetMaxResultsName = "_EOS_LobbySearch_SetMaxResults";
		private const string EOS_LobbySearch_SetParameterName = "_EOS_LobbySearch_SetParameter";
		private const string EOS_LobbySearch_SetTargetUserIdName = "_EOS_LobbySearch_SetTargetUserId";
		private const string EOS_Lobby_AddNotifyJoinLobbyAcceptedName = "_EOS_Lobby_AddNotifyJoinLobbyAccepted";
		private const string EOS_Lobby_AddNotifyLeaveLobbyRequestedName = "_EOS_Lobby_AddNotifyLeaveLobbyRequested";
		private const string EOS_Lobby_AddNotifyLobbyInviteAcceptedName = "_EOS_Lobby_AddNotifyLobbyInviteAccepted";
		private const string EOS_Lobby_AddNotifyLobbyInviteReceivedName = "_EOS_Lobby_AddNotifyLobbyInviteReceived";
		private const string EOS_Lobby_AddNotifyLobbyInviteRejectedName = "_EOS_Lobby_AddNotifyLobbyInviteRejected";
		private const string EOS_Lobby_AddNotifyLobbyMemberStatusReceivedName = "_EOS_Lobby_AddNotifyLobbyMemberStatusReceived";
		private const string EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedName = "_EOS_Lobby_AddNotifyLobbyMemberUpdateReceived";
		private const string EOS_Lobby_AddNotifyLobbyUpdateReceivedName = "_EOS_Lobby_AddNotifyLobbyUpdateReceived";
		private const string EOS_Lobby_AddNotifyRTCRoomConnectionChangedName = "_EOS_Lobby_AddNotifyRTCRoomConnectionChanged";
		private const string EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedName = "_EOS_Lobby_AddNotifySendLobbyNativeInviteRequested";
		private const string EOS_Lobby_Attribute_ReleaseName = "_EOS_Lobby_Attribute_Release";
		private const string EOS_Lobby_CopyLobbyDetailsHandleName = "_EOS_Lobby_CopyLobbyDetailsHandle";
		private const string EOS_Lobby_CopyLobbyDetailsHandleByInviteIdName = "_EOS_Lobby_CopyLobbyDetailsHandleByInviteId";
		private const string EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdName = "_EOS_Lobby_CopyLobbyDetailsHandleByUiEventId";
		private const string EOS_Lobby_CreateLobbyName = "_EOS_Lobby_CreateLobby";
		private const string EOS_Lobby_CreateLobbySearchName = "_EOS_Lobby_CreateLobbySearch";
		private const string EOS_Lobby_DestroyLobbyName = "_EOS_Lobby_DestroyLobby";
		private const string EOS_Lobby_GetConnectStringName = "_EOS_Lobby_GetConnectString";
		private const string EOS_Lobby_GetInviteCountName = "_EOS_Lobby_GetInviteCount";
		private const string EOS_Lobby_GetInviteIdByIndexName = "_EOS_Lobby_GetInviteIdByIndex";
		private const string EOS_Lobby_GetRTCRoomNameName = "_EOS_Lobby_GetRTCRoomName";
		private const string EOS_Lobby_HardMuteMemberName = "_EOS_Lobby_HardMuteMember";
		private const string EOS_Lobby_IsRTCRoomConnectedName = "_EOS_Lobby_IsRTCRoomConnected";
		private const string EOS_Lobby_JoinLobbyName = "_EOS_Lobby_JoinLobby";
		private const string EOS_Lobby_JoinLobbyByIdName = "_EOS_Lobby_JoinLobbyById";
		private const string EOS_Lobby_JoinRTCRoomName = "_EOS_Lobby_JoinRTCRoom";
		private const string EOS_Lobby_KickMemberName = "_EOS_Lobby_KickMember";
		private const string EOS_Lobby_LeaveLobbyName = "_EOS_Lobby_LeaveLobby";
		private const string EOS_Lobby_LeaveRTCRoomName = "_EOS_Lobby_LeaveRTCRoom";
		private const string EOS_Lobby_ParseConnectStringName = "_EOS_Lobby_ParseConnectString";
		private const string EOS_Lobby_PromoteMemberName = "_EOS_Lobby_PromoteMember";
		private const string EOS_Lobby_QueryInvitesName = "_EOS_Lobby_QueryInvites";
		private const string EOS_Lobby_RejectInviteName = "_EOS_Lobby_RejectInvite";
		private const string EOS_Lobby_RemoveNotifyJoinLobbyAcceptedName = "_EOS_Lobby_RemoveNotifyJoinLobbyAccepted";
		private const string EOS_Lobby_RemoveNotifyLeaveLobbyRequestedName = "_EOS_Lobby_RemoveNotifyLeaveLobbyRequested";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteAcceptedName = "_EOS_Lobby_RemoveNotifyLobbyInviteAccepted";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteReceivedName = "_EOS_Lobby_RemoveNotifyLobbyInviteReceived";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteRejectedName = "_EOS_Lobby_RemoveNotifyLobbyInviteRejected";
		private const string EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedName = "_EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived";
		private const string EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedName = "_EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived";
		private const string EOS_Lobby_RemoveNotifyLobbyUpdateReceivedName = "_EOS_Lobby_RemoveNotifyLobbyUpdateReceived";
		private const string EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedName = "_EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged";
		private const string EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedName = "_EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested";
		private const string EOS_Lobby_SendInviteName = "_EOS_Lobby_SendInvite";
		private const string EOS_Lobby_UpdateLobbyName = "_EOS_Lobby_UpdateLobby";
		private const string EOS_Lobby_UpdateLobbyModificationName = "_EOS_Lobby_UpdateLobbyModification";
		private const string EOS_Logging_SetCallbackName = "_EOS_Logging_SetCallback";
		private const string EOS_Logging_SetLogLevelName = "_EOS_Logging_SetLogLevel";
		private const string EOS_Metrics_BeginPlayerSessionName = "_EOS_Metrics_BeginPlayerSession";
		private const string EOS_Metrics_EndPlayerSessionName = "_EOS_Metrics_EndPlayerSession";
		private const string EOS_Mods_CopyModInfoName = "_EOS_Mods_CopyModInfo";
		private const string EOS_Mods_EnumerateModsName = "_EOS_Mods_EnumerateMods";
		private const string EOS_Mods_InstallModName = "_EOS_Mods_InstallMod";
		private const string EOS_Mods_ModInfo_ReleaseName = "_EOS_Mods_ModInfo_Release";
		private const string EOS_Mods_UninstallModName = "_EOS_Mods_UninstallMod";
		private const string EOS_Mods_UpdateModName = "_EOS_Mods_UpdateMod";
		private const string EOS_P2P_AcceptConnectionName = "_EOS_P2P_AcceptConnection";
		private const string EOS_P2P_AddNotifyIncomingPacketQueueFullName = "_EOS_P2P_AddNotifyIncomingPacketQueueFull";
		private const string EOS_P2P_AddNotifyPeerConnectionClosedName = "_EOS_P2P_AddNotifyPeerConnectionClosed";
		private const string EOS_P2P_AddNotifyPeerConnectionEstablishedName = "_EOS_P2P_AddNotifyPeerConnectionEstablished";
		private const string EOS_P2P_AddNotifyPeerConnectionInterruptedName = "_EOS_P2P_AddNotifyPeerConnectionInterrupted";
		private const string EOS_P2P_AddNotifyPeerConnectionRequestName = "_EOS_P2P_AddNotifyPeerConnectionRequest";
		private const string EOS_P2P_ClearPacketQueueName = "_EOS_P2P_ClearPacketQueue";
		private const string EOS_P2P_CloseConnectionName = "_EOS_P2P_CloseConnection";
		private const string EOS_P2P_CloseConnectionsName = "_EOS_P2P_CloseConnections";
		private const string EOS_P2P_GetNATTypeName = "_EOS_P2P_GetNATType";
		private const string EOS_P2P_GetNextReceivedPacketSizeName = "_EOS_P2P_GetNextReceivedPacketSize";
		private const string EOS_P2P_GetPacketQueueInfoName = "_EOS_P2P_GetPacketQueueInfo";
		private const string EOS_P2P_GetPortRangeName = "_EOS_P2P_GetPortRange";
		private const string EOS_P2P_GetRelayControlName = "_EOS_P2P_GetRelayControl";
		private const string EOS_P2P_QueryNATTypeName = "_EOS_P2P_QueryNATType";
		private const string EOS_P2P_ReceivePacketName = "_EOS_P2P_ReceivePacket";
		private const string EOS_P2P_RemoveNotifyIncomingPacketQueueFullName = "_EOS_P2P_RemoveNotifyIncomingPacketQueueFull";
		private const string EOS_P2P_RemoveNotifyPeerConnectionClosedName = "_EOS_P2P_RemoveNotifyPeerConnectionClosed";
		private const string EOS_P2P_RemoveNotifyPeerConnectionEstablishedName = "_EOS_P2P_RemoveNotifyPeerConnectionEstablished";
		private const string EOS_P2P_RemoveNotifyPeerConnectionInterruptedName = "_EOS_P2P_RemoveNotifyPeerConnectionInterrupted";
		private const string EOS_P2P_RemoveNotifyPeerConnectionRequestName = "_EOS_P2P_RemoveNotifyPeerConnectionRequest";
		private const string EOS_P2P_SendPacketName = "_EOS_P2P_SendPacket";
		private const string EOS_P2P_SetPacketQueueSizeName = "_EOS_P2P_SetPacketQueueSize";
		private const string EOS_P2P_SetPortRangeName = "_EOS_P2P_SetPortRange";
		private const string EOS_P2P_SetRelayControlName = "_EOS_P2P_SetRelayControl";
		private const string EOS_Platform_CheckForLauncherAndRestartName = "_EOS_Platform_CheckForLauncherAndRestart";
		private const string EOS_Platform_CreateName = "_EOS_Platform_Create";
		private const string EOS_Platform_GetAchievementsInterfaceName = "_EOS_Platform_GetAchievementsInterface";
		private const string EOS_Platform_GetActiveCountryCodeName = "_EOS_Platform_GetActiveCountryCode";
		private const string EOS_Platform_GetActiveLocaleCodeName = "_EOS_Platform_GetActiveLocaleCode";
		private const string EOS_Platform_GetAntiCheatClientInterfaceName = "_EOS_Platform_GetAntiCheatClientInterface";
		private const string EOS_Platform_GetAntiCheatServerInterfaceName = "_EOS_Platform_GetAntiCheatServerInterface";
		private const string EOS_Platform_GetApplicationStatusName = "_EOS_Platform_GetApplicationStatus";
		private const string EOS_Platform_GetAuthInterfaceName = "_EOS_Platform_GetAuthInterface";
		private const string EOS_Platform_GetConnectInterfaceName = "_EOS_Platform_GetConnectInterface";
		private const string EOS_Platform_GetCustomInvitesInterfaceName = "_EOS_Platform_GetCustomInvitesInterface";
		private const string EOS_Platform_GetDesktopCrossplayStatusName = "_EOS_Platform_GetDesktopCrossplayStatus";
		private const string EOS_Platform_GetEcomInterfaceName = "_EOS_Platform_GetEcomInterface";
		private const string EOS_Platform_GetFriendsInterfaceName = "_EOS_Platform_GetFriendsInterface";
		private const string EOS_Platform_GetIntegratedPlatformInterfaceName = "_EOS_Platform_GetIntegratedPlatformInterface";
		private const string EOS_Platform_GetKWSInterfaceName = "_EOS_Platform_GetKWSInterface";
		private const string EOS_Platform_GetLeaderboardsInterfaceName = "_EOS_Platform_GetLeaderboardsInterface";
		private const string EOS_Platform_GetLobbyInterfaceName = "_EOS_Platform_GetLobbyInterface";
		private const string EOS_Platform_GetMetricsInterfaceName = "_EOS_Platform_GetMetricsInterface";
		private const string EOS_Platform_GetModsInterfaceName = "_EOS_Platform_GetModsInterface";
		private const string EOS_Platform_GetNetworkStatusName = "_EOS_Platform_GetNetworkStatus";
		private const string EOS_Platform_GetOverrideCountryCodeName = "_EOS_Platform_GetOverrideCountryCode";
		private const string EOS_Platform_GetOverrideLocaleCodeName = "_EOS_Platform_GetOverrideLocaleCode";
		private const string EOS_Platform_GetP2PInterfaceName = "_EOS_Platform_GetP2PInterface";
		private const string EOS_Platform_GetPlayerDataStorageInterfaceName = "_EOS_Platform_GetPlayerDataStorageInterface";
		private const string EOS_Platform_GetPresenceInterfaceName = "_EOS_Platform_GetPresenceInterface";
		private const string EOS_Platform_GetProgressionSnapshotInterfaceName = "_EOS_Platform_GetProgressionSnapshotInterface";
		private const string EOS_Platform_GetRTCAdminInterfaceName = "_EOS_Platform_GetRTCAdminInterface";
		private const string EOS_Platform_GetRTCInterfaceName = "_EOS_Platform_GetRTCInterface";
		private const string EOS_Platform_GetReportsInterfaceName = "_EOS_Platform_GetReportsInterface";
		private const string EOS_Platform_GetSanctionsInterfaceName = "_EOS_Platform_GetSanctionsInterface";
		private const string EOS_Platform_GetSessionsInterfaceName = "_EOS_Platform_GetSessionsInterface";
		private const string EOS_Platform_GetStatsInterfaceName = "_EOS_Platform_GetStatsInterface";
		private const string EOS_Platform_GetTitleStorageInterfaceName = "_EOS_Platform_GetTitleStorageInterface";
		private const string EOS_Platform_GetUIInterfaceName = "_EOS_Platform_GetUIInterface";
		private const string EOS_Platform_GetUserInfoInterfaceName = "_EOS_Platform_GetUserInfoInterface";
		private const string EOS_Platform_ReleaseName = "_EOS_Platform_Release";
		private const string EOS_Platform_SetApplicationStatusName = "_EOS_Platform_SetApplicationStatus";
		private const string EOS_Platform_SetNetworkStatusName = "_EOS_Platform_SetNetworkStatus";
		private const string EOS_Platform_SetOverrideCountryCodeName = "_EOS_Platform_SetOverrideCountryCode";
		private const string EOS_Platform_SetOverrideLocaleCodeName = "_EOS_Platform_SetOverrideLocaleCode";
		private const string EOS_Platform_TickName = "_EOS_Platform_Tick";
		private const string EOS_PlayerDataStorageFileTransferRequest_CancelRequestName = "_EOS_PlayerDataStorageFileTransferRequest_CancelRequest";
		private const string EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateName = "_EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState";
		private const string EOS_PlayerDataStorageFileTransferRequest_GetFilenameName = "_EOS_PlayerDataStorageFileTransferRequest_GetFilename";
		private const string EOS_PlayerDataStorageFileTransferRequest_ReleaseName = "_EOS_PlayerDataStorageFileTransferRequest_Release";
		private const string EOS_PlayerDataStorage_CopyFileMetadataAtIndexName = "_EOS_PlayerDataStorage_CopyFileMetadataAtIndex";
		private const string EOS_PlayerDataStorage_CopyFileMetadataByFilenameName = "_EOS_PlayerDataStorage_CopyFileMetadataByFilename";
		private const string EOS_PlayerDataStorage_DeleteCacheName = "_EOS_PlayerDataStorage_DeleteCache";
		private const string EOS_PlayerDataStorage_DeleteFileName = "_EOS_PlayerDataStorage_DeleteFile";
		private const string EOS_PlayerDataStorage_DuplicateFileName = "_EOS_PlayerDataStorage_DuplicateFile";
		private const string EOS_PlayerDataStorage_FileMetadata_ReleaseName = "_EOS_PlayerDataStorage_FileMetadata_Release";
		private const string EOS_PlayerDataStorage_GetFileMetadataCountName = "_EOS_PlayerDataStorage_GetFileMetadataCount";
		private const string EOS_PlayerDataStorage_QueryFileName = "_EOS_PlayerDataStorage_QueryFile";
		private const string EOS_PlayerDataStorage_QueryFileListName = "_EOS_PlayerDataStorage_QueryFileList";
		private const string EOS_PlayerDataStorage_ReadFileName = "_EOS_PlayerDataStorage_ReadFile";
		private const string EOS_PlayerDataStorage_WriteFileName = "_EOS_PlayerDataStorage_WriteFile";
		private const string EOS_PresenceModification_DeleteDataName = "_EOS_PresenceModification_DeleteData";
		private const string EOS_PresenceModification_ReleaseName = "_EOS_PresenceModification_Release";
		private const string EOS_PresenceModification_SetDataName = "_EOS_PresenceModification_SetData";
		private const string EOS_PresenceModification_SetJoinInfoName = "_EOS_PresenceModification_SetJoinInfo";
		private const string EOS_PresenceModification_SetRawRichTextName = "_EOS_PresenceModification_SetRawRichText";
		private const string EOS_PresenceModification_SetStatusName = "_EOS_PresenceModification_SetStatus";
		private const string EOS_Presence_AddNotifyJoinGameAcceptedName = "_EOS_Presence_AddNotifyJoinGameAccepted";
		private const string EOS_Presence_AddNotifyOnPresenceChangedName = "_EOS_Presence_AddNotifyOnPresenceChanged";
		private const string EOS_Presence_CopyPresenceName = "_EOS_Presence_CopyPresence";
		private const string EOS_Presence_CreatePresenceModificationName = "_EOS_Presence_CreatePresenceModification";
		private const string EOS_Presence_GetJoinInfoName = "_EOS_Presence_GetJoinInfo";
		private const string EOS_Presence_HasPresenceName = "_EOS_Presence_HasPresence";
		private const string EOS_Presence_Info_ReleaseName = "_EOS_Presence_Info_Release";
		private const string EOS_Presence_QueryPresenceName = "_EOS_Presence_QueryPresence";
		private const string EOS_Presence_RemoveNotifyJoinGameAcceptedName = "_EOS_Presence_RemoveNotifyJoinGameAccepted";
		private const string EOS_Presence_RemoveNotifyOnPresenceChangedName = "_EOS_Presence_RemoveNotifyOnPresenceChanged";
		private const string EOS_Presence_SetPresenceName = "_EOS_Presence_SetPresence";
		private const string EOS_ProductUserId_FromStringName = "_EOS_ProductUserId_FromString";
		private const string EOS_ProductUserId_IsValidName = "_EOS_ProductUserId_IsValid";
		private const string EOS_ProductUserId_ToStringName = "_EOS_ProductUserId_ToString";
		private const string EOS_ProgressionSnapshot_AddProgressionName = "_EOS_ProgressionSnapshot_AddProgression";
		private const string EOS_ProgressionSnapshot_BeginSnapshotName = "_EOS_ProgressionSnapshot_BeginSnapshot";
		private const string EOS_ProgressionSnapshot_DeleteSnapshotName = "_EOS_ProgressionSnapshot_DeleteSnapshot";
		private const string EOS_ProgressionSnapshot_EndSnapshotName = "_EOS_ProgressionSnapshot_EndSnapshot";
		private const string EOS_ProgressionSnapshot_SubmitSnapshotName = "_EOS_ProgressionSnapshot_SubmitSnapshot";
		private const string EOS_RTCAdmin_CopyUserTokenByIndexName = "_EOS_RTCAdmin_CopyUserTokenByIndex";
		private const string EOS_RTCAdmin_CopyUserTokenByUserIdName = "_EOS_RTCAdmin_CopyUserTokenByUserId";
		private const string EOS_RTCAdmin_KickName = "_EOS_RTCAdmin_Kick";
		private const string EOS_RTCAdmin_QueryJoinRoomTokenName = "_EOS_RTCAdmin_QueryJoinRoomToken";
		private const string EOS_RTCAdmin_SetParticipantHardMuteName = "_EOS_RTCAdmin_SetParticipantHardMute";
		private const string EOS_RTCAdmin_UserToken_ReleaseName = "_EOS_RTCAdmin_UserToken_Release";
		private const string EOS_RTCAudio_AddNotifyAudioBeforeRenderName = "_EOS_RTCAudio_AddNotifyAudioBeforeRender";
		private const string EOS_RTCAudio_AddNotifyAudioBeforeSendName = "_EOS_RTCAudio_AddNotifyAudioBeforeSend";
		private const string EOS_RTCAudio_AddNotifyAudioDevicesChangedName = "_EOS_RTCAudio_AddNotifyAudioDevicesChanged";
		private const string EOS_RTCAudio_AddNotifyAudioInputStateName = "_EOS_RTCAudio_AddNotifyAudioInputState";
		private const string EOS_RTCAudio_AddNotifyAudioOutputStateName = "_EOS_RTCAudio_AddNotifyAudioOutputState";
		private const string EOS_RTCAudio_AddNotifyParticipantUpdatedName = "_EOS_RTCAudio_AddNotifyParticipantUpdated";
		private const string EOS_RTCAudio_CopyInputDeviceInformationByIndexName = "_EOS_RTCAudio_CopyInputDeviceInformationByIndex";
		private const string EOS_RTCAudio_CopyOutputDeviceInformationByIndexName = "_EOS_RTCAudio_CopyOutputDeviceInformationByIndex";
		private const string EOS_RTCAudio_GetAudioInputDeviceByIndexName = "_EOS_RTCAudio_GetAudioInputDeviceByIndex";
		private const string EOS_RTCAudio_GetAudioInputDevicesCountName = "_EOS_RTCAudio_GetAudioInputDevicesCount";
		private const string EOS_RTCAudio_GetAudioOutputDeviceByIndexName = "_EOS_RTCAudio_GetAudioOutputDeviceByIndex";
		private const string EOS_RTCAudio_GetAudioOutputDevicesCountName = "_EOS_RTCAudio_GetAudioOutputDevicesCount";
		private const string EOS_RTCAudio_GetInputDevicesCountName = "_EOS_RTCAudio_GetInputDevicesCount";
		private const string EOS_RTCAudio_GetOutputDevicesCountName = "_EOS_RTCAudio_GetOutputDevicesCount";
		private const string EOS_RTCAudio_InputDeviceInformation_ReleaseName = "_EOS_RTCAudio_InputDeviceInformation_Release";
		private const string EOS_RTCAudio_OutputDeviceInformation_ReleaseName = "_EOS_RTCAudio_OutputDeviceInformation_Release";
		private const string EOS_RTCAudio_QueryInputDevicesInformationName = "_EOS_RTCAudio_QueryInputDevicesInformation";
		private const string EOS_RTCAudio_QueryOutputDevicesInformationName = "_EOS_RTCAudio_QueryOutputDevicesInformation";
		private const string EOS_RTCAudio_RegisterPlatformAudioUserName = "_EOS_RTCAudio_RegisterPlatformAudioUser";
		private const string EOS_RTCAudio_RegisterPlatformUserName = "_EOS_RTCAudio_RegisterPlatformUser";
		private const string EOS_RTCAudio_RemoveNotifyAudioBeforeRenderName = "_EOS_RTCAudio_RemoveNotifyAudioBeforeRender";
		private const string EOS_RTCAudio_RemoveNotifyAudioBeforeSendName = "_EOS_RTCAudio_RemoveNotifyAudioBeforeSend";
		private const string EOS_RTCAudio_RemoveNotifyAudioDevicesChangedName = "_EOS_RTCAudio_RemoveNotifyAudioDevicesChanged";
		private const string EOS_RTCAudio_RemoveNotifyAudioInputStateName = "_EOS_RTCAudio_RemoveNotifyAudioInputState";
		private const string EOS_RTCAudio_RemoveNotifyAudioOutputStateName = "_EOS_RTCAudio_RemoveNotifyAudioOutputState";
		private const string EOS_RTCAudio_RemoveNotifyParticipantUpdatedName = "_EOS_RTCAudio_RemoveNotifyParticipantUpdated";
		private const string EOS_RTCAudio_SendAudioName = "_EOS_RTCAudio_SendAudio";
		private const string EOS_RTCAudio_SetAudioInputSettingsName = "_EOS_RTCAudio_SetAudioInputSettings";
		private const string EOS_RTCAudio_SetAudioOutputSettingsName = "_EOS_RTCAudio_SetAudioOutputSettings";
		private const string EOS_RTCAudio_SetInputDeviceSettingsName = "_EOS_RTCAudio_SetInputDeviceSettings";
		private const string EOS_RTCAudio_SetOutputDeviceSettingsName = "_EOS_RTCAudio_SetOutputDeviceSettings";
		private const string EOS_RTCAudio_UnregisterPlatformAudioUserName = "_EOS_RTCAudio_UnregisterPlatformAudioUser";
		private const string EOS_RTCAudio_UnregisterPlatformUserName = "_EOS_RTCAudio_UnregisterPlatformUser";
		private const string EOS_RTCAudio_UpdateParticipantVolumeName = "_EOS_RTCAudio_UpdateParticipantVolume";
		private const string EOS_RTCAudio_UpdateReceivingName = "_EOS_RTCAudio_UpdateReceiving";
		private const string EOS_RTCAudio_UpdateReceivingVolumeName = "_EOS_RTCAudio_UpdateReceivingVolume";
		private const string EOS_RTCAudio_UpdateSendingName = "_EOS_RTCAudio_UpdateSending";
		private const string EOS_RTCAudio_UpdateSendingVolumeName = "_EOS_RTCAudio_UpdateSendingVolume";
		private const string EOS_RTCData_AddNotifyDataReceivedName = "_EOS_RTCData_AddNotifyDataReceived";
		private const string EOS_RTCData_AddNotifyParticipantUpdatedName = "_EOS_RTCData_AddNotifyParticipantUpdated";
		private const string EOS_RTCData_RemoveNotifyDataReceivedName = "_EOS_RTCData_RemoveNotifyDataReceived";
		private const string EOS_RTCData_RemoveNotifyParticipantUpdatedName = "_EOS_RTCData_RemoveNotifyParticipantUpdated";
		private const string EOS_RTCData_SendDataName = "_EOS_RTCData_SendData";
		private const string EOS_RTCData_UpdateReceivingName = "_EOS_RTCData_UpdateReceiving";
		private const string EOS_RTCData_UpdateSendingName = "_EOS_RTCData_UpdateSending";
		private const string EOS_RTC_AddNotifyDisconnectedName = "_EOS_RTC_AddNotifyDisconnected";
		private const string EOS_RTC_AddNotifyParticipantStatusChangedName = "_EOS_RTC_AddNotifyParticipantStatusChanged";
		private const string EOS_RTC_AddNotifyRoomStatisticsUpdatedName = "_EOS_RTC_AddNotifyRoomStatisticsUpdated";
		private const string EOS_RTC_BlockParticipantName = "_EOS_RTC_BlockParticipant";
		private const string EOS_RTC_GetAudioInterfaceName = "_EOS_RTC_GetAudioInterface";
		private const string EOS_RTC_GetDataInterfaceName = "_EOS_RTC_GetDataInterface";
		private const string EOS_RTC_JoinRoomName = "_EOS_RTC_JoinRoom";
		private const string EOS_RTC_LeaveRoomName = "_EOS_RTC_LeaveRoom";
		private const string EOS_RTC_RemoveNotifyDisconnectedName = "_EOS_RTC_RemoveNotifyDisconnected";
		private const string EOS_RTC_RemoveNotifyParticipantStatusChangedName = "_EOS_RTC_RemoveNotifyParticipantStatusChanged";
		private const string EOS_RTC_RemoveNotifyRoomStatisticsUpdatedName = "_EOS_RTC_RemoveNotifyRoomStatisticsUpdated";
		private const string EOS_RTC_SetRoomSettingName = "_EOS_RTC_SetRoomSetting";
		private const string EOS_RTC_SetSettingName = "_EOS_RTC_SetSetting";
		private const string EOS_Reports_SendPlayerBehaviorReportName = "_EOS_Reports_SendPlayerBehaviorReport";
		private const string EOS_Sanctions_CopyPlayerSanctionByIndexName = "_EOS_Sanctions_CopyPlayerSanctionByIndex";
		private const string EOS_Sanctions_CreatePlayerSanctionAppealName = "_EOS_Sanctions_CreatePlayerSanctionAppeal";
		private const string EOS_Sanctions_GetPlayerSanctionCountName = "_EOS_Sanctions_GetPlayerSanctionCount";
		private const string EOS_Sanctions_PlayerSanction_ReleaseName = "_EOS_Sanctions_PlayerSanction_Release";
		private const string EOS_Sanctions_QueryActivePlayerSanctionsName = "_EOS_Sanctions_QueryActivePlayerSanctions";
		private const string EOS_SessionDetails_Attribute_ReleaseName = "_EOS_SessionDetails_Attribute_Release";
		private const string EOS_SessionDetails_CopyInfoName = "_EOS_SessionDetails_CopyInfo";
		private const string EOS_SessionDetails_CopySessionAttributeByIndexName = "_EOS_SessionDetails_CopySessionAttributeByIndex";
		private const string EOS_SessionDetails_CopySessionAttributeByKeyName = "_EOS_SessionDetails_CopySessionAttributeByKey";
		private const string EOS_SessionDetails_GetSessionAttributeCountName = "_EOS_SessionDetails_GetSessionAttributeCount";
		private const string EOS_SessionDetails_Info_ReleaseName = "_EOS_SessionDetails_Info_Release";
		private const string EOS_SessionDetails_ReleaseName = "_EOS_SessionDetails_Release";
		private const string EOS_SessionModification_AddAttributeName = "_EOS_SessionModification_AddAttribute";
		private const string EOS_SessionModification_ReleaseName = "_EOS_SessionModification_Release";
		private const string EOS_SessionModification_RemoveAttributeName = "_EOS_SessionModification_RemoveAttribute";
		private const string EOS_SessionModification_SetAllowedPlatformIdsName = "_EOS_SessionModification_SetAllowedPlatformIds";
		private const string EOS_SessionModification_SetBucketIdName = "_EOS_SessionModification_SetBucketId";
		private const string EOS_SessionModification_SetHostAddressName = "_EOS_SessionModification_SetHostAddress";
		private const string EOS_SessionModification_SetInvitesAllowedName = "_EOS_SessionModification_SetInvitesAllowed";
		private const string EOS_SessionModification_SetJoinInProgressAllowedName = "_EOS_SessionModification_SetJoinInProgressAllowed";
		private const string EOS_SessionModification_SetMaxPlayersName = "_EOS_SessionModification_SetMaxPlayers";
		private const string EOS_SessionModification_SetPermissionLevelName = "_EOS_SessionModification_SetPermissionLevel";
		private const string EOS_SessionSearch_CopySearchResultByIndexName = "_EOS_SessionSearch_CopySearchResultByIndex";
		private const string EOS_SessionSearch_FindName = "_EOS_SessionSearch_Find";
		private const string EOS_SessionSearch_GetSearchResultCountName = "_EOS_SessionSearch_GetSearchResultCount";
		private const string EOS_SessionSearch_ReleaseName = "_EOS_SessionSearch_Release";
		private const string EOS_SessionSearch_RemoveParameterName = "_EOS_SessionSearch_RemoveParameter";
		private const string EOS_SessionSearch_SetMaxResultsName = "_EOS_SessionSearch_SetMaxResults";
		private const string EOS_SessionSearch_SetParameterName = "_EOS_SessionSearch_SetParameter";
		private const string EOS_SessionSearch_SetSessionIdName = "_EOS_SessionSearch_SetSessionId";
		private const string EOS_SessionSearch_SetTargetUserIdName = "_EOS_SessionSearch_SetTargetUserId";
		private const string EOS_Sessions_AddNotifyJoinSessionAcceptedName = "_EOS_Sessions_AddNotifyJoinSessionAccepted";
		private const string EOS_Sessions_AddNotifyLeaveSessionRequestedName = "_EOS_Sessions_AddNotifyLeaveSessionRequested";
		private const string EOS_Sessions_AddNotifySendSessionNativeInviteRequestedName = "_EOS_Sessions_AddNotifySendSessionNativeInviteRequested";
		private const string EOS_Sessions_AddNotifySessionInviteAcceptedName = "_EOS_Sessions_AddNotifySessionInviteAccepted";
		private const string EOS_Sessions_AddNotifySessionInviteReceivedName = "_EOS_Sessions_AddNotifySessionInviteReceived";
		private const string EOS_Sessions_AddNotifySessionInviteRejectedName = "_EOS_Sessions_AddNotifySessionInviteRejected";
		private const string EOS_Sessions_CopyActiveSessionHandleName = "_EOS_Sessions_CopyActiveSessionHandle";
		private const string EOS_Sessions_CopySessionHandleByInviteIdName = "_EOS_Sessions_CopySessionHandleByInviteId";
		private const string EOS_Sessions_CopySessionHandleByUiEventIdName = "_EOS_Sessions_CopySessionHandleByUiEventId";
		private const string EOS_Sessions_CopySessionHandleForPresenceName = "_EOS_Sessions_CopySessionHandleForPresence";
		private const string EOS_Sessions_CreateSessionModificationName = "_EOS_Sessions_CreateSessionModification";
		private const string EOS_Sessions_CreateSessionSearchName = "_EOS_Sessions_CreateSessionSearch";
		private const string EOS_Sessions_DestroySessionName = "_EOS_Sessions_DestroySession";
		private const string EOS_Sessions_DumpSessionStateName = "_EOS_Sessions_DumpSessionState";
		private const string EOS_Sessions_EndSessionName = "_EOS_Sessions_EndSession";
		private const string EOS_Sessions_GetInviteCountName = "_EOS_Sessions_GetInviteCount";
		private const string EOS_Sessions_GetInviteIdByIndexName = "_EOS_Sessions_GetInviteIdByIndex";
		private const string EOS_Sessions_IsUserInSessionName = "_EOS_Sessions_IsUserInSession";
		private const string EOS_Sessions_JoinSessionName = "_EOS_Sessions_JoinSession";
		private const string EOS_Sessions_QueryInvitesName = "_EOS_Sessions_QueryInvites";
		private const string EOS_Sessions_RegisterPlayersName = "_EOS_Sessions_RegisterPlayers";
		private const string EOS_Sessions_RejectInviteName = "_EOS_Sessions_RejectInvite";
		private const string EOS_Sessions_RemoveNotifyJoinSessionAcceptedName = "_EOS_Sessions_RemoveNotifyJoinSessionAccepted";
		private const string EOS_Sessions_RemoveNotifyLeaveSessionRequestedName = "_EOS_Sessions_RemoveNotifyLeaveSessionRequested";
		private const string EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedName = "_EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested";
		private const string EOS_Sessions_RemoveNotifySessionInviteAcceptedName = "_EOS_Sessions_RemoveNotifySessionInviteAccepted";
		private const string EOS_Sessions_RemoveNotifySessionInviteReceivedName = "_EOS_Sessions_RemoveNotifySessionInviteReceived";
		private const string EOS_Sessions_RemoveNotifySessionInviteRejectedName = "_EOS_Sessions_RemoveNotifySessionInviteRejected";
		private const string EOS_Sessions_SendInviteName = "_EOS_Sessions_SendInvite";
		private const string EOS_Sessions_StartSessionName = "_EOS_Sessions_StartSession";
		private const string EOS_Sessions_UnregisterPlayersName = "_EOS_Sessions_UnregisterPlayers";
		private const string EOS_Sessions_UpdateSessionName = "_EOS_Sessions_UpdateSession";
		private const string EOS_Sessions_UpdateSessionModificationName = "_EOS_Sessions_UpdateSessionModification";
		private const string EOS_ShutdownName = "_EOS_Shutdown";
		private const string EOS_Stats_CopyStatByIndexName = "_EOS_Stats_CopyStatByIndex";
		private const string EOS_Stats_CopyStatByNameName = "_EOS_Stats_CopyStatByName";
		private const string EOS_Stats_GetStatsCountName = "_EOS_Stats_GetStatsCount";
		private const string EOS_Stats_IngestStatName = "_EOS_Stats_IngestStat";
		private const string EOS_Stats_QueryStatsName = "_EOS_Stats_QueryStats";
		private const string EOS_Stats_Stat_ReleaseName = "_EOS_Stats_Stat_Release";
		private const string EOS_TitleStorageFileTransferRequest_CancelRequestName = "_EOS_TitleStorageFileTransferRequest_CancelRequest";
		private const string EOS_TitleStorageFileTransferRequest_GetFileRequestStateName = "_EOS_TitleStorageFileTransferRequest_GetFileRequestState";
		private const string EOS_TitleStorageFileTransferRequest_GetFilenameName = "_EOS_TitleStorageFileTransferRequest_GetFilename";
		private const string EOS_TitleStorageFileTransferRequest_ReleaseName = "_EOS_TitleStorageFileTransferRequest_Release";
		private const string EOS_TitleStorage_CopyFileMetadataAtIndexName = "_EOS_TitleStorage_CopyFileMetadataAtIndex";
		private const string EOS_TitleStorage_CopyFileMetadataByFilenameName = "_EOS_TitleStorage_CopyFileMetadataByFilename";
		private const string EOS_TitleStorage_DeleteCacheName = "_EOS_TitleStorage_DeleteCache";
		private const string EOS_TitleStorage_FileMetadata_ReleaseName = "_EOS_TitleStorage_FileMetadata_Release";
		private const string EOS_TitleStorage_GetFileMetadataCountName = "_EOS_TitleStorage_GetFileMetadataCount";
		private const string EOS_TitleStorage_QueryFileName = "_EOS_TitleStorage_QueryFile";
		private const string EOS_TitleStorage_QueryFileListName = "_EOS_TitleStorage_QueryFileList";
		private const string EOS_TitleStorage_ReadFileName = "_EOS_TitleStorage_ReadFile";
		private const string EOS_UI_AcknowledgeEventIdName = "_EOS_UI_AcknowledgeEventId";
		private const string EOS_UI_AddNotifyDisplaySettingsUpdatedName = "_EOS_UI_AddNotifyDisplaySettingsUpdated";
		private const string EOS_UI_AddNotifyMemoryMonitorName = "_EOS_UI_AddNotifyMemoryMonitor";
		private const string EOS_UI_GetFriendsExclusiveInputName = "_EOS_UI_GetFriendsExclusiveInput";
		private const string EOS_UI_GetFriendsVisibleName = "_EOS_UI_GetFriendsVisible";
		private const string EOS_UI_GetNotificationLocationPreferenceName = "_EOS_UI_GetNotificationLocationPreference";
		private const string EOS_UI_GetToggleFriendsButtonName = "_EOS_UI_GetToggleFriendsButton";
		private const string EOS_UI_GetToggleFriendsKeyName = "_EOS_UI_GetToggleFriendsKey";
		private const string EOS_UI_HideFriendsName = "_EOS_UI_HideFriends";
		private const string EOS_UI_IsSocialOverlayPausedName = "_EOS_UI_IsSocialOverlayPaused";
		private const string EOS_UI_IsValidButtonCombinationName = "_EOS_UI_IsValidButtonCombination";
		private const string EOS_UI_IsValidKeyCombinationName = "_EOS_UI_IsValidKeyCombination";
		private const string EOS_UI_PauseSocialOverlayName = "_EOS_UI_PauseSocialOverlay";
		private const string EOS_UI_PrePresentName = "_EOS_UI_PrePresent";
		private const string EOS_UI_RemoveNotifyDisplaySettingsUpdatedName = "_EOS_UI_RemoveNotifyDisplaySettingsUpdated";
		private const string EOS_UI_RemoveNotifyMemoryMonitorName = "_EOS_UI_RemoveNotifyMemoryMonitor";
		private const string EOS_UI_ReportInputStateName = "_EOS_UI_ReportInputState";
		private const string EOS_UI_SetDisplayPreferenceName = "_EOS_UI_SetDisplayPreference";
		private const string EOS_UI_SetToggleFriendsButtonName = "_EOS_UI_SetToggleFriendsButton";
		private const string EOS_UI_SetToggleFriendsKeyName = "_EOS_UI_SetToggleFriendsKey";
		private const string EOS_UI_ShowBlockPlayerName = "_EOS_UI_ShowBlockPlayer";
		private const string EOS_UI_ShowFriendsName = "_EOS_UI_ShowFriends";
		private const string EOS_UI_ShowNativeProfileName = "_EOS_UI_ShowNativeProfile";
		private const string EOS_UI_ShowReportPlayerName = "_EOS_UI_ShowReportPlayer";
		private const string EOS_UserInfo_BestDisplayName_ReleaseName = "_EOS_UserInfo_BestDisplayName_Release";
		private const string EOS_UserInfo_CopyBestDisplayNameName = "_EOS_UserInfo_CopyBestDisplayName";
		private const string EOS_UserInfo_CopyBestDisplayNameWithPlatformName = "_EOS_UserInfo_CopyBestDisplayNameWithPlatform";
		private const string EOS_UserInfo_CopyExternalUserInfoByAccountIdName = "_EOS_UserInfo_CopyExternalUserInfoByAccountId";
		private const string EOS_UserInfo_CopyExternalUserInfoByAccountTypeName = "_EOS_UserInfo_CopyExternalUserInfoByAccountType";
		private const string EOS_UserInfo_CopyExternalUserInfoByIndexName = "_EOS_UserInfo_CopyExternalUserInfoByIndex";
		private const string EOS_UserInfo_CopyUserInfoName = "_EOS_UserInfo_CopyUserInfo";
		private const string EOS_UserInfo_ExternalUserInfo_ReleaseName = "_EOS_UserInfo_ExternalUserInfo_Release";
		private const string EOS_UserInfo_GetExternalUserInfoCountName = "_EOS_UserInfo_GetExternalUserInfoCount";
		private const string EOS_UserInfo_GetLocalPlatformTypeName = "_EOS_UserInfo_GetLocalPlatformType";
		private const string EOS_UserInfo_QueryUserInfoName = "_EOS_UserInfo_QueryUserInfo";
		private const string EOS_UserInfo_QueryUserInfoByDisplayNameName = "_EOS_UserInfo_QueryUserInfoByDisplayName";
		private const string EOS_UserInfo_QueryUserInfoByExternalAccountName = "_EOS_UserInfo_QueryUserInfoByExternalAccount";
		private const string EOS_UserInfo_ReleaseName = "_EOS_UserInfo_Release";
#endif
#if EOS_DYNAMIC_BINDINGS_MANGLING_WINDOWS_32
		private const string EOS_Achievements_AddNotifyAchievementsUnlockedName = "_EOS_Achievements_AddNotifyAchievementsUnlocked@16";
		private const string EOS_Achievements_AddNotifyAchievementsUnlockedV2Name = "_EOS_Achievements_AddNotifyAchievementsUnlockedV2@16";
		private const string EOS_Achievements_CopyAchievementDefinitionByAchievementIdName = "_EOS_Achievements_CopyAchievementDefinitionByAchievementId@12";
		private const string EOS_Achievements_CopyAchievementDefinitionByIndexName = "_EOS_Achievements_CopyAchievementDefinitionByIndex@12";
		private const string EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdName = "_EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId@12";
		private const string EOS_Achievements_CopyAchievementDefinitionV2ByIndexName = "_EOS_Achievements_CopyAchievementDefinitionV2ByIndex@12";
		private const string EOS_Achievements_CopyPlayerAchievementByAchievementIdName = "_EOS_Achievements_CopyPlayerAchievementByAchievementId@12";
		private const string EOS_Achievements_CopyPlayerAchievementByIndexName = "_EOS_Achievements_CopyPlayerAchievementByIndex@12";
		private const string EOS_Achievements_CopyUnlockedAchievementByAchievementIdName = "_EOS_Achievements_CopyUnlockedAchievementByAchievementId@12";
		private const string EOS_Achievements_CopyUnlockedAchievementByIndexName = "_EOS_Achievements_CopyUnlockedAchievementByIndex@12";
		private const string EOS_Achievements_DefinitionV2_ReleaseName = "_EOS_Achievements_DefinitionV2_Release@4";
		private const string EOS_Achievements_Definition_ReleaseName = "_EOS_Achievements_Definition_Release@4";
		private const string EOS_Achievements_GetAchievementDefinitionCountName = "_EOS_Achievements_GetAchievementDefinitionCount@8";
		private const string EOS_Achievements_GetPlayerAchievementCountName = "_EOS_Achievements_GetPlayerAchievementCount@8";
		private const string EOS_Achievements_GetUnlockedAchievementCountName = "_EOS_Achievements_GetUnlockedAchievementCount@8";
		private const string EOS_Achievements_PlayerAchievement_ReleaseName = "_EOS_Achievements_PlayerAchievement_Release@4";
		private const string EOS_Achievements_QueryDefinitionsName = "_EOS_Achievements_QueryDefinitions@16";
		private const string EOS_Achievements_QueryPlayerAchievementsName = "_EOS_Achievements_QueryPlayerAchievements@16";
		private const string EOS_Achievements_RemoveNotifyAchievementsUnlockedName = "_EOS_Achievements_RemoveNotifyAchievementsUnlocked@12";
		private const string EOS_Achievements_UnlockAchievementsName = "_EOS_Achievements_UnlockAchievements@16";
		private const string EOS_Achievements_UnlockedAchievement_ReleaseName = "_EOS_Achievements_UnlockedAchievement_Release@4";
		private const string EOS_ActiveSession_CopyInfoName = "_EOS_ActiveSession_CopyInfo@12";
		private const string EOS_ActiveSession_GetRegisteredPlayerByIndexName = "_EOS_ActiveSession_GetRegisteredPlayerByIndex@8";
		private const string EOS_ActiveSession_GetRegisteredPlayerCountName = "_EOS_ActiveSession_GetRegisteredPlayerCount@8";
		private const string EOS_ActiveSession_Info_ReleaseName = "_EOS_ActiveSession_Info_Release@4";
		private const string EOS_ActiveSession_ReleaseName = "_EOS_ActiveSession_Release@4";
		private const string EOS_AntiCheatClient_AddExternalIntegrityCatalogName = "_EOS_AntiCheatClient_AddExternalIntegrityCatalog@8";
		private const string EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedName = "_EOS_AntiCheatClient_AddNotifyClientIntegrityViolated@16";
		private const string EOS_AntiCheatClient_AddNotifyMessageToPeerName = "_EOS_AntiCheatClient_AddNotifyMessageToPeer@16";
		private const string EOS_AntiCheatClient_AddNotifyMessageToServerName = "_EOS_AntiCheatClient_AddNotifyMessageToServer@16";
		private const string EOS_AntiCheatClient_AddNotifyPeerActionRequiredName = "_EOS_AntiCheatClient_AddNotifyPeerActionRequired@16";
		private const string EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedName = "_EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged@16";
		private const string EOS_AntiCheatClient_BeginSessionName = "_EOS_AntiCheatClient_BeginSession@8";
		private const string EOS_AntiCheatClient_EndSessionName = "_EOS_AntiCheatClient_EndSession@8";
		private const string EOS_AntiCheatClient_GetProtectMessageOutputLengthName = "_EOS_AntiCheatClient_GetProtectMessageOutputLength@12";
		private const string EOS_AntiCheatClient_PollStatusName = "_EOS_AntiCheatClient_PollStatus@16";
		private const string EOS_AntiCheatClient_ProtectMessageName = "_EOS_AntiCheatClient_ProtectMessage@16";
		private const string EOS_AntiCheatClient_ReceiveMessageFromPeerName = "_EOS_AntiCheatClient_ReceiveMessageFromPeer@8";
		private const string EOS_AntiCheatClient_ReceiveMessageFromServerName = "_EOS_AntiCheatClient_ReceiveMessageFromServer@8";
		private const string EOS_AntiCheatClient_RegisterPeerName = "_EOS_AntiCheatClient_RegisterPeer@8";
		private const string EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedName = "_EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated@12";
		private const string EOS_AntiCheatClient_RemoveNotifyMessageToPeerName = "_EOS_AntiCheatClient_RemoveNotifyMessageToPeer@12";
		private const string EOS_AntiCheatClient_RemoveNotifyMessageToServerName = "_EOS_AntiCheatClient_RemoveNotifyMessageToServer@12";
		private const string EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredName = "_EOS_AntiCheatClient_RemoveNotifyPeerActionRequired@12";
		private const string EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedName = "_EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged@12";
		private const string EOS_AntiCheatClient_Reserved01Name = "_EOS_AntiCheatClient_Reserved01@12";
		private const string EOS_AntiCheatClient_UnprotectMessageName = "_EOS_AntiCheatClient_UnprotectMessage@16";
		private const string EOS_AntiCheatClient_UnregisterPeerName = "_EOS_AntiCheatClient_UnregisterPeer@8";
		private const string EOS_AntiCheatServer_AddNotifyClientActionRequiredName = "_EOS_AntiCheatServer_AddNotifyClientActionRequired@16";
		private const string EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedName = "_EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged@16";
		private const string EOS_AntiCheatServer_AddNotifyMessageToClientName = "_EOS_AntiCheatServer_AddNotifyMessageToClient@16";
		private const string EOS_AntiCheatServer_BeginSessionName = "_EOS_AntiCheatServer_BeginSession@8";
		private const string EOS_AntiCheatServer_EndSessionName = "_EOS_AntiCheatServer_EndSession@8";
		private const string EOS_AntiCheatServer_GetProtectMessageOutputLengthName = "_EOS_AntiCheatServer_GetProtectMessageOutputLength@12";
		private const string EOS_AntiCheatServer_LogEventName = "_EOS_AntiCheatServer_LogEvent@8";
		private const string EOS_AntiCheatServer_LogGameRoundEndName = "_EOS_AntiCheatServer_LogGameRoundEnd@8";
		private const string EOS_AntiCheatServer_LogGameRoundStartName = "_EOS_AntiCheatServer_LogGameRoundStart@8";
		private const string EOS_AntiCheatServer_LogPlayerDespawnName = "_EOS_AntiCheatServer_LogPlayerDespawn@8";
		private const string EOS_AntiCheatServer_LogPlayerReviveName = "_EOS_AntiCheatServer_LogPlayerRevive@8";
		private const string EOS_AntiCheatServer_LogPlayerSpawnName = "_EOS_AntiCheatServer_LogPlayerSpawn@8";
		private const string EOS_AntiCheatServer_LogPlayerTakeDamageName = "_EOS_AntiCheatServer_LogPlayerTakeDamage@8";
		private const string EOS_AntiCheatServer_LogPlayerTickName = "_EOS_AntiCheatServer_LogPlayerTick@8";
		private const string EOS_AntiCheatServer_LogPlayerUseAbilityName = "_EOS_AntiCheatServer_LogPlayerUseAbility@8";
		private const string EOS_AntiCheatServer_LogPlayerUseWeaponName = "_EOS_AntiCheatServer_LogPlayerUseWeapon@8";
		private const string EOS_AntiCheatServer_ProtectMessageName = "_EOS_AntiCheatServer_ProtectMessage@16";
		private const string EOS_AntiCheatServer_ReceiveMessageFromClientName = "_EOS_AntiCheatServer_ReceiveMessageFromClient@8";
		private const string EOS_AntiCheatServer_RegisterClientName = "_EOS_AntiCheatServer_RegisterClient@8";
		private const string EOS_AntiCheatServer_RegisterEventName = "_EOS_AntiCheatServer_RegisterEvent@8";
		private const string EOS_AntiCheatServer_RemoveNotifyClientActionRequiredName = "_EOS_AntiCheatServer_RemoveNotifyClientActionRequired@12";
		private const string EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedName = "_EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged@12";
		private const string EOS_AntiCheatServer_RemoveNotifyMessageToClientName = "_EOS_AntiCheatServer_RemoveNotifyMessageToClient@12";
		private const string EOS_AntiCheatServer_SetClientDetailsName = "_EOS_AntiCheatServer_SetClientDetails@8";
		private const string EOS_AntiCheatServer_SetClientNetworkStateName = "_EOS_AntiCheatServer_SetClientNetworkState@8";
		private const string EOS_AntiCheatServer_SetGameSessionIdName = "_EOS_AntiCheatServer_SetGameSessionId@8";
		private const string EOS_AntiCheatServer_UnprotectMessageName = "_EOS_AntiCheatServer_UnprotectMessage@16";
		private const string EOS_AntiCheatServer_UnregisterClientName = "_EOS_AntiCheatServer_UnregisterClient@8";
		private const string EOS_Auth_AddNotifyLoginStatusChangedName = "_EOS_Auth_AddNotifyLoginStatusChanged@16";
		private const string EOS_Auth_CopyIdTokenName = "_EOS_Auth_CopyIdToken@12";
		private const string EOS_Auth_CopyUserAuthTokenName = "_EOS_Auth_CopyUserAuthToken@16";
		private const string EOS_Auth_DeletePersistentAuthName = "_EOS_Auth_DeletePersistentAuth@16";
		private const string EOS_Auth_GetLoggedInAccountByIndexName = "_EOS_Auth_GetLoggedInAccountByIndex@8";
		private const string EOS_Auth_GetLoggedInAccountsCountName = "_EOS_Auth_GetLoggedInAccountsCount@4";
		private const string EOS_Auth_GetLoginStatusName = "_EOS_Auth_GetLoginStatus@8";
		private const string EOS_Auth_GetMergedAccountByIndexName = "_EOS_Auth_GetMergedAccountByIndex@12";
		private const string EOS_Auth_GetMergedAccountsCountName = "_EOS_Auth_GetMergedAccountsCount@8";
		private const string EOS_Auth_GetSelectedAccountIdName = "_EOS_Auth_GetSelectedAccountId@12";
		private const string EOS_Auth_IdToken_ReleaseName = "_EOS_Auth_IdToken_Release@4";
		private const string EOS_Auth_LinkAccountName = "_EOS_Auth_LinkAccount@16";
		private const string EOS_Auth_LoginName = "_EOS_Auth_Login@16";
		private const string EOS_Auth_LogoutName = "_EOS_Auth_Logout@16";
		private const string EOS_Auth_QueryIdTokenName = "_EOS_Auth_QueryIdToken@16";
		private const string EOS_Auth_RemoveNotifyLoginStatusChangedName = "_EOS_Auth_RemoveNotifyLoginStatusChanged@12";
		private const string EOS_Auth_Token_ReleaseName = "_EOS_Auth_Token_Release@4";
		private const string EOS_Auth_VerifyIdTokenName = "_EOS_Auth_VerifyIdToken@16";
		private const string EOS_Auth_VerifyUserAuthName = "_EOS_Auth_VerifyUserAuth@16";
		private const string EOS_ByteArray_ToStringName = "_EOS_ByteArray_ToString@16";
		private const string EOS_Connect_AddNotifyAuthExpirationName = "_EOS_Connect_AddNotifyAuthExpiration@16";
		private const string EOS_Connect_AddNotifyLoginStatusChangedName = "_EOS_Connect_AddNotifyLoginStatusChanged@16";
		private const string EOS_Connect_CopyIdTokenName = "_EOS_Connect_CopyIdToken@12";
		private const string EOS_Connect_CopyProductUserExternalAccountByAccountIdName = "_EOS_Connect_CopyProductUserExternalAccountByAccountId@12";
		private const string EOS_Connect_CopyProductUserExternalAccountByAccountTypeName = "_EOS_Connect_CopyProductUserExternalAccountByAccountType@12";
		private const string EOS_Connect_CopyProductUserExternalAccountByIndexName = "_EOS_Connect_CopyProductUserExternalAccountByIndex@12";
		private const string EOS_Connect_CopyProductUserInfoName = "_EOS_Connect_CopyProductUserInfo@12";
		private const string EOS_Connect_CreateDeviceIdName = "_EOS_Connect_CreateDeviceId@16";
		private const string EOS_Connect_CreateUserName = "_EOS_Connect_CreateUser@16";
		private const string EOS_Connect_DeleteDeviceIdName = "_EOS_Connect_DeleteDeviceId@16";
		private const string EOS_Connect_ExternalAccountInfo_ReleaseName = "_EOS_Connect_ExternalAccountInfo_Release@4";
		private const string EOS_Connect_GetExternalAccountMappingName = "_EOS_Connect_GetExternalAccountMapping@8";
		private const string EOS_Connect_GetLoggedInUserByIndexName = "_EOS_Connect_GetLoggedInUserByIndex@8";
		private const string EOS_Connect_GetLoggedInUsersCountName = "_EOS_Connect_GetLoggedInUsersCount@4";
		private const string EOS_Connect_GetLoginStatusName = "_EOS_Connect_GetLoginStatus@8";
		private const string EOS_Connect_GetProductUserExternalAccountCountName = "_EOS_Connect_GetProductUserExternalAccountCount@8";
		private const string EOS_Connect_GetProductUserIdMappingName = "_EOS_Connect_GetProductUserIdMapping@16";
		private const string EOS_Connect_IdToken_ReleaseName = "_EOS_Connect_IdToken_Release@4";
		private const string EOS_Connect_LinkAccountName = "_EOS_Connect_LinkAccount@16";
		private const string EOS_Connect_LoginName = "_EOS_Connect_Login@16";
		private const string EOS_Connect_LogoutName = "_EOS_Connect_Logout@16";
		private const string EOS_Connect_QueryExternalAccountMappingsName = "_EOS_Connect_QueryExternalAccountMappings@16";
		private const string EOS_Connect_QueryProductUserIdMappingsName = "_EOS_Connect_QueryProductUserIdMappings@16";
		private const string EOS_Connect_RemoveNotifyAuthExpirationName = "_EOS_Connect_RemoveNotifyAuthExpiration@12";
		private const string EOS_Connect_RemoveNotifyLoginStatusChangedName = "_EOS_Connect_RemoveNotifyLoginStatusChanged@12";
		private const string EOS_Connect_TransferDeviceIdAccountName = "_EOS_Connect_TransferDeviceIdAccount@16";
		private const string EOS_Connect_UnlinkAccountName = "_EOS_Connect_UnlinkAccount@16";
		private const string EOS_Connect_VerifyIdTokenName = "_EOS_Connect_VerifyIdToken@16";
		private const string EOS_ContinuanceToken_ToStringName = "_EOS_ContinuanceToken_ToString@12";
		private const string EOS_CustomInvites_AcceptRequestToJoinName = "_EOS_CustomInvites_AcceptRequestToJoin@16";
		private const string EOS_CustomInvites_AddNotifyCustomInviteAcceptedName = "_EOS_CustomInvites_AddNotifyCustomInviteAccepted@16";
		private const string EOS_CustomInvites_AddNotifyCustomInviteReceivedName = "_EOS_CustomInvites_AddNotifyCustomInviteReceived@16";
		private const string EOS_CustomInvites_AddNotifyCustomInviteRejectedName = "_EOS_CustomInvites_AddNotifyCustomInviteRejected@16";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinAcceptedName = "_EOS_CustomInvites_AddNotifyRequestToJoinAccepted@16";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinReceivedName = "_EOS_CustomInvites_AddNotifyRequestToJoinReceived@16";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinRejectedName = "_EOS_CustomInvites_AddNotifyRequestToJoinRejected@16";
		private const string EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedName = "_EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived@16";
		private const string EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedName = "_EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested@16";
		private const string EOS_CustomInvites_FinalizeInviteName = "_EOS_CustomInvites_FinalizeInvite@8";
		private const string EOS_CustomInvites_RejectRequestToJoinName = "_EOS_CustomInvites_RejectRequestToJoin@16";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedName = "_EOS_CustomInvites_RemoveNotifyCustomInviteAccepted@12";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteReceivedName = "_EOS_CustomInvites_RemoveNotifyCustomInviteReceived@12";
		private const string EOS_CustomInvites_RemoveNotifyCustomInviteRejectedName = "_EOS_CustomInvites_RemoveNotifyCustomInviteRejected@12";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted@12";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinReceived@12";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinRejected@12";
		private const string EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedName = "_EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived@12";
		private const string EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedName = "_EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested@12";
		private const string EOS_CustomInvites_SendCustomInviteName = "_EOS_CustomInvites_SendCustomInvite@16";
		private const string EOS_CustomInvites_SendRequestToJoinName = "_EOS_CustomInvites_SendRequestToJoin@16";
		private const string EOS_CustomInvites_SetCustomInviteName = "_EOS_CustomInvites_SetCustomInvite@8";
		private const string EOS_EApplicationStatus_ToStringName = "_EOS_EApplicationStatus_ToString@4";
		private const string EOS_ENetworkStatus_ToStringName = "_EOS_ENetworkStatus_ToString@4";
		private const string EOS_EResult_IsOperationCompleteName = "_EOS_EResult_IsOperationComplete@4";
		private const string EOS_EResult_ToStringName = "_EOS_EResult_ToString@4";
		private const string EOS_Ecom_CatalogItem_ReleaseName = "_EOS_Ecom_CatalogItem_Release@4";
		private const string EOS_Ecom_CatalogOffer_ReleaseName = "_EOS_Ecom_CatalogOffer_Release@4";
		private const string EOS_Ecom_CatalogRelease_ReleaseName = "_EOS_Ecom_CatalogRelease_Release@4";
		private const string EOS_Ecom_CheckoutName = "_EOS_Ecom_Checkout@16";
		private const string EOS_Ecom_CopyEntitlementByIdName = "_EOS_Ecom_CopyEntitlementById@12";
		private const string EOS_Ecom_CopyEntitlementByIndexName = "_EOS_Ecom_CopyEntitlementByIndex@12";
		private const string EOS_Ecom_CopyEntitlementByNameAndIndexName = "_EOS_Ecom_CopyEntitlementByNameAndIndex@12";
		private const string EOS_Ecom_CopyItemByIdName = "_EOS_Ecom_CopyItemById@12";
		private const string EOS_Ecom_CopyItemImageInfoByIndexName = "_EOS_Ecom_CopyItemImageInfoByIndex@12";
		private const string EOS_Ecom_CopyItemReleaseByIndexName = "_EOS_Ecom_CopyItemReleaseByIndex@12";
		private const string EOS_Ecom_CopyLastRedeemedEntitlementByIndexName = "_EOS_Ecom_CopyLastRedeemedEntitlementByIndex@16";
		private const string EOS_Ecom_CopyOfferByIdName = "_EOS_Ecom_CopyOfferById@12";
		private const string EOS_Ecom_CopyOfferByIndexName = "_EOS_Ecom_CopyOfferByIndex@12";
		private const string EOS_Ecom_CopyOfferImageInfoByIndexName = "_EOS_Ecom_CopyOfferImageInfoByIndex@12";
		private const string EOS_Ecom_CopyOfferItemByIndexName = "_EOS_Ecom_CopyOfferItemByIndex@12";
		private const string EOS_Ecom_CopyTransactionByIdName = "_EOS_Ecom_CopyTransactionById@12";
		private const string EOS_Ecom_CopyTransactionByIndexName = "_EOS_Ecom_CopyTransactionByIndex@12";
		private const string EOS_Ecom_Entitlement_ReleaseName = "_EOS_Ecom_Entitlement_Release@4";
		private const string EOS_Ecom_GetEntitlementsByNameCountName = "_EOS_Ecom_GetEntitlementsByNameCount@8";
		private const string EOS_Ecom_GetEntitlementsCountName = "_EOS_Ecom_GetEntitlementsCount@8";
		private const string EOS_Ecom_GetItemImageInfoCountName = "_EOS_Ecom_GetItemImageInfoCount@8";
		private const string EOS_Ecom_GetItemReleaseCountName = "_EOS_Ecom_GetItemReleaseCount@8";
		private const string EOS_Ecom_GetLastRedeemedEntitlementsCountName = "_EOS_Ecom_GetLastRedeemedEntitlementsCount@8";
		private const string EOS_Ecom_GetOfferCountName = "_EOS_Ecom_GetOfferCount@8";
		private const string EOS_Ecom_GetOfferImageInfoCountName = "_EOS_Ecom_GetOfferImageInfoCount@8";
		private const string EOS_Ecom_GetOfferItemCountName = "_EOS_Ecom_GetOfferItemCount@8";
		private const string EOS_Ecom_GetTransactionCountName = "_EOS_Ecom_GetTransactionCount@8";
		private const string EOS_Ecom_KeyImageInfo_ReleaseName = "_EOS_Ecom_KeyImageInfo_Release@4";
		private const string EOS_Ecom_QueryEntitlementTokenName = "_EOS_Ecom_QueryEntitlementToken@16";
		private const string EOS_Ecom_QueryEntitlementsName = "_EOS_Ecom_QueryEntitlements@16";
		private const string EOS_Ecom_QueryOffersName = "_EOS_Ecom_QueryOffers@16";
		private const string EOS_Ecom_QueryOwnershipName = "_EOS_Ecom_QueryOwnership@16";
		private const string EOS_Ecom_QueryOwnershipBySandboxIdsName = "_EOS_Ecom_QueryOwnershipBySandboxIds@16";
		private const string EOS_Ecom_QueryOwnershipTokenName = "_EOS_Ecom_QueryOwnershipToken@16";
		private const string EOS_Ecom_RedeemEntitlementsName = "_EOS_Ecom_RedeemEntitlements@16";
		private const string EOS_Ecom_Transaction_CopyEntitlementByIndexName = "_EOS_Ecom_Transaction_CopyEntitlementByIndex@12";
		private const string EOS_Ecom_Transaction_GetEntitlementsCountName = "_EOS_Ecom_Transaction_GetEntitlementsCount@8";
		private const string EOS_Ecom_Transaction_GetTransactionIdName = "_EOS_Ecom_Transaction_GetTransactionId@12";
		private const string EOS_Ecom_Transaction_ReleaseName = "_EOS_Ecom_Transaction_Release@4";
		private const string EOS_EpicAccountId_FromStringName = "_EOS_EpicAccountId_FromString@4";
		private const string EOS_EpicAccountId_IsValidName = "_EOS_EpicAccountId_IsValid@4";
		private const string EOS_EpicAccountId_ToStringName = "_EOS_EpicAccountId_ToString@12";
		private const string EOS_Friends_AcceptInviteName = "_EOS_Friends_AcceptInvite@16";
		private const string EOS_Friends_AddNotifyBlockedUsersUpdateName = "_EOS_Friends_AddNotifyBlockedUsersUpdate@16";
		private const string EOS_Friends_AddNotifyFriendsUpdateName = "_EOS_Friends_AddNotifyFriendsUpdate@16";
		private const string EOS_Friends_GetBlockedUserAtIndexName = "_EOS_Friends_GetBlockedUserAtIndex@8";
		private const string EOS_Friends_GetBlockedUsersCountName = "_EOS_Friends_GetBlockedUsersCount@8";
		private const string EOS_Friends_GetFriendAtIndexName = "_EOS_Friends_GetFriendAtIndex@8";
		private const string EOS_Friends_GetFriendsCountName = "_EOS_Friends_GetFriendsCount@8";
		private const string EOS_Friends_GetStatusName = "_EOS_Friends_GetStatus@8";
		private const string EOS_Friends_QueryFriendsName = "_EOS_Friends_QueryFriends@16";
		private const string EOS_Friends_RejectInviteName = "_EOS_Friends_RejectInvite@16";
		private const string EOS_Friends_RemoveNotifyBlockedUsersUpdateName = "_EOS_Friends_RemoveNotifyBlockedUsersUpdate@12";
		private const string EOS_Friends_RemoveNotifyFriendsUpdateName = "_EOS_Friends_RemoveNotifyFriendsUpdate@12";
		private const string EOS_Friends_SendInviteName = "_EOS_Friends_SendInvite@16";
		private const string EOS_GetVersionName = "_EOS_GetVersion@0";
		private const string EOS_InitializeName = "_EOS_Initialize@4";
		private const string EOS_IntegratedPlatformOptionsContainer_AddName = "_EOS_IntegratedPlatformOptionsContainer_Add@8";
		private const string EOS_IntegratedPlatformOptionsContainer_ReleaseName = "_EOS_IntegratedPlatformOptionsContainer_Release@4";
		private const string EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedName = "_EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged@16";
		private const string EOS_IntegratedPlatform_ClearUserPreLogoutCallbackName = "_EOS_IntegratedPlatform_ClearUserPreLogoutCallback@8";
		private const string EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerName = "_EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer@8";
		private const string EOS_IntegratedPlatform_FinalizeDeferredUserLogoutName = "_EOS_IntegratedPlatform_FinalizeDeferredUserLogout@8";
		private const string EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedName = "_EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged@12";
		private const string EOS_IntegratedPlatform_SetUserLoginStatusName = "_EOS_IntegratedPlatform_SetUserLoginStatus@8";
		private const string EOS_IntegratedPlatform_SetUserPreLogoutCallbackName = "_EOS_IntegratedPlatform_SetUserPreLogoutCallback@16";
		private const string EOS_KWS_AddNotifyPermissionsUpdateReceivedName = "_EOS_KWS_AddNotifyPermissionsUpdateReceived@16";
		private const string EOS_KWS_CopyPermissionByIndexName = "_EOS_KWS_CopyPermissionByIndex@12";
		private const string EOS_KWS_CreateUserName = "_EOS_KWS_CreateUser@16";
		private const string EOS_KWS_GetPermissionByKeyName = "_EOS_KWS_GetPermissionByKey@12";
		private const string EOS_KWS_GetPermissionsCountName = "_EOS_KWS_GetPermissionsCount@8";
		private const string EOS_KWS_PermissionStatus_ReleaseName = "_EOS_KWS_PermissionStatus_Release@4";
		private const string EOS_KWS_QueryAgeGateName = "_EOS_KWS_QueryAgeGate@16";
		private const string EOS_KWS_QueryPermissionsName = "_EOS_KWS_QueryPermissions@16";
		private const string EOS_KWS_RemoveNotifyPermissionsUpdateReceivedName = "_EOS_KWS_RemoveNotifyPermissionsUpdateReceived@12";
		private const string EOS_KWS_RequestPermissionsName = "_EOS_KWS_RequestPermissions@16";
		private const string EOS_KWS_UpdateParentEmailName = "_EOS_KWS_UpdateParentEmail@16";
		private const string EOS_Leaderboards_CopyLeaderboardDefinitionByIndexName = "_EOS_Leaderboards_CopyLeaderboardDefinitionByIndex@12";
		private const string EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdName = "_EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId@12";
		private const string EOS_Leaderboards_CopyLeaderboardRecordByIndexName = "_EOS_Leaderboards_CopyLeaderboardRecordByIndex@12";
		private const string EOS_Leaderboards_CopyLeaderboardRecordByUserIdName = "_EOS_Leaderboards_CopyLeaderboardRecordByUserId@12";
		private const string EOS_Leaderboards_CopyLeaderboardUserScoreByIndexName = "_EOS_Leaderboards_CopyLeaderboardUserScoreByIndex@12";
		private const string EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdName = "_EOS_Leaderboards_CopyLeaderboardUserScoreByUserId@12";
		private const string EOS_Leaderboards_Definition_ReleaseName = "_EOS_Leaderboards_Definition_Release@4";
		private const string EOS_Leaderboards_GetLeaderboardDefinitionCountName = "_EOS_Leaderboards_GetLeaderboardDefinitionCount@8";
		private const string EOS_Leaderboards_GetLeaderboardRecordCountName = "_EOS_Leaderboards_GetLeaderboardRecordCount@8";
		private const string EOS_Leaderboards_GetLeaderboardUserScoreCountName = "_EOS_Leaderboards_GetLeaderboardUserScoreCount@8";
		private const string EOS_Leaderboards_LeaderboardRecord_ReleaseName = "_EOS_Leaderboards_LeaderboardRecord_Release@4";
		private const string EOS_Leaderboards_LeaderboardUserScore_ReleaseName = "_EOS_Leaderboards_LeaderboardUserScore_Release@4";
		private const string EOS_Leaderboards_QueryLeaderboardDefinitionsName = "_EOS_Leaderboards_QueryLeaderboardDefinitions@16";
		private const string EOS_Leaderboards_QueryLeaderboardRanksName = "_EOS_Leaderboards_QueryLeaderboardRanks@16";
		private const string EOS_Leaderboards_QueryLeaderboardUserScoresName = "_EOS_Leaderboards_QueryLeaderboardUserScores@16";
		private const string EOS_LobbyDetails_CopyAttributeByIndexName = "_EOS_LobbyDetails_CopyAttributeByIndex@12";
		private const string EOS_LobbyDetails_CopyAttributeByKeyName = "_EOS_LobbyDetails_CopyAttributeByKey@12";
		private const string EOS_LobbyDetails_CopyInfoName = "_EOS_LobbyDetails_CopyInfo@12";
		private const string EOS_LobbyDetails_CopyMemberAttributeByIndexName = "_EOS_LobbyDetails_CopyMemberAttributeByIndex@12";
		private const string EOS_LobbyDetails_CopyMemberAttributeByKeyName = "_EOS_LobbyDetails_CopyMemberAttributeByKey@12";
		private const string EOS_LobbyDetails_CopyMemberInfoName = "_EOS_LobbyDetails_CopyMemberInfo@12";
		private const string EOS_LobbyDetails_GetAttributeCountName = "_EOS_LobbyDetails_GetAttributeCount@8";
		private const string EOS_LobbyDetails_GetLobbyOwnerName = "_EOS_LobbyDetails_GetLobbyOwner@8";
		private const string EOS_LobbyDetails_GetMemberAttributeCountName = "_EOS_LobbyDetails_GetMemberAttributeCount@8";
		private const string EOS_LobbyDetails_GetMemberByIndexName = "_EOS_LobbyDetails_GetMemberByIndex@8";
		private const string EOS_LobbyDetails_GetMemberCountName = "_EOS_LobbyDetails_GetMemberCount@8";
		private const string EOS_LobbyDetails_Info_ReleaseName = "_EOS_LobbyDetails_Info_Release@4";
		private const string EOS_LobbyDetails_MemberInfo_ReleaseName = "_EOS_LobbyDetails_MemberInfo_Release@4";
		private const string EOS_LobbyDetails_ReleaseName = "_EOS_LobbyDetails_Release@4";
		private const string EOS_LobbyModification_AddAttributeName = "_EOS_LobbyModification_AddAttribute@8";
		private const string EOS_LobbyModification_AddMemberAttributeName = "_EOS_LobbyModification_AddMemberAttribute@8";
		private const string EOS_LobbyModification_ReleaseName = "_EOS_LobbyModification_Release@4";
		private const string EOS_LobbyModification_RemoveAttributeName = "_EOS_LobbyModification_RemoveAttribute@8";
		private const string EOS_LobbyModification_RemoveMemberAttributeName = "_EOS_LobbyModification_RemoveMemberAttribute@8";
		private const string EOS_LobbyModification_SetAllowedPlatformIdsName = "_EOS_LobbyModification_SetAllowedPlatformIds@8";
		private const string EOS_LobbyModification_SetBucketIdName = "_EOS_LobbyModification_SetBucketId@8";
		private const string EOS_LobbyModification_SetInvitesAllowedName = "_EOS_LobbyModification_SetInvitesAllowed@8";
		private const string EOS_LobbyModification_SetMaxMembersName = "_EOS_LobbyModification_SetMaxMembers@8";
		private const string EOS_LobbyModification_SetPermissionLevelName = "_EOS_LobbyModification_SetPermissionLevel@8";
		private const string EOS_LobbySearch_CopySearchResultByIndexName = "_EOS_LobbySearch_CopySearchResultByIndex@12";
		private const string EOS_LobbySearch_FindName = "_EOS_LobbySearch_Find@16";
		private const string EOS_LobbySearch_GetSearchResultCountName = "_EOS_LobbySearch_GetSearchResultCount@8";
		private const string EOS_LobbySearch_ReleaseName = "_EOS_LobbySearch_Release@4";
		private const string EOS_LobbySearch_RemoveParameterName = "_EOS_LobbySearch_RemoveParameter@8";
		private const string EOS_LobbySearch_SetLobbyIdName = "_EOS_LobbySearch_SetLobbyId@8";
		private const string EOS_LobbySearch_SetMaxResultsName = "_EOS_LobbySearch_SetMaxResults@8";
		private const string EOS_LobbySearch_SetParameterName = "_EOS_LobbySearch_SetParameter@8";
		private const string EOS_LobbySearch_SetTargetUserIdName = "_EOS_LobbySearch_SetTargetUserId@8";
		private const string EOS_Lobby_AddNotifyJoinLobbyAcceptedName = "_EOS_Lobby_AddNotifyJoinLobbyAccepted@16";
		private const string EOS_Lobby_AddNotifyLeaveLobbyRequestedName = "_EOS_Lobby_AddNotifyLeaveLobbyRequested@16";
		private const string EOS_Lobby_AddNotifyLobbyInviteAcceptedName = "_EOS_Lobby_AddNotifyLobbyInviteAccepted@16";
		private const string EOS_Lobby_AddNotifyLobbyInviteReceivedName = "_EOS_Lobby_AddNotifyLobbyInviteReceived@16";
		private const string EOS_Lobby_AddNotifyLobbyInviteRejectedName = "_EOS_Lobby_AddNotifyLobbyInviteRejected@16";
		private const string EOS_Lobby_AddNotifyLobbyMemberStatusReceivedName = "_EOS_Lobby_AddNotifyLobbyMemberStatusReceived@16";
		private const string EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedName = "_EOS_Lobby_AddNotifyLobbyMemberUpdateReceived@16";
		private const string EOS_Lobby_AddNotifyLobbyUpdateReceivedName = "_EOS_Lobby_AddNotifyLobbyUpdateReceived@16";
		private const string EOS_Lobby_AddNotifyRTCRoomConnectionChangedName = "_EOS_Lobby_AddNotifyRTCRoomConnectionChanged@16";
		private const string EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedName = "_EOS_Lobby_AddNotifySendLobbyNativeInviteRequested@16";
		private const string EOS_Lobby_Attribute_ReleaseName = "_EOS_Lobby_Attribute_Release@4";
		private const string EOS_Lobby_CopyLobbyDetailsHandleName = "_EOS_Lobby_CopyLobbyDetailsHandle@12";
		private const string EOS_Lobby_CopyLobbyDetailsHandleByInviteIdName = "_EOS_Lobby_CopyLobbyDetailsHandleByInviteId@12";
		private const string EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdName = "_EOS_Lobby_CopyLobbyDetailsHandleByUiEventId@12";
		private const string EOS_Lobby_CreateLobbyName = "_EOS_Lobby_CreateLobby@16";
		private const string EOS_Lobby_CreateLobbySearchName = "_EOS_Lobby_CreateLobbySearch@12";
		private const string EOS_Lobby_DestroyLobbyName = "_EOS_Lobby_DestroyLobby@16";
		private const string EOS_Lobby_GetConnectStringName = "_EOS_Lobby_GetConnectString@16";
		private const string EOS_Lobby_GetInviteCountName = "_EOS_Lobby_GetInviteCount@8";
		private const string EOS_Lobby_GetInviteIdByIndexName = "_EOS_Lobby_GetInviteIdByIndex@16";
		private const string EOS_Lobby_GetRTCRoomNameName = "_EOS_Lobby_GetRTCRoomName@16";
		private const string EOS_Lobby_HardMuteMemberName = "_EOS_Lobby_HardMuteMember@16";
		private const string EOS_Lobby_IsRTCRoomConnectedName = "_EOS_Lobby_IsRTCRoomConnected@12";
		private const string EOS_Lobby_JoinLobbyName = "_EOS_Lobby_JoinLobby@16";
		private const string EOS_Lobby_JoinLobbyByIdName = "_EOS_Lobby_JoinLobbyById@16";
		private const string EOS_Lobby_JoinRTCRoomName = "_EOS_Lobby_JoinRTCRoom@16";
		private const string EOS_Lobby_KickMemberName = "_EOS_Lobby_KickMember@16";
		private const string EOS_Lobby_LeaveLobbyName = "_EOS_Lobby_LeaveLobby@16";
		private const string EOS_Lobby_LeaveRTCRoomName = "_EOS_Lobby_LeaveRTCRoom@16";
		private const string EOS_Lobby_ParseConnectStringName = "_EOS_Lobby_ParseConnectString@16";
		private const string EOS_Lobby_PromoteMemberName = "_EOS_Lobby_PromoteMember@16";
		private const string EOS_Lobby_QueryInvitesName = "_EOS_Lobby_QueryInvites@16";
		private const string EOS_Lobby_RejectInviteName = "_EOS_Lobby_RejectInvite@16";
		private const string EOS_Lobby_RemoveNotifyJoinLobbyAcceptedName = "_EOS_Lobby_RemoveNotifyJoinLobbyAccepted@12";
		private const string EOS_Lobby_RemoveNotifyLeaveLobbyRequestedName = "_EOS_Lobby_RemoveNotifyLeaveLobbyRequested@12";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteAcceptedName = "_EOS_Lobby_RemoveNotifyLobbyInviteAccepted@12";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteReceivedName = "_EOS_Lobby_RemoveNotifyLobbyInviteReceived@12";
		private const string EOS_Lobby_RemoveNotifyLobbyInviteRejectedName = "_EOS_Lobby_RemoveNotifyLobbyInviteRejected@12";
		private const string EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedName = "_EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived@12";
		private const string EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedName = "_EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived@12";
		private const string EOS_Lobby_RemoveNotifyLobbyUpdateReceivedName = "_EOS_Lobby_RemoveNotifyLobbyUpdateReceived@12";
		private const string EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedName = "_EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged@12";
		private const string EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedName = "_EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested@12";
		private const string EOS_Lobby_SendInviteName = "_EOS_Lobby_SendInvite@16";
		private const string EOS_Lobby_UpdateLobbyName = "_EOS_Lobby_UpdateLobby@16";
		private const string EOS_Lobby_UpdateLobbyModificationName = "_EOS_Lobby_UpdateLobbyModification@12";
		private const string EOS_Logging_SetCallbackName = "_EOS_Logging_SetCallback@4";
		private const string EOS_Logging_SetLogLevelName = "_EOS_Logging_SetLogLevel@8";
		private const string EOS_Metrics_BeginPlayerSessionName = "_EOS_Metrics_BeginPlayerSession@8";
		private const string EOS_Metrics_EndPlayerSessionName = "_EOS_Metrics_EndPlayerSession@8";
		private const string EOS_Mods_CopyModInfoName = "_EOS_Mods_CopyModInfo@12";
		private const string EOS_Mods_EnumerateModsName = "_EOS_Mods_EnumerateMods@16";
		private const string EOS_Mods_InstallModName = "_EOS_Mods_InstallMod@16";
		private const string EOS_Mods_ModInfo_ReleaseName = "_EOS_Mods_ModInfo_Release@4";
		private const string EOS_Mods_UninstallModName = "_EOS_Mods_UninstallMod@16";
		private const string EOS_Mods_UpdateModName = "_EOS_Mods_UpdateMod@16";
		private const string EOS_P2P_AcceptConnectionName = "_EOS_P2P_AcceptConnection@8";
		private const string EOS_P2P_AddNotifyIncomingPacketQueueFullName = "_EOS_P2P_AddNotifyIncomingPacketQueueFull@16";
		private const string EOS_P2P_AddNotifyPeerConnectionClosedName = "_EOS_P2P_AddNotifyPeerConnectionClosed@16";
		private const string EOS_P2P_AddNotifyPeerConnectionEstablishedName = "_EOS_P2P_AddNotifyPeerConnectionEstablished@16";
		private const string EOS_P2P_AddNotifyPeerConnectionInterruptedName = "_EOS_P2P_AddNotifyPeerConnectionInterrupted@16";
		private const string EOS_P2P_AddNotifyPeerConnectionRequestName = "_EOS_P2P_AddNotifyPeerConnectionRequest@16";
		private const string EOS_P2P_ClearPacketQueueName = "_EOS_P2P_ClearPacketQueue@8";
		private const string EOS_P2P_CloseConnectionName = "_EOS_P2P_CloseConnection@8";
		private const string EOS_P2P_CloseConnectionsName = "_EOS_P2P_CloseConnections@8";
		private const string EOS_P2P_GetNATTypeName = "_EOS_P2P_GetNATType@12";
		private const string EOS_P2P_GetNextReceivedPacketSizeName = "_EOS_P2P_GetNextReceivedPacketSize@12";
		private const string EOS_P2P_GetPacketQueueInfoName = "_EOS_P2P_GetPacketQueueInfo@12";
		private const string EOS_P2P_GetPortRangeName = "_EOS_P2P_GetPortRange@16";
		private const string EOS_P2P_GetRelayControlName = "_EOS_P2P_GetRelayControl@12";
		private const string EOS_P2P_QueryNATTypeName = "_EOS_P2P_QueryNATType@16";
		private const string EOS_P2P_ReceivePacketName = "_EOS_P2P_ReceivePacket@28";
		private const string EOS_P2P_RemoveNotifyIncomingPacketQueueFullName = "_EOS_P2P_RemoveNotifyIncomingPacketQueueFull@12";
		private const string EOS_P2P_RemoveNotifyPeerConnectionClosedName = "_EOS_P2P_RemoveNotifyPeerConnectionClosed@12";
		private const string EOS_P2P_RemoveNotifyPeerConnectionEstablishedName = "_EOS_P2P_RemoveNotifyPeerConnectionEstablished@12";
		private const string EOS_P2P_RemoveNotifyPeerConnectionInterruptedName = "_EOS_P2P_RemoveNotifyPeerConnectionInterrupted@12";
		private const string EOS_P2P_RemoveNotifyPeerConnectionRequestName = "_EOS_P2P_RemoveNotifyPeerConnectionRequest@12";
		private const string EOS_P2P_SendPacketName = "_EOS_P2P_SendPacket@8";
		private const string EOS_P2P_SetPacketQueueSizeName = "_EOS_P2P_SetPacketQueueSize@8";
		private const string EOS_P2P_SetPortRangeName = "_EOS_P2P_SetPortRange@8";
		private const string EOS_P2P_SetRelayControlName = "_EOS_P2P_SetRelayControl@8";
		private const string EOS_Platform_CheckForLauncherAndRestartName = "_EOS_Platform_CheckForLauncherAndRestart@4";
		private const string EOS_Platform_CreateName = "_EOS_Platform_Create@4";
		private const string EOS_Platform_GetAchievementsInterfaceName = "_EOS_Platform_GetAchievementsInterface@4";
		private const string EOS_Platform_GetActiveCountryCodeName = "_EOS_Platform_GetActiveCountryCode@16";
		private const string EOS_Platform_GetActiveLocaleCodeName = "_EOS_Platform_GetActiveLocaleCode@16";
		private const string EOS_Platform_GetAntiCheatClientInterfaceName = "_EOS_Platform_GetAntiCheatClientInterface@4";
		private const string EOS_Platform_GetAntiCheatServerInterfaceName = "_EOS_Platform_GetAntiCheatServerInterface@4";
		private const string EOS_Platform_GetApplicationStatusName = "_EOS_Platform_GetApplicationStatus@4";
		private const string EOS_Platform_GetAuthInterfaceName = "_EOS_Platform_GetAuthInterface@4";
		private const string EOS_Platform_GetConnectInterfaceName = "_EOS_Platform_GetConnectInterface@4";
		private const string EOS_Platform_GetCustomInvitesInterfaceName = "_EOS_Platform_GetCustomInvitesInterface@4";
		private const string EOS_Platform_GetDesktopCrossplayStatusName = "_EOS_Platform_GetDesktopCrossplayStatus@12";
		private const string EOS_Platform_GetEcomInterfaceName = "_EOS_Platform_GetEcomInterface@4";
		private const string EOS_Platform_GetFriendsInterfaceName = "_EOS_Platform_GetFriendsInterface@4";
		private const string EOS_Platform_GetIntegratedPlatformInterfaceName = "_EOS_Platform_GetIntegratedPlatformInterface@4";
		private const string EOS_Platform_GetKWSInterfaceName = "_EOS_Platform_GetKWSInterface@4";
		private const string EOS_Platform_GetLeaderboardsInterfaceName = "_EOS_Platform_GetLeaderboardsInterface@4";
		private const string EOS_Platform_GetLobbyInterfaceName = "_EOS_Platform_GetLobbyInterface@4";
		private const string EOS_Platform_GetMetricsInterfaceName = "_EOS_Platform_GetMetricsInterface@4";
		private const string EOS_Platform_GetModsInterfaceName = "_EOS_Platform_GetModsInterface@4";
		private const string EOS_Platform_GetNetworkStatusName = "_EOS_Platform_GetNetworkStatus@4";
		private const string EOS_Platform_GetOverrideCountryCodeName = "_EOS_Platform_GetOverrideCountryCode@12";
		private const string EOS_Platform_GetOverrideLocaleCodeName = "_EOS_Platform_GetOverrideLocaleCode@12";
		private const string EOS_Platform_GetP2PInterfaceName = "_EOS_Platform_GetP2PInterface@4";
		private const string EOS_Platform_GetPlayerDataStorageInterfaceName = "_EOS_Platform_GetPlayerDataStorageInterface@4";
		private const string EOS_Platform_GetPresenceInterfaceName = "_EOS_Platform_GetPresenceInterface@4";
		private const string EOS_Platform_GetProgressionSnapshotInterfaceName = "_EOS_Platform_GetProgressionSnapshotInterface@4";
		private const string EOS_Platform_GetRTCAdminInterfaceName = "_EOS_Platform_GetRTCAdminInterface@4";
		private const string EOS_Platform_GetRTCInterfaceName = "_EOS_Platform_GetRTCInterface@4";
		private const string EOS_Platform_GetReportsInterfaceName = "_EOS_Platform_GetReportsInterface@4";
		private const string EOS_Platform_GetSanctionsInterfaceName = "_EOS_Platform_GetSanctionsInterface@4";
		private const string EOS_Platform_GetSessionsInterfaceName = "_EOS_Platform_GetSessionsInterface@4";
		private const string EOS_Platform_GetStatsInterfaceName = "_EOS_Platform_GetStatsInterface@4";
		private const string EOS_Platform_GetTitleStorageInterfaceName = "_EOS_Platform_GetTitleStorageInterface@4";
		private const string EOS_Platform_GetUIInterfaceName = "_EOS_Platform_GetUIInterface@4";
		private const string EOS_Platform_GetUserInfoInterfaceName = "_EOS_Platform_GetUserInfoInterface@4";
		private const string EOS_Platform_ReleaseName = "_EOS_Platform_Release@4";
		private const string EOS_Platform_SetApplicationStatusName = "_EOS_Platform_SetApplicationStatus@8";
		private const string EOS_Platform_SetNetworkStatusName = "_EOS_Platform_SetNetworkStatus@8";
		private const string EOS_Platform_SetOverrideCountryCodeName = "_EOS_Platform_SetOverrideCountryCode@8";
		private const string EOS_Platform_SetOverrideLocaleCodeName = "_EOS_Platform_SetOverrideLocaleCode@8";
		private const string EOS_Platform_TickName = "_EOS_Platform_Tick@4";
		private const string EOS_PlayerDataStorageFileTransferRequest_CancelRequestName = "_EOS_PlayerDataStorageFileTransferRequest_CancelRequest@4";
		private const string EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateName = "_EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState@4";
		private const string EOS_PlayerDataStorageFileTransferRequest_GetFilenameName = "_EOS_PlayerDataStorageFileTransferRequest_GetFilename@16";
		private const string EOS_PlayerDataStorageFileTransferRequest_ReleaseName = "_EOS_PlayerDataStorageFileTransferRequest_Release@4";
		private const string EOS_PlayerDataStorage_CopyFileMetadataAtIndexName = "_EOS_PlayerDataStorage_CopyFileMetadataAtIndex@12";
		private const string EOS_PlayerDataStorage_CopyFileMetadataByFilenameName = "_EOS_PlayerDataStorage_CopyFileMetadataByFilename@12";
		private const string EOS_PlayerDataStorage_DeleteCacheName = "_EOS_PlayerDataStorage_DeleteCache@16";
		private const string EOS_PlayerDataStorage_DeleteFileName = "_EOS_PlayerDataStorage_DeleteFile@16";
		private const string EOS_PlayerDataStorage_DuplicateFileName = "_EOS_PlayerDataStorage_DuplicateFile@16";
		private const string EOS_PlayerDataStorage_FileMetadata_ReleaseName = "_EOS_PlayerDataStorage_FileMetadata_Release@4";
		private const string EOS_PlayerDataStorage_GetFileMetadataCountName = "_EOS_PlayerDataStorage_GetFileMetadataCount@12";
		private const string EOS_PlayerDataStorage_QueryFileName = "_EOS_PlayerDataStorage_QueryFile@16";
		private const string EOS_PlayerDataStorage_QueryFileListName = "_EOS_PlayerDataStorage_QueryFileList@16";
		private const string EOS_PlayerDataStorage_ReadFileName = "_EOS_PlayerDataStorage_ReadFile@16";
		private const string EOS_PlayerDataStorage_WriteFileName = "_EOS_PlayerDataStorage_WriteFile@16";
		private const string EOS_PresenceModification_DeleteDataName = "_EOS_PresenceModification_DeleteData@8";
		private const string EOS_PresenceModification_ReleaseName = "_EOS_PresenceModification_Release@4";
		private const string EOS_PresenceModification_SetDataName = "_EOS_PresenceModification_SetData@8";
		private const string EOS_PresenceModification_SetJoinInfoName = "_EOS_PresenceModification_SetJoinInfo@8";
		private const string EOS_PresenceModification_SetRawRichTextName = "_EOS_PresenceModification_SetRawRichText@8";
		private const string EOS_PresenceModification_SetStatusName = "_EOS_PresenceModification_SetStatus@8";
		private const string EOS_Presence_AddNotifyJoinGameAcceptedName = "_EOS_Presence_AddNotifyJoinGameAccepted@16";
		private const string EOS_Presence_AddNotifyOnPresenceChangedName = "_EOS_Presence_AddNotifyOnPresenceChanged@16";
		private const string EOS_Presence_CopyPresenceName = "_EOS_Presence_CopyPresence@12";
		private const string EOS_Presence_CreatePresenceModificationName = "_EOS_Presence_CreatePresenceModification@12";
		private const string EOS_Presence_GetJoinInfoName = "_EOS_Presence_GetJoinInfo@16";
		private const string EOS_Presence_HasPresenceName = "_EOS_Presence_HasPresence@8";
		private const string EOS_Presence_Info_ReleaseName = "_EOS_Presence_Info_Release@4";
		private const string EOS_Presence_QueryPresenceName = "_EOS_Presence_QueryPresence@16";
		private const string EOS_Presence_RemoveNotifyJoinGameAcceptedName = "_EOS_Presence_RemoveNotifyJoinGameAccepted@12";
		private const string EOS_Presence_RemoveNotifyOnPresenceChangedName = "_EOS_Presence_RemoveNotifyOnPresenceChanged@12";
		private const string EOS_Presence_SetPresenceName = "_EOS_Presence_SetPresence@16";
		private const string EOS_ProductUserId_FromStringName = "_EOS_ProductUserId_FromString@4";
		private const string EOS_ProductUserId_IsValidName = "_EOS_ProductUserId_IsValid@4";
		private const string EOS_ProductUserId_ToStringName = "_EOS_ProductUserId_ToString@12";
		private const string EOS_ProgressionSnapshot_AddProgressionName = "_EOS_ProgressionSnapshot_AddProgression@8";
		private const string EOS_ProgressionSnapshot_BeginSnapshotName = "_EOS_ProgressionSnapshot_BeginSnapshot@12";
		private const string EOS_ProgressionSnapshot_DeleteSnapshotName = "_EOS_ProgressionSnapshot_DeleteSnapshot@16";
		private const string EOS_ProgressionSnapshot_EndSnapshotName = "_EOS_ProgressionSnapshot_EndSnapshot@8";
		private const string EOS_ProgressionSnapshot_SubmitSnapshotName = "_EOS_ProgressionSnapshot_SubmitSnapshot@16";
		private const string EOS_RTCAdmin_CopyUserTokenByIndexName = "_EOS_RTCAdmin_CopyUserTokenByIndex@12";
		private const string EOS_RTCAdmin_CopyUserTokenByUserIdName = "_EOS_RTCAdmin_CopyUserTokenByUserId@12";
		private const string EOS_RTCAdmin_KickName = "_EOS_RTCAdmin_Kick@16";
		private const string EOS_RTCAdmin_QueryJoinRoomTokenName = "_EOS_RTCAdmin_QueryJoinRoomToken@16";
		private const string EOS_RTCAdmin_SetParticipantHardMuteName = "_EOS_RTCAdmin_SetParticipantHardMute@16";
		private const string EOS_RTCAdmin_UserToken_ReleaseName = "_EOS_RTCAdmin_UserToken_Release@4";
		private const string EOS_RTCAudio_AddNotifyAudioBeforeRenderName = "_EOS_RTCAudio_AddNotifyAudioBeforeRender@16";
		private const string EOS_RTCAudio_AddNotifyAudioBeforeSendName = "_EOS_RTCAudio_AddNotifyAudioBeforeSend@16";
		private const string EOS_RTCAudio_AddNotifyAudioDevicesChangedName = "_EOS_RTCAudio_AddNotifyAudioDevicesChanged@16";
		private const string EOS_RTCAudio_AddNotifyAudioInputStateName = "_EOS_RTCAudio_AddNotifyAudioInputState@16";
		private const string EOS_RTCAudio_AddNotifyAudioOutputStateName = "_EOS_RTCAudio_AddNotifyAudioOutputState@16";
		private const string EOS_RTCAudio_AddNotifyParticipantUpdatedName = "_EOS_RTCAudio_AddNotifyParticipantUpdated@16";
		private const string EOS_RTCAudio_CopyInputDeviceInformationByIndexName = "_EOS_RTCAudio_CopyInputDeviceInformationByIndex@12";
		private const string EOS_RTCAudio_CopyOutputDeviceInformationByIndexName = "_EOS_RTCAudio_CopyOutputDeviceInformationByIndex@12";
		private const string EOS_RTCAudio_GetAudioInputDeviceByIndexName = "_EOS_RTCAudio_GetAudioInputDeviceByIndex@8";
		private const string EOS_RTCAudio_GetAudioInputDevicesCountName = "_EOS_RTCAudio_GetAudioInputDevicesCount@8";
		private const string EOS_RTCAudio_GetAudioOutputDeviceByIndexName = "_EOS_RTCAudio_GetAudioOutputDeviceByIndex@8";
		private const string EOS_RTCAudio_GetAudioOutputDevicesCountName = "_EOS_RTCAudio_GetAudioOutputDevicesCount@8";
		private const string EOS_RTCAudio_GetInputDevicesCountName = "_EOS_RTCAudio_GetInputDevicesCount@8";
		private const string EOS_RTCAudio_GetOutputDevicesCountName = "_EOS_RTCAudio_GetOutputDevicesCount@8";
		private const string EOS_RTCAudio_InputDeviceInformation_ReleaseName = "_EOS_RTCAudio_InputDeviceInformation_Release@4";
		private const string EOS_RTCAudio_OutputDeviceInformation_ReleaseName = "_EOS_RTCAudio_OutputDeviceInformation_Release@4";
		private const string EOS_RTCAudio_QueryInputDevicesInformationName = "_EOS_RTCAudio_QueryInputDevicesInformation@16";
		private const string EOS_RTCAudio_QueryOutputDevicesInformationName = "_EOS_RTCAudio_QueryOutputDevicesInformation@16";
		private const string EOS_RTCAudio_RegisterPlatformAudioUserName = "_EOS_RTCAudio_RegisterPlatformAudioUser@8";
		private const string EOS_RTCAudio_RegisterPlatformUserName = "_EOS_RTCAudio_RegisterPlatformUser@16";
		private const string EOS_RTCAudio_RemoveNotifyAudioBeforeRenderName = "_EOS_RTCAudio_RemoveNotifyAudioBeforeRender@12";
		private const string EOS_RTCAudio_RemoveNotifyAudioBeforeSendName = "_EOS_RTCAudio_RemoveNotifyAudioBeforeSend@12";
		private const string EOS_RTCAudio_RemoveNotifyAudioDevicesChangedName = "_EOS_RTCAudio_RemoveNotifyAudioDevicesChanged@12";
		private const string EOS_RTCAudio_RemoveNotifyAudioInputStateName = "_EOS_RTCAudio_RemoveNotifyAudioInputState@12";
		private const string EOS_RTCAudio_RemoveNotifyAudioOutputStateName = "_EOS_RTCAudio_RemoveNotifyAudioOutputState@12";
		private const string EOS_RTCAudio_RemoveNotifyParticipantUpdatedName = "_EOS_RTCAudio_RemoveNotifyParticipantUpdated@12";
		private const string EOS_RTCAudio_SendAudioName = "_EOS_RTCAudio_SendAudio@8";
		private const string EOS_RTCAudio_SetAudioInputSettingsName = "_EOS_RTCAudio_SetAudioInputSettings@8";
		private const string EOS_RTCAudio_SetAudioOutputSettingsName = "_EOS_RTCAudio_SetAudioOutputSettings@8";
		private const string EOS_RTCAudio_SetInputDeviceSettingsName = "_EOS_RTCAudio_SetInputDeviceSettings@16";
		private const string EOS_RTCAudio_SetOutputDeviceSettingsName = "_EOS_RTCAudio_SetOutputDeviceSettings@16";
		private const string EOS_RTCAudio_UnregisterPlatformAudioUserName = "_EOS_RTCAudio_UnregisterPlatformAudioUser@8";
		private const string EOS_RTCAudio_UnregisterPlatformUserName = "_EOS_RTCAudio_UnregisterPlatformUser@16";
		private const string EOS_RTCAudio_UpdateParticipantVolumeName = "_EOS_RTCAudio_UpdateParticipantVolume@16";
		private const string EOS_RTCAudio_UpdateReceivingName = "_EOS_RTCAudio_UpdateReceiving@16";
		private const string EOS_RTCAudio_UpdateReceivingVolumeName = "_EOS_RTCAudio_UpdateReceivingVolume@16";
		private const string EOS_RTCAudio_UpdateSendingName = "_EOS_RTCAudio_UpdateSending@16";
		private const string EOS_RTCAudio_UpdateSendingVolumeName = "_EOS_RTCAudio_UpdateSendingVolume@16";
		private const string EOS_RTCData_AddNotifyDataReceivedName = "_EOS_RTCData_AddNotifyDataReceived@16";
		private const string EOS_RTCData_AddNotifyParticipantUpdatedName = "_EOS_RTCData_AddNotifyParticipantUpdated@16";
		private const string EOS_RTCData_RemoveNotifyDataReceivedName = "_EOS_RTCData_RemoveNotifyDataReceived@12";
		private const string EOS_RTCData_RemoveNotifyParticipantUpdatedName = "_EOS_RTCData_RemoveNotifyParticipantUpdated@12";
		private const string EOS_RTCData_SendDataName = "_EOS_RTCData_SendData@8";
		private const string EOS_RTCData_UpdateReceivingName = "_EOS_RTCData_UpdateReceiving@16";
		private const string EOS_RTCData_UpdateSendingName = "_EOS_RTCData_UpdateSending@16";
		private const string EOS_RTC_AddNotifyDisconnectedName = "_EOS_RTC_AddNotifyDisconnected@16";
		private const string EOS_RTC_AddNotifyParticipantStatusChangedName = "_EOS_RTC_AddNotifyParticipantStatusChanged@16";
		private const string EOS_RTC_AddNotifyRoomStatisticsUpdatedName = "_EOS_RTC_AddNotifyRoomStatisticsUpdated@16";
		private const string EOS_RTC_BlockParticipantName = "_EOS_RTC_BlockParticipant@16";
		private const string EOS_RTC_GetAudioInterfaceName = "_EOS_RTC_GetAudioInterface@4";
		private const string EOS_RTC_GetDataInterfaceName = "_EOS_RTC_GetDataInterface@4";
		private const string EOS_RTC_JoinRoomName = "_EOS_RTC_JoinRoom@16";
		private const string EOS_RTC_LeaveRoomName = "_EOS_RTC_LeaveRoom@16";
		private const string EOS_RTC_RemoveNotifyDisconnectedName = "_EOS_RTC_RemoveNotifyDisconnected@12";
		private const string EOS_RTC_RemoveNotifyParticipantStatusChangedName = "_EOS_RTC_RemoveNotifyParticipantStatusChanged@12";
		private const string EOS_RTC_RemoveNotifyRoomStatisticsUpdatedName = "_EOS_RTC_RemoveNotifyRoomStatisticsUpdated@12";
		private const string EOS_RTC_SetRoomSettingName = "_EOS_RTC_SetRoomSetting@8";
		private const string EOS_RTC_SetSettingName = "_EOS_RTC_SetSetting@8";
		private const string EOS_Reports_SendPlayerBehaviorReportName = "_EOS_Reports_SendPlayerBehaviorReport@16";
		private const string EOS_Sanctions_CopyPlayerSanctionByIndexName = "_EOS_Sanctions_CopyPlayerSanctionByIndex@12";
		private const string EOS_Sanctions_CreatePlayerSanctionAppealName = "_EOS_Sanctions_CreatePlayerSanctionAppeal@16";
		private const string EOS_Sanctions_GetPlayerSanctionCountName = "_EOS_Sanctions_GetPlayerSanctionCount@8";
		private const string EOS_Sanctions_PlayerSanction_ReleaseName = "_EOS_Sanctions_PlayerSanction_Release@4";
		private const string EOS_Sanctions_QueryActivePlayerSanctionsName = "_EOS_Sanctions_QueryActivePlayerSanctions@16";
		private const string EOS_SessionDetails_Attribute_ReleaseName = "_EOS_SessionDetails_Attribute_Release@4";
		private const string EOS_SessionDetails_CopyInfoName = "_EOS_SessionDetails_CopyInfo@12";
		private const string EOS_SessionDetails_CopySessionAttributeByIndexName = "_EOS_SessionDetails_CopySessionAttributeByIndex@12";
		private const string EOS_SessionDetails_CopySessionAttributeByKeyName = "_EOS_SessionDetails_CopySessionAttributeByKey@12";
		private const string EOS_SessionDetails_GetSessionAttributeCountName = "_EOS_SessionDetails_GetSessionAttributeCount@8";
		private const string EOS_SessionDetails_Info_ReleaseName = "_EOS_SessionDetails_Info_Release@4";
		private const string EOS_SessionDetails_ReleaseName = "_EOS_SessionDetails_Release@4";
		private const string EOS_SessionModification_AddAttributeName = "_EOS_SessionModification_AddAttribute@8";
		private const string EOS_SessionModification_ReleaseName = "_EOS_SessionModification_Release@4";
		private const string EOS_SessionModification_RemoveAttributeName = "_EOS_SessionModification_RemoveAttribute@8";
		private const string EOS_SessionModification_SetAllowedPlatformIdsName = "_EOS_SessionModification_SetAllowedPlatformIds@8";
		private const string EOS_SessionModification_SetBucketIdName = "_EOS_SessionModification_SetBucketId@8";
		private const string EOS_SessionModification_SetHostAddressName = "_EOS_SessionModification_SetHostAddress@8";
		private const string EOS_SessionModification_SetInvitesAllowedName = "_EOS_SessionModification_SetInvitesAllowed@8";
		private const string EOS_SessionModification_SetJoinInProgressAllowedName = "_EOS_SessionModification_SetJoinInProgressAllowed@8";
		private const string EOS_SessionModification_SetMaxPlayersName = "_EOS_SessionModification_SetMaxPlayers@8";
		private const string EOS_SessionModification_SetPermissionLevelName = "_EOS_SessionModification_SetPermissionLevel@8";
		private const string EOS_SessionSearch_CopySearchResultByIndexName = "_EOS_SessionSearch_CopySearchResultByIndex@12";
		private const string EOS_SessionSearch_FindName = "_EOS_SessionSearch_Find@16";
		private const string EOS_SessionSearch_GetSearchResultCountName = "_EOS_SessionSearch_GetSearchResultCount@8";
		private const string EOS_SessionSearch_ReleaseName = "_EOS_SessionSearch_Release@4";
		private const string EOS_SessionSearch_RemoveParameterName = "_EOS_SessionSearch_RemoveParameter@8";
		private const string EOS_SessionSearch_SetMaxResultsName = "_EOS_SessionSearch_SetMaxResults@8";
		private const string EOS_SessionSearch_SetParameterName = "_EOS_SessionSearch_SetParameter@8";
		private const string EOS_SessionSearch_SetSessionIdName = "_EOS_SessionSearch_SetSessionId@8";
		private const string EOS_SessionSearch_SetTargetUserIdName = "_EOS_SessionSearch_SetTargetUserId@8";
		private const string EOS_Sessions_AddNotifyJoinSessionAcceptedName = "_EOS_Sessions_AddNotifyJoinSessionAccepted@16";
		private const string EOS_Sessions_AddNotifyLeaveSessionRequestedName = "_EOS_Sessions_AddNotifyLeaveSessionRequested@16";
		private const string EOS_Sessions_AddNotifySendSessionNativeInviteRequestedName = "_EOS_Sessions_AddNotifySendSessionNativeInviteRequested@16";
		private const string EOS_Sessions_AddNotifySessionInviteAcceptedName = "_EOS_Sessions_AddNotifySessionInviteAccepted@16";
		private const string EOS_Sessions_AddNotifySessionInviteReceivedName = "_EOS_Sessions_AddNotifySessionInviteReceived@16";
		private const string EOS_Sessions_AddNotifySessionInviteRejectedName = "_EOS_Sessions_AddNotifySessionInviteRejected@16";
		private const string EOS_Sessions_CopyActiveSessionHandleName = "_EOS_Sessions_CopyActiveSessionHandle@12";
		private const string EOS_Sessions_CopySessionHandleByInviteIdName = "_EOS_Sessions_CopySessionHandleByInviteId@12";
		private const string EOS_Sessions_CopySessionHandleByUiEventIdName = "_EOS_Sessions_CopySessionHandleByUiEventId@12";
		private const string EOS_Sessions_CopySessionHandleForPresenceName = "_EOS_Sessions_CopySessionHandleForPresence@12";
		private const string EOS_Sessions_CreateSessionModificationName = "_EOS_Sessions_CreateSessionModification@12";
		private const string EOS_Sessions_CreateSessionSearchName = "_EOS_Sessions_CreateSessionSearch@12";
		private const string EOS_Sessions_DestroySessionName = "_EOS_Sessions_DestroySession@16";
		private const string EOS_Sessions_DumpSessionStateName = "_EOS_Sessions_DumpSessionState@8";
		private const string EOS_Sessions_EndSessionName = "_EOS_Sessions_EndSession@16";
		private const string EOS_Sessions_GetInviteCountName = "_EOS_Sessions_GetInviteCount@8";
		private const string EOS_Sessions_GetInviteIdByIndexName = "_EOS_Sessions_GetInviteIdByIndex@16";
		private const string EOS_Sessions_IsUserInSessionName = "_EOS_Sessions_IsUserInSession@8";
		private const string EOS_Sessions_JoinSessionName = "_EOS_Sessions_JoinSession@16";
		private const string EOS_Sessions_QueryInvitesName = "_EOS_Sessions_QueryInvites@16";
		private const string EOS_Sessions_RegisterPlayersName = "_EOS_Sessions_RegisterPlayers@16";
		private const string EOS_Sessions_RejectInviteName = "_EOS_Sessions_RejectInvite@16";
		private const string EOS_Sessions_RemoveNotifyJoinSessionAcceptedName = "_EOS_Sessions_RemoveNotifyJoinSessionAccepted@12";
		private const string EOS_Sessions_RemoveNotifyLeaveSessionRequestedName = "_EOS_Sessions_RemoveNotifyLeaveSessionRequested@12";
		private const string EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedName = "_EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested@12";
		private const string EOS_Sessions_RemoveNotifySessionInviteAcceptedName = "_EOS_Sessions_RemoveNotifySessionInviteAccepted@12";
		private const string EOS_Sessions_RemoveNotifySessionInviteReceivedName = "_EOS_Sessions_RemoveNotifySessionInviteReceived@12";
		private const string EOS_Sessions_RemoveNotifySessionInviteRejectedName = "_EOS_Sessions_RemoveNotifySessionInviteRejected@12";
		private const string EOS_Sessions_SendInviteName = "_EOS_Sessions_SendInvite@16";
		private const string EOS_Sessions_StartSessionName = "_EOS_Sessions_StartSession@16";
		private const string EOS_Sessions_UnregisterPlayersName = "_EOS_Sessions_UnregisterPlayers@16";
		private const string EOS_Sessions_UpdateSessionName = "_EOS_Sessions_UpdateSession@16";
		private const string EOS_Sessions_UpdateSessionModificationName = "_EOS_Sessions_UpdateSessionModification@12";
		private const string EOS_ShutdownName = "_EOS_Shutdown@0";
		private const string EOS_Stats_CopyStatByIndexName = "_EOS_Stats_CopyStatByIndex@12";
		private const string EOS_Stats_CopyStatByNameName = "_EOS_Stats_CopyStatByName@12";
		private const string EOS_Stats_GetStatsCountName = "_EOS_Stats_GetStatsCount@8";
		private const string EOS_Stats_IngestStatName = "_EOS_Stats_IngestStat@16";
		private const string EOS_Stats_QueryStatsName = "_EOS_Stats_QueryStats@16";
		private const string EOS_Stats_Stat_ReleaseName = "_EOS_Stats_Stat_Release@4";
		private const string EOS_TitleStorageFileTransferRequest_CancelRequestName = "_EOS_TitleStorageFileTransferRequest_CancelRequest@4";
		private const string EOS_TitleStorageFileTransferRequest_GetFileRequestStateName = "_EOS_TitleStorageFileTransferRequest_GetFileRequestState@4";
		private const string EOS_TitleStorageFileTransferRequest_GetFilenameName = "_EOS_TitleStorageFileTransferRequest_GetFilename@16";
		private const string EOS_TitleStorageFileTransferRequest_ReleaseName = "_EOS_TitleStorageFileTransferRequest_Release@4";
		private const string EOS_TitleStorage_CopyFileMetadataAtIndexName = "_EOS_TitleStorage_CopyFileMetadataAtIndex@12";
		private const string EOS_TitleStorage_CopyFileMetadataByFilenameName = "_EOS_TitleStorage_CopyFileMetadataByFilename@12";
		private const string EOS_TitleStorage_DeleteCacheName = "_EOS_TitleStorage_DeleteCache@16";
		private const string EOS_TitleStorage_FileMetadata_ReleaseName = "_EOS_TitleStorage_FileMetadata_Release@4";
		private const string EOS_TitleStorage_GetFileMetadataCountName = "_EOS_TitleStorage_GetFileMetadataCount@8";
		private const string EOS_TitleStorage_QueryFileName = "_EOS_TitleStorage_QueryFile@16";
		private const string EOS_TitleStorage_QueryFileListName = "_EOS_TitleStorage_QueryFileList@16";
		private const string EOS_TitleStorage_ReadFileName = "_EOS_TitleStorage_ReadFile@16";
		private const string EOS_UI_AcknowledgeEventIdName = "_EOS_UI_AcknowledgeEventId@8";
		private const string EOS_UI_AddNotifyDisplaySettingsUpdatedName = "_EOS_UI_AddNotifyDisplaySettingsUpdated@16";
		private const string EOS_UI_AddNotifyMemoryMonitorName = "_EOS_UI_AddNotifyMemoryMonitor@16";
		private const string EOS_UI_GetFriendsExclusiveInputName = "_EOS_UI_GetFriendsExclusiveInput@8";
		private const string EOS_UI_GetFriendsVisibleName = "_EOS_UI_GetFriendsVisible@8";
		private const string EOS_UI_GetNotificationLocationPreferenceName = "_EOS_UI_GetNotificationLocationPreference@4";
		private const string EOS_UI_GetToggleFriendsButtonName = "_EOS_UI_GetToggleFriendsButton@8";
		private const string EOS_UI_GetToggleFriendsKeyName = "_EOS_UI_GetToggleFriendsKey@8";
		private const string EOS_UI_HideFriendsName = "_EOS_UI_HideFriends@16";
		private const string EOS_UI_IsSocialOverlayPausedName = "_EOS_UI_IsSocialOverlayPaused@8";
		private const string EOS_UI_IsValidButtonCombinationName = "_EOS_UI_IsValidButtonCombination@8";
		private const string EOS_UI_IsValidKeyCombinationName = "_EOS_UI_IsValidKeyCombination@8";
		private const string EOS_UI_PauseSocialOverlayName = "_EOS_UI_PauseSocialOverlay@8";
		private const string EOS_UI_PrePresentName = "_EOS_UI_PrePresent@8";
		private const string EOS_UI_RemoveNotifyDisplaySettingsUpdatedName = "_EOS_UI_RemoveNotifyDisplaySettingsUpdated@12";
		private const string EOS_UI_RemoveNotifyMemoryMonitorName = "_EOS_UI_RemoveNotifyMemoryMonitor@12";
		private const string EOS_UI_ReportInputStateName = "_EOS_UI_ReportInputState@8";
		private const string EOS_UI_SetDisplayPreferenceName = "_EOS_UI_SetDisplayPreference@8";
		private const string EOS_UI_SetToggleFriendsButtonName = "_EOS_UI_SetToggleFriendsButton@8";
		private const string EOS_UI_SetToggleFriendsKeyName = "_EOS_UI_SetToggleFriendsKey@8";
		private const string EOS_UI_ShowBlockPlayerName = "_EOS_UI_ShowBlockPlayer@16";
		private const string EOS_UI_ShowFriendsName = "_EOS_UI_ShowFriends@16";
		private const string EOS_UI_ShowNativeProfileName = "_EOS_UI_ShowNativeProfile@16";
		private const string EOS_UI_ShowReportPlayerName = "_EOS_UI_ShowReportPlayer@16";
		private const string EOS_UserInfo_BestDisplayName_ReleaseName = "_EOS_UserInfo_BestDisplayName_Release@4";
		private const string EOS_UserInfo_CopyBestDisplayNameName = "_EOS_UserInfo_CopyBestDisplayName@12";
		private const string EOS_UserInfo_CopyBestDisplayNameWithPlatformName = "_EOS_UserInfo_CopyBestDisplayNameWithPlatform@12";
		private const string EOS_UserInfo_CopyExternalUserInfoByAccountIdName = "_EOS_UserInfo_CopyExternalUserInfoByAccountId@12";
		private const string EOS_UserInfo_CopyExternalUserInfoByAccountTypeName = "_EOS_UserInfo_CopyExternalUserInfoByAccountType@12";
		private const string EOS_UserInfo_CopyExternalUserInfoByIndexName = "_EOS_UserInfo_CopyExternalUserInfoByIndex@12";
		private const string EOS_UserInfo_CopyUserInfoName = "_EOS_UserInfo_CopyUserInfo@12";
		private const string EOS_UserInfo_ExternalUserInfo_ReleaseName = "_EOS_UserInfo_ExternalUserInfo_Release@4";
		private const string EOS_UserInfo_GetExternalUserInfoCountName = "_EOS_UserInfo_GetExternalUserInfoCount@8";
		private const string EOS_UserInfo_GetLocalPlatformTypeName = "_EOS_UserInfo_GetLocalPlatformType@8";
		private const string EOS_UserInfo_QueryUserInfoName = "_EOS_UserInfo_QueryUserInfo@16";
		private const string EOS_UserInfo_QueryUserInfoByDisplayNameName = "_EOS_UserInfo_QueryUserInfoByDisplayName@16";
		private const string EOS_UserInfo_QueryUserInfoByExternalAccountName = "_EOS_UserInfo_QueryUserInfoByExternalAccount@16";
		private const string EOS_UserInfo_ReleaseName = "_EOS_UserInfo_Release@4";
#endif

#if EOS_DYNAMIC_BINDINGS
		/// <summary>
		/// Hooks dynamic bindings.
		/// </summary>
		/// <param name="libraryHandle">A handle to the library to find functions in. The type is platform dependent, but would typically be an <see cref="IntPtr"/>.</param>
		/// <param name="getFunctionPointer">A delegate that takes a library handle and function name, and returns an <see cref="IntPtr"/> which is a pointer to the function within the library.</param>
		public static void Hook<TLibraryHandle>(TLibraryHandle libraryHandle, Func<TLibraryHandle, string, IntPtr> getFunctionPointer)
		{
			IntPtr functionPointer;

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_AddNotifyAchievementsUnlockedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_AddNotifyAchievementsUnlockedName);
			EOS_Achievements_AddNotifyAchievementsUnlocked = (EOS_Achievements_AddNotifyAchievementsUnlockedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_AddNotifyAchievementsUnlockedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_AddNotifyAchievementsUnlockedV2Name);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_AddNotifyAchievementsUnlockedV2Name);
			EOS_Achievements_AddNotifyAchievementsUnlockedV2 = (EOS_Achievements_AddNotifyAchievementsUnlockedV2Delegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_AddNotifyAchievementsUnlockedV2Delegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyAchievementDefinitionByAchievementIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyAchievementDefinitionByAchievementIdName);
			EOS_Achievements_CopyAchievementDefinitionByAchievementId = (EOS_Achievements_CopyAchievementDefinitionByAchievementIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionByAchievementIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyAchievementDefinitionByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyAchievementDefinitionByIndexName);
			EOS_Achievements_CopyAchievementDefinitionByIndex = (EOS_Achievements_CopyAchievementDefinitionByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdName);
			EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId = (EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyAchievementDefinitionV2ByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyAchievementDefinitionV2ByIndexName);
			EOS_Achievements_CopyAchievementDefinitionV2ByIndex = (EOS_Achievements_CopyAchievementDefinitionV2ByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionV2ByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyPlayerAchievementByAchievementIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyPlayerAchievementByAchievementIdName);
			EOS_Achievements_CopyPlayerAchievementByAchievementId = (EOS_Achievements_CopyPlayerAchievementByAchievementIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyPlayerAchievementByAchievementIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyPlayerAchievementByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyPlayerAchievementByIndexName);
			EOS_Achievements_CopyPlayerAchievementByIndex = (EOS_Achievements_CopyPlayerAchievementByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyPlayerAchievementByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyUnlockedAchievementByAchievementIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyUnlockedAchievementByAchievementIdName);
			EOS_Achievements_CopyUnlockedAchievementByAchievementId = (EOS_Achievements_CopyUnlockedAchievementByAchievementIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyUnlockedAchievementByAchievementIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_CopyUnlockedAchievementByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_CopyUnlockedAchievementByIndexName);
			EOS_Achievements_CopyUnlockedAchievementByIndex = (EOS_Achievements_CopyUnlockedAchievementByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyUnlockedAchievementByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_DefinitionV2_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_DefinitionV2_ReleaseName);
			EOS_Achievements_DefinitionV2_Release = (EOS_Achievements_DefinitionV2_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_DefinitionV2_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_Definition_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_Definition_ReleaseName);
			EOS_Achievements_Definition_Release = (EOS_Achievements_Definition_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_Definition_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_GetAchievementDefinitionCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_GetAchievementDefinitionCountName);
			EOS_Achievements_GetAchievementDefinitionCount = (EOS_Achievements_GetAchievementDefinitionCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_GetAchievementDefinitionCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_GetPlayerAchievementCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_GetPlayerAchievementCountName);
			EOS_Achievements_GetPlayerAchievementCount = (EOS_Achievements_GetPlayerAchievementCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_GetPlayerAchievementCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_GetUnlockedAchievementCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_GetUnlockedAchievementCountName);
			EOS_Achievements_GetUnlockedAchievementCount = (EOS_Achievements_GetUnlockedAchievementCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_GetUnlockedAchievementCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_PlayerAchievement_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_PlayerAchievement_ReleaseName);
			EOS_Achievements_PlayerAchievement_Release = (EOS_Achievements_PlayerAchievement_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_PlayerAchievement_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_QueryDefinitionsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_QueryDefinitionsName);
			EOS_Achievements_QueryDefinitions = (EOS_Achievements_QueryDefinitionsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_QueryDefinitionsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_QueryPlayerAchievementsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_QueryPlayerAchievementsName);
			EOS_Achievements_QueryPlayerAchievements = (EOS_Achievements_QueryPlayerAchievementsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_QueryPlayerAchievementsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_RemoveNotifyAchievementsUnlockedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_RemoveNotifyAchievementsUnlockedName);
			EOS_Achievements_RemoveNotifyAchievementsUnlocked = (EOS_Achievements_RemoveNotifyAchievementsUnlockedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_RemoveNotifyAchievementsUnlockedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_UnlockAchievementsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_UnlockAchievementsName);
			EOS_Achievements_UnlockAchievements = (EOS_Achievements_UnlockAchievementsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_UnlockAchievementsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Achievements_UnlockedAchievement_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Achievements_UnlockedAchievement_ReleaseName);
			EOS_Achievements_UnlockedAchievement_Release = (EOS_Achievements_UnlockedAchievement_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_UnlockedAchievement_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ActiveSession_CopyInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ActiveSession_CopyInfoName);
			EOS_ActiveSession_CopyInfo = (EOS_ActiveSession_CopyInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_CopyInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ActiveSession_GetRegisteredPlayerByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ActiveSession_GetRegisteredPlayerByIndexName);
			EOS_ActiveSession_GetRegisteredPlayerByIndex = (EOS_ActiveSession_GetRegisteredPlayerByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_GetRegisteredPlayerByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ActiveSession_GetRegisteredPlayerCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ActiveSession_GetRegisteredPlayerCountName);
			EOS_ActiveSession_GetRegisteredPlayerCount = (EOS_ActiveSession_GetRegisteredPlayerCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_GetRegisteredPlayerCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ActiveSession_Info_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ActiveSession_Info_ReleaseName);
			EOS_ActiveSession_Info_Release = (EOS_ActiveSession_Info_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_Info_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ActiveSession_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ActiveSession_ReleaseName);
			EOS_ActiveSession_Release = (EOS_ActiveSession_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_AddExternalIntegrityCatalogName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_AddExternalIntegrityCatalogName);
			EOS_AntiCheatClient_AddExternalIntegrityCatalog = (EOS_AntiCheatClient_AddExternalIntegrityCatalogDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddExternalIntegrityCatalogDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedName);
			EOS_AntiCheatClient_AddNotifyClientIntegrityViolated = (EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_AddNotifyMessageToPeerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_AddNotifyMessageToPeerName);
			EOS_AntiCheatClient_AddNotifyMessageToPeer = (EOS_AntiCheatClient_AddNotifyMessageToPeerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyMessageToPeerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_AddNotifyMessageToServerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_AddNotifyMessageToServerName);
			EOS_AntiCheatClient_AddNotifyMessageToServer = (EOS_AntiCheatClient_AddNotifyMessageToServerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyMessageToServerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_AddNotifyPeerActionRequiredName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_AddNotifyPeerActionRequiredName);
			EOS_AntiCheatClient_AddNotifyPeerActionRequired = (EOS_AntiCheatClient_AddNotifyPeerActionRequiredDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyPeerActionRequiredDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedName);
			EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged = (EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_BeginSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_BeginSessionName);
			EOS_AntiCheatClient_BeginSession = (EOS_AntiCheatClient_BeginSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_BeginSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_EndSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_EndSessionName);
			EOS_AntiCheatClient_EndSession = (EOS_AntiCheatClient_EndSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_EndSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_GetProtectMessageOutputLengthName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_GetProtectMessageOutputLengthName);
			EOS_AntiCheatClient_GetProtectMessageOutputLength = (EOS_AntiCheatClient_GetProtectMessageOutputLengthDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_GetProtectMessageOutputLengthDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_PollStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_PollStatusName);
			EOS_AntiCheatClient_PollStatus = (EOS_AntiCheatClient_PollStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_PollStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_ProtectMessageName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_ProtectMessageName);
			EOS_AntiCheatClient_ProtectMessage = (EOS_AntiCheatClient_ProtectMessageDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_ProtectMessageDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_ReceiveMessageFromPeerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_ReceiveMessageFromPeerName);
			EOS_AntiCheatClient_ReceiveMessageFromPeer = (EOS_AntiCheatClient_ReceiveMessageFromPeerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_ReceiveMessageFromPeerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_ReceiveMessageFromServerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_ReceiveMessageFromServerName);
			EOS_AntiCheatClient_ReceiveMessageFromServer = (EOS_AntiCheatClient_ReceiveMessageFromServerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_ReceiveMessageFromServerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_RegisterPeerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_RegisterPeerName);
			EOS_AntiCheatClient_RegisterPeer = (EOS_AntiCheatClient_RegisterPeerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RegisterPeerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedName);
			EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated = (EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_RemoveNotifyMessageToPeerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_RemoveNotifyMessageToPeerName);
			EOS_AntiCheatClient_RemoveNotifyMessageToPeer = (EOS_AntiCheatClient_RemoveNotifyMessageToPeerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyMessageToPeerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_RemoveNotifyMessageToServerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_RemoveNotifyMessageToServerName);
			EOS_AntiCheatClient_RemoveNotifyMessageToServer = (EOS_AntiCheatClient_RemoveNotifyMessageToServerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyMessageToServerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredName);
			EOS_AntiCheatClient_RemoveNotifyPeerActionRequired = (EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedName);
			EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged = (EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_Reserved01Name);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_Reserved01Name);
			EOS_AntiCheatClient_Reserved01 = (EOS_AntiCheatClient_Reserved01Delegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_Reserved01Delegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_UnprotectMessageName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_UnprotectMessageName);
			EOS_AntiCheatClient_UnprotectMessage = (EOS_AntiCheatClient_UnprotectMessageDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_UnprotectMessageDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatClient_UnregisterPeerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatClient_UnregisterPeerName);
			EOS_AntiCheatClient_UnregisterPeer = (EOS_AntiCheatClient_UnregisterPeerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_UnregisterPeerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_AddNotifyClientActionRequiredName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_AddNotifyClientActionRequiredName);
			EOS_AntiCheatServer_AddNotifyClientActionRequired = (EOS_AntiCheatServer_AddNotifyClientActionRequiredDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_AddNotifyClientActionRequiredDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedName);
			EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged = (EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_AddNotifyMessageToClientName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_AddNotifyMessageToClientName);
			EOS_AntiCheatServer_AddNotifyMessageToClient = (EOS_AntiCheatServer_AddNotifyMessageToClientDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_AddNotifyMessageToClientDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_BeginSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_BeginSessionName);
			EOS_AntiCheatServer_BeginSession = (EOS_AntiCheatServer_BeginSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_BeginSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_EndSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_EndSessionName);
			EOS_AntiCheatServer_EndSession = (EOS_AntiCheatServer_EndSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_EndSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_GetProtectMessageOutputLengthName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_GetProtectMessageOutputLengthName);
			EOS_AntiCheatServer_GetProtectMessageOutputLength = (EOS_AntiCheatServer_GetProtectMessageOutputLengthDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_GetProtectMessageOutputLengthDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogEventName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogEventName);
			EOS_AntiCheatServer_LogEvent = (EOS_AntiCheatServer_LogEventDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogEventDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogGameRoundEndName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogGameRoundEndName);
			EOS_AntiCheatServer_LogGameRoundEnd = (EOS_AntiCheatServer_LogGameRoundEndDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogGameRoundEndDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogGameRoundStartName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogGameRoundStartName);
			EOS_AntiCheatServer_LogGameRoundStart = (EOS_AntiCheatServer_LogGameRoundStartDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogGameRoundStartDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerDespawnName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerDespawnName);
			EOS_AntiCheatServer_LogPlayerDespawn = (EOS_AntiCheatServer_LogPlayerDespawnDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerDespawnDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerReviveName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerReviveName);
			EOS_AntiCheatServer_LogPlayerRevive = (EOS_AntiCheatServer_LogPlayerReviveDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerReviveDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerSpawnName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerSpawnName);
			EOS_AntiCheatServer_LogPlayerSpawn = (EOS_AntiCheatServer_LogPlayerSpawnDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerSpawnDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerTakeDamageName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerTakeDamageName);
			EOS_AntiCheatServer_LogPlayerTakeDamage = (EOS_AntiCheatServer_LogPlayerTakeDamageDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerTakeDamageDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerTickName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerTickName);
			EOS_AntiCheatServer_LogPlayerTick = (EOS_AntiCheatServer_LogPlayerTickDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerTickDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerUseAbilityName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerUseAbilityName);
			EOS_AntiCheatServer_LogPlayerUseAbility = (EOS_AntiCheatServer_LogPlayerUseAbilityDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerUseAbilityDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_LogPlayerUseWeaponName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_LogPlayerUseWeaponName);
			EOS_AntiCheatServer_LogPlayerUseWeapon = (EOS_AntiCheatServer_LogPlayerUseWeaponDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerUseWeaponDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_ProtectMessageName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_ProtectMessageName);
			EOS_AntiCheatServer_ProtectMessage = (EOS_AntiCheatServer_ProtectMessageDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_ProtectMessageDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_ReceiveMessageFromClientName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_ReceiveMessageFromClientName);
			EOS_AntiCheatServer_ReceiveMessageFromClient = (EOS_AntiCheatServer_ReceiveMessageFromClientDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_ReceiveMessageFromClientDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_RegisterClientName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_RegisterClientName);
			EOS_AntiCheatServer_RegisterClient = (EOS_AntiCheatServer_RegisterClientDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RegisterClientDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_RegisterEventName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_RegisterEventName);
			EOS_AntiCheatServer_RegisterEvent = (EOS_AntiCheatServer_RegisterEventDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RegisterEventDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_RemoveNotifyClientActionRequiredName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_RemoveNotifyClientActionRequiredName);
			EOS_AntiCheatServer_RemoveNotifyClientActionRequired = (EOS_AntiCheatServer_RemoveNotifyClientActionRequiredDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RemoveNotifyClientActionRequiredDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedName);
			EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged = (EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_RemoveNotifyMessageToClientName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_RemoveNotifyMessageToClientName);
			EOS_AntiCheatServer_RemoveNotifyMessageToClient = (EOS_AntiCheatServer_RemoveNotifyMessageToClientDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RemoveNotifyMessageToClientDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_SetClientDetailsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_SetClientDetailsName);
			EOS_AntiCheatServer_SetClientDetails = (EOS_AntiCheatServer_SetClientDetailsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_SetClientDetailsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_SetClientNetworkStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_SetClientNetworkStateName);
			EOS_AntiCheatServer_SetClientNetworkState = (EOS_AntiCheatServer_SetClientNetworkStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_SetClientNetworkStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_SetGameSessionIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_SetGameSessionIdName);
			EOS_AntiCheatServer_SetGameSessionId = (EOS_AntiCheatServer_SetGameSessionIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_SetGameSessionIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_UnprotectMessageName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_UnprotectMessageName);
			EOS_AntiCheatServer_UnprotectMessage = (EOS_AntiCheatServer_UnprotectMessageDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_UnprotectMessageDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_AntiCheatServer_UnregisterClientName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_AntiCheatServer_UnregisterClientName);
			EOS_AntiCheatServer_UnregisterClient = (EOS_AntiCheatServer_UnregisterClientDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_UnregisterClientDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_AddNotifyLoginStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_AddNotifyLoginStatusChangedName);
			EOS_Auth_AddNotifyLoginStatusChanged = (EOS_Auth_AddNotifyLoginStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_AddNotifyLoginStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_CopyIdTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_CopyIdTokenName);
			EOS_Auth_CopyIdToken = (EOS_Auth_CopyIdTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_CopyIdTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_CopyUserAuthTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_CopyUserAuthTokenName);
			EOS_Auth_CopyUserAuthToken = (EOS_Auth_CopyUserAuthTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_CopyUserAuthTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_DeletePersistentAuthName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_DeletePersistentAuthName);
			EOS_Auth_DeletePersistentAuth = (EOS_Auth_DeletePersistentAuthDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_DeletePersistentAuthDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_GetLoggedInAccountByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_GetLoggedInAccountByIndexName);
			EOS_Auth_GetLoggedInAccountByIndex = (EOS_Auth_GetLoggedInAccountByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetLoggedInAccountByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_GetLoggedInAccountsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_GetLoggedInAccountsCountName);
			EOS_Auth_GetLoggedInAccountsCount = (EOS_Auth_GetLoggedInAccountsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetLoggedInAccountsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_GetLoginStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_GetLoginStatusName);
			EOS_Auth_GetLoginStatus = (EOS_Auth_GetLoginStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetLoginStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_GetMergedAccountByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_GetMergedAccountByIndexName);
			EOS_Auth_GetMergedAccountByIndex = (EOS_Auth_GetMergedAccountByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetMergedAccountByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_GetMergedAccountsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_GetMergedAccountsCountName);
			EOS_Auth_GetMergedAccountsCount = (EOS_Auth_GetMergedAccountsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetMergedAccountsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_GetSelectedAccountIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_GetSelectedAccountIdName);
			EOS_Auth_GetSelectedAccountId = (EOS_Auth_GetSelectedAccountIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetSelectedAccountIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_IdToken_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_IdToken_ReleaseName);
			EOS_Auth_IdToken_Release = (EOS_Auth_IdToken_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_IdToken_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_LinkAccountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_LinkAccountName);
			EOS_Auth_LinkAccount = (EOS_Auth_LinkAccountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_LinkAccountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_LoginName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_LoginName);
			EOS_Auth_Login = (EOS_Auth_LoginDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_LoginDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_LogoutName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_LogoutName);
			EOS_Auth_Logout = (EOS_Auth_LogoutDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_LogoutDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_QueryIdTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_QueryIdTokenName);
			EOS_Auth_QueryIdToken = (EOS_Auth_QueryIdTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_QueryIdTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_RemoveNotifyLoginStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_RemoveNotifyLoginStatusChangedName);
			EOS_Auth_RemoveNotifyLoginStatusChanged = (EOS_Auth_RemoveNotifyLoginStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_RemoveNotifyLoginStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_Token_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_Token_ReleaseName);
			EOS_Auth_Token_Release = (EOS_Auth_Token_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_Token_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_VerifyIdTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_VerifyIdTokenName);
			EOS_Auth_VerifyIdToken = (EOS_Auth_VerifyIdTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_VerifyIdTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Auth_VerifyUserAuthName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Auth_VerifyUserAuthName);
			EOS_Auth_VerifyUserAuth = (EOS_Auth_VerifyUserAuthDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_VerifyUserAuthDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ByteArray_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ByteArray_ToStringName);
			EOS_ByteArray_ToString = (EOS_ByteArray_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ByteArray_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_AddNotifyAuthExpirationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_AddNotifyAuthExpirationName);
			EOS_Connect_AddNotifyAuthExpiration = (EOS_Connect_AddNotifyAuthExpirationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_AddNotifyAuthExpirationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_AddNotifyLoginStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_AddNotifyLoginStatusChangedName);
			EOS_Connect_AddNotifyLoginStatusChanged = (EOS_Connect_AddNotifyLoginStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_AddNotifyLoginStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CopyIdTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CopyIdTokenName);
			EOS_Connect_CopyIdToken = (EOS_Connect_CopyIdTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyIdTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CopyProductUserExternalAccountByAccountIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CopyProductUserExternalAccountByAccountIdName);
			EOS_Connect_CopyProductUserExternalAccountByAccountId = (EOS_Connect_CopyProductUserExternalAccountByAccountIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserExternalAccountByAccountIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CopyProductUserExternalAccountByAccountTypeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CopyProductUserExternalAccountByAccountTypeName);
			EOS_Connect_CopyProductUserExternalAccountByAccountType = (EOS_Connect_CopyProductUserExternalAccountByAccountTypeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserExternalAccountByAccountTypeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CopyProductUserExternalAccountByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CopyProductUserExternalAccountByIndexName);
			EOS_Connect_CopyProductUserExternalAccountByIndex = (EOS_Connect_CopyProductUserExternalAccountByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserExternalAccountByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CopyProductUserInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CopyProductUserInfoName);
			EOS_Connect_CopyProductUserInfo = (EOS_Connect_CopyProductUserInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CreateDeviceIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CreateDeviceIdName);
			EOS_Connect_CreateDeviceId = (EOS_Connect_CreateDeviceIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CreateDeviceIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_CreateUserName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_CreateUserName);
			EOS_Connect_CreateUser = (EOS_Connect_CreateUserDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CreateUserDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_DeleteDeviceIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_DeleteDeviceIdName);
			EOS_Connect_DeleteDeviceId = (EOS_Connect_DeleteDeviceIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_DeleteDeviceIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_ExternalAccountInfo_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_ExternalAccountInfo_ReleaseName);
			EOS_Connect_ExternalAccountInfo_Release = (EOS_Connect_ExternalAccountInfo_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_ExternalAccountInfo_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_GetExternalAccountMappingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_GetExternalAccountMappingName);
			EOS_Connect_GetExternalAccountMapping = (EOS_Connect_GetExternalAccountMappingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetExternalAccountMappingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_GetLoggedInUserByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_GetLoggedInUserByIndexName);
			EOS_Connect_GetLoggedInUserByIndex = (EOS_Connect_GetLoggedInUserByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetLoggedInUserByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_GetLoggedInUsersCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_GetLoggedInUsersCountName);
			EOS_Connect_GetLoggedInUsersCount = (EOS_Connect_GetLoggedInUsersCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetLoggedInUsersCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_GetLoginStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_GetLoginStatusName);
			EOS_Connect_GetLoginStatus = (EOS_Connect_GetLoginStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetLoginStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_GetProductUserExternalAccountCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_GetProductUserExternalAccountCountName);
			EOS_Connect_GetProductUserExternalAccountCount = (EOS_Connect_GetProductUserExternalAccountCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetProductUserExternalAccountCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_GetProductUserIdMappingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_GetProductUserIdMappingName);
			EOS_Connect_GetProductUserIdMapping = (EOS_Connect_GetProductUserIdMappingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetProductUserIdMappingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_IdToken_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_IdToken_ReleaseName);
			EOS_Connect_IdToken_Release = (EOS_Connect_IdToken_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_IdToken_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_LinkAccountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_LinkAccountName);
			EOS_Connect_LinkAccount = (EOS_Connect_LinkAccountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_LinkAccountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_LoginName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_LoginName);
			EOS_Connect_Login = (EOS_Connect_LoginDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_LoginDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_LogoutName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_LogoutName);
			EOS_Connect_Logout = (EOS_Connect_LogoutDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_LogoutDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_QueryExternalAccountMappingsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_QueryExternalAccountMappingsName);
			EOS_Connect_QueryExternalAccountMappings = (EOS_Connect_QueryExternalAccountMappingsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_QueryExternalAccountMappingsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_QueryProductUserIdMappingsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_QueryProductUserIdMappingsName);
			EOS_Connect_QueryProductUserIdMappings = (EOS_Connect_QueryProductUserIdMappingsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_QueryProductUserIdMappingsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_RemoveNotifyAuthExpirationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_RemoveNotifyAuthExpirationName);
			EOS_Connect_RemoveNotifyAuthExpiration = (EOS_Connect_RemoveNotifyAuthExpirationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_RemoveNotifyAuthExpirationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_RemoveNotifyLoginStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_RemoveNotifyLoginStatusChangedName);
			EOS_Connect_RemoveNotifyLoginStatusChanged = (EOS_Connect_RemoveNotifyLoginStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_RemoveNotifyLoginStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_TransferDeviceIdAccountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_TransferDeviceIdAccountName);
			EOS_Connect_TransferDeviceIdAccount = (EOS_Connect_TransferDeviceIdAccountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_TransferDeviceIdAccountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_UnlinkAccountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_UnlinkAccountName);
			EOS_Connect_UnlinkAccount = (EOS_Connect_UnlinkAccountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_UnlinkAccountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Connect_VerifyIdTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Connect_VerifyIdTokenName);
			EOS_Connect_VerifyIdToken = (EOS_Connect_VerifyIdTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_VerifyIdTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ContinuanceToken_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ContinuanceToken_ToStringName);
			EOS_ContinuanceToken_ToString = (EOS_ContinuanceToken_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ContinuanceToken_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AcceptRequestToJoinName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AcceptRequestToJoinName);
			EOS_CustomInvites_AcceptRequestToJoin = (EOS_CustomInvites_AcceptRequestToJoinDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AcceptRequestToJoinDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyCustomInviteAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyCustomInviteAcceptedName);
			EOS_CustomInvites_AddNotifyCustomInviteAccepted = (EOS_CustomInvites_AddNotifyCustomInviteAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyCustomInviteAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyCustomInviteReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyCustomInviteReceivedName);
			EOS_CustomInvites_AddNotifyCustomInviteReceived = (EOS_CustomInvites_AddNotifyCustomInviteReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyCustomInviteReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyCustomInviteRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyCustomInviteRejectedName);
			EOS_CustomInvites_AddNotifyCustomInviteRejected = (EOS_CustomInvites_AddNotifyCustomInviteRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyCustomInviteRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyRequestToJoinAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyRequestToJoinAcceptedName);
			EOS_CustomInvites_AddNotifyRequestToJoinAccepted = (EOS_CustomInvites_AddNotifyRequestToJoinAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyRequestToJoinAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyRequestToJoinReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyRequestToJoinReceivedName);
			EOS_CustomInvites_AddNotifyRequestToJoinReceived = (EOS_CustomInvites_AddNotifyRequestToJoinReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyRequestToJoinReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyRequestToJoinRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyRequestToJoinRejectedName);
			EOS_CustomInvites_AddNotifyRequestToJoinRejected = (EOS_CustomInvites_AddNotifyRequestToJoinRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyRequestToJoinRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedName);
			EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived = (EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedName);
			EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested = (EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_FinalizeInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_FinalizeInviteName);
			EOS_CustomInvites_FinalizeInvite = (EOS_CustomInvites_FinalizeInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_FinalizeInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RejectRequestToJoinName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RejectRequestToJoinName);
			EOS_CustomInvites_RejectRequestToJoin = (EOS_CustomInvites_RejectRequestToJoinDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RejectRequestToJoinDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedName);
			EOS_CustomInvites_RemoveNotifyCustomInviteAccepted = (EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyCustomInviteReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyCustomInviteReceivedName);
			EOS_CustomInvites_RemoveNotifyCustomInviteReceived = (EOS_CustomInvites_RemoveNotifyCustomInviteReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyCustomInviteReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyCustomInviteRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyCustomInviteRejectedName);
			EOS_CustomInvites_RemoveNotifyCustomInviteRejected = (EOS_CustomInvites_RemoveNotifyCustomInviteRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyCustomInviteRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedName);
			EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted = (EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedName);
			EOS_CustomInvites_RemoveNotifyRequestToJoinReceived = (EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedName);
			EOS_CustomInvites_RemoveNotifyRequestToJoinRejected = (EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedName);
			EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived = (EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedName);
			EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested = (EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_SendCustomInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_SendCustomInviteName);
			EOS_CustomInvites_SendCustomInvite = (EOS_CustomInvites_SendCustomInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_SendCustomInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_SendRequestToJoinName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_SendRequestToJoinName);
			EOS_CustomInvites_SendRequestToJoin = (EOS_CustomInvites_SendRequestToJoinDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_SendRequestToJoinDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_CustomInvites_SetCustomInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_CustomInvites_SetCustomInviteName);
			EOS_CustomInvites_SetCustomInvite = (EOS_CustomInvites_SetCustomInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_CustomInvites_SetCustomInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_EApplicationStatus_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_EApplicationStatus_ToStringName);
			EOS_EApplicationStatus_ToString = (EOS_EApplicationStatus_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EApplicationStatus_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ENetworkStatus_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ENetworkStatus_ToStringName);
			EOS_ENetworkStatus_ToString = (EOS_ENetworkStatus_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ENetworkStatus_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_EResult_IsOperationCompleteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_EResult_IsOperationCompleteName);
			EOS_EResult_IsOperationComplete = (EOS_EResult_IsOperationCompleteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EResult_IsOperationCompleteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_EResult_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_EResult_ToStringName);
			EOS_EResult_ToString = (EOS_EResult_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EResult_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CatalogItem_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CatalogItem_ReleaseName);
			EOS_Ecom_CatalogItem_Release = (EOS_Ecom_CatalogItem_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CatalogItem_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CatalogOffer_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CatalogOffer_ReleaseName);
			EOS_Ecom_CatalogOffer_Release = (EOS_Ecom_CatalogOffer_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CatalogOffer_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CatalogRelease_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CatalogRelease_ReleaseName);
			EOS_Ecom_CatalogRelease_Release = (EOS_Ecom_CatalogRelease_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CatalogRelease_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CheckoutName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CheckoutName);
			EOS_Ecom_Checkout = (EOS_Ecom_CheckoutDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CheckoutDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyEntitlementByIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyEntitlementByIdName);
			EOS_Ecom_CopyEntitlementById = (EOS_Ecom_CopyEntitlementByIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyEntitlementByIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyEntitlementByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyEntitlementByIndexName);
			EOS_Ecom_CopyEntitlementByIndex = (EOS_Ecom_CopyEntitlementByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyEntitlementByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyEntitlementByNameAndIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyEntitlementByNameAndIndexName);
			EOS_Ecom_CopyEntitlementByNameAndIndex = (EOS_Ecom_CopyEntitlementByNameAndIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyEntitlementByNameAndIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyItemByIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyItemByIdName);
			EOS_Ecom_CopyItemById = (EOS_Ecom_CopyItemByIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyItemByIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyItemImageInfoByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyItemImageInfoByIndexName);
			EOS_Ecom_CopyItemImageInfoByIndex = (EOS_Ecom_CopyItemImageInfoByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyItemImageInfoByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyItemReleaseByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyItemReleaseByIndexName);
			EOS_Ecom_CopyItemReleaseByIndex = (EOS_Ecom_CopyItemReleaseByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyItemReleaseByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyLastRedeemedEntitlementByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyLastRedeemedEntitlementByIndexName);
			EOS_Ecom_CopyLastRedeemedEntitlementByIndex = (EOS_Ecom_CopyLastRedeemedEntitlementByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyLastRedeemedEntitlementByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyOfferByIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyOfferByIdName);
			EOS_Ecom_CopyOfferById = (EOS_Ecom_CopyOfferByIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferByIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyOfferByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyOfferByIndexName);
			EOS_Ecom_CopyOfferByIndex = (EOS_Ecom_CopyOfferByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyOfferImageInfoByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyOfferImageInfoByIndexName);
			EOS_Ecom_CopyOfferImageInfoByIndex = (EOS_Ecom_CopyOfferImageInfoByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferImageInfoByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyOfferItemByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyOfferItemByIndexName);
			EOS_Ecom_CopyOfferItemByIndex = (EOS_Ecom_CopyOfferItemByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferItemByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyTransactionByIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyTransactionByIdName);
			EOS_Ecom_CopyTransactionById = (EOS_Ecom_CopyTransactionByIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyTransactionByIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_CopyTransactionByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_CopyTransactionByIndexName);
			EOS_Ecom_CopyTransactionByIndex = (EOS_Ecom_CopyTransactionByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyTransactionByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_Entitlement_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_Entitlement_ReleaseName);
			EOS_Ecom_Entitlement_Release = (EOS_Ecom_Entitlement_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Entitlement_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetEntitlementsByNameCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetEntitlementsByNameCountName);
			EOS_Ecom_GetEntitlementsByNameCount = (EOS_Ecom_GetEntitlementsByNameCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetEntitlementsByNameCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetEntitlementsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetEntitlementsCountName);
			EOS_Ecom_GetEntitlementsCount = (EOS_Ecom_GetEntitlementsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetEntitlementsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetItemImageInfoCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetItemImageInfoCountName);
			EOS_Ecom_GetItemImageInfoCount = (EOS_Ecom_GetItemImageInfoCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetItemImageInfoCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetItemReleaseCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetItemReleaseCountName);
			EOS_Ecom_GetItemReleaseCount = (EOS_Ecom_GetItemReleaseCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetItemReleaseCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetLastRedeemedEntitlementsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetLastRedeemedEntitlementsCountName);
			EOS_Ecom_GetLastRedeemedEntitlementsCount = (EOS_Ecom_GetLastRedeemedEntitlementsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetLastRedeemedEntitlementsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetOfferCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetOfferCountName);
			EOS_Ecom_GetOfferCount = (EOS_Ecom_GetOfferCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetOfferCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetOfferImageInfoCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetOfferImageInfoCountName);
			EOS_Ecom_GetOfferImageInfoCount = (EOS_Ecom_GetOfferImageInfoCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetOfferImageInfoCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetOfferItemCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetOfferItemCountName);
			EOS_Ecom_GetOfferItemCount = (EOS_Ecom_GetOfferItemCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetOfferItemCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_GetTransactionCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_GetTransactionCountName);
			EOS_Ecom_GetTransactionCount = (EOS_Ecom_GetTransactionCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetTransactionCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_KeyImageInfo_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_KeyImageInfo_ReleaseName);
			EOS_Ecom_KeyImageInfo_Release = (EOS_Ecom_KeyImageInfo_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_KeyImageInfo_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_QueryEntitlementTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_QueryEntitlementTokenName);
			EOS_Ecom_QueryEntitlementToken = (EOS_Ecom_QueryEntitlementTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryEntitlementTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_QueryEntitlementsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_QueryEntitlementsName);
			EOS_Ecom_QueryEntitlements = (EOS_Ecom_QueryEntitlementsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryEntitlementsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_QueryOffersName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_QueryOffersName);
			EOS_Ecom_QueryOffers = (EOS_Ecom_QueryOffersDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOffersDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_QueryOwnershipName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_QueryOwnershipName);
			EOS_Ecom_QueryOwnership = (EOS_Ecom_QueryOwnershipDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOwnershipDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_QueryOwnershipBySandboxIdsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_QueryOwnershipBySandboxIdsName);
			EOS_Ecom_QueryOwnershipBySandboxIds = (EOS_Ecom_QueryOwnershipBySandboxIdsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOwnershipBySandboxIdsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_QueryOwnershipTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_QueryOwnershipTokenName);
			EOS_Ecom_QueryOwnershipToken = (EOS_Ecom_QueryOwnershipTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOwnershipTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_RedeemEntitlementsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_RedeemEntitlementsName);
			EOS_Ecom_RedeemEntitlements = (EOS_Ecom_RedeemEntitlementsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_RedeemEntitlementsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_Transaction_CopyEntitlementByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_Transaction_CopyEntitlementByIndexName);
			EOS_Ecom_Transaction_CopyEntitlementByIndex = (EOS_Ecom_Transaction_CopyEntitlementByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_CopyEntitlementByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_Transaction_GetEntitlementsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_Transaction_GetEntitlementsCountName);
			EOS_Ecom_Transaction_GetEntitlementsCount = (EOS_Ecom_Transaction_GetEntitlementsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_GetEntitlementsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_Transaction_GetTransactionIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_Transaction_GetTransactionIdName);
			EOS_Ecom_Transaction_GetTransactionId = (EOS_Ecom_Transaction_GetTransactionIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_GetTransactionIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Ecom_Transaction_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Ecom_Transaction_ReleaseName);
			EOS_Ecom_Transaction_Release = (EOS_Ecom_Transaction_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_EpicAccountId_FromStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_EpicAccountId_FromStringName);
			EOS_EpicAccountId_FromString = (EOS_EpicAccountId_FromStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EpicAccountId_FromStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_EpicAccountId_IsValidName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_EpicAccountId_IsValidName);
			EOS_EpicAccountId_IsValid = (EOS_EpicAccountId_IsValidDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EpicAccountId_IsValidDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_EpicAccountId_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_EpicAccountId_ToStringName);
			EOS_EpicAccountId_ToString = (EOS_EpicAccountId_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EpicAccountId_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_AcceptInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_AcceptInviteName);
			EOS_Friends_AcceptInvite = (EOS_Friends_AcceptInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_AcceptInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_AddNotifyBlockedUsersUpdateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_AddNotifyBlockedUsersUpdateName);
			EOS_Friends_AddNotifyBlockedUsersUpdate = (EOS_Friends_AddNotifyBlockedUsersUpdateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_AddNotifyBlockedUsersUpdateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_AddNotifyFriendsUpdateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_AddNotifyFriendsUpdateName);
			EOS_Friends_AddNotifyFriendsUpdate = (EOS_Friends_AddNotifyFriendsUpdateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_AddNotifyFriendsUpdateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_GetBlockedUserAtIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_GetBlockedUserAtIndexName);
			EOS_Friends_GetBlockedUserAtIndex = (EOS_Friends_GetBlockedUserAtIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetBlockedUserAtIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_GetBlockedUsersCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_GetBlockedUsersCountName);
			EOS_Friends_GetBlockedUsersCount = (EOS_Friends_GetBlockedUsersCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetBlockedUsersCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_GetFriendAtIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_GetFriendAtIndexName);
			EOS_Friends_GetFriendAtIndex = (EOS_Friends_GetFriendAtIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetFriendAtIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_GetFriendsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_GetFriendsCountName);
			EOS_Friends_GetFriendsCount = (EOS_Friends_GetFriendsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetFriendsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_GetStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_GetStatusName);
			EOS_Friends_GetStatus = (EOS_Friends_GetStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_QueryFriendsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_QueryFriendsName);
			EOS_Friends_QueryFriends = (EOS_Friends_QueryFriendsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_QueryFriendsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_RejectInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_RejectInviteName);
			EOS_Friends_RejectInvite = (EOS_Friends_RejectInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_RejectInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_RemoveNotifyBlockedUsersUpdateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_RemoveNotifyBlockedUsersUpdateName);
			EOS_Friends_RemoveNotifyBlockedUsersUpdate = (EOS_Friends_RemoveNotifyBlockedUsersUpdateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_RemoveNotifyBlockedUsersUpdateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_RemoveNotifyFriendsUpdateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_RemoveNotifyFriendsUpdateName);
			EOS_Friends_RemoveNotifyFriendsUpdate = (EOS_Friends_RemoveNotifyFriendsUpdateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_RemoveNotifyFriendsUpdateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Friends_SendInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Friends_SendInviteName);
			EOS_Friends_SendInvite = (EOS_Friends_SendInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_SendInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_GetVersionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_GetVersionName);
			EOS_GetVersion = (EOS_GetVersionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_GetVersionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_InitializeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_InitializeName);
			EOS_Initialize = (EOS_InitializeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_InitializeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatformOptionsContainer_AddName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatformOptionsContainer_AddName);
			EOS_IntegratedPlatformOptionsContainer_Add = (EOS_IntegratedPlatformOptionsContainer_AddDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatformOptionsContainer_AddDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatformOptionsContainer_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatformOptionsContainer_ReleaseName);
			EOS_IntegratedPlatformOptionsContainer_Release = (EOS_IntegratedPlatformOptionsContainer_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatformOptionsContainer_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedName);
			EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged = (EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_ClearUserPreLogoutCallbackName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_ClearUserPreLogoutCallbackName);
			EOS_IntegratedPlatform_ClearUserPreLogoutCallback = (EOS_IntegratedPlatform_ClearUserPreLogoutCallbackDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_ClearUserPreLogoutCallbackDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerName);
			EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer = (EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_FinalizeDeferredUserLogoutName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_FinalizeDeferredUserLogoutName);
			EOS_IntegratedPlatform_FinalizeDeferredUserLogout = (EOS_IntegratedPlatform_FinalizeDeferredUserLogoutDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_FinalizeDeferredUserLogoutDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedName);
			EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged = (EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_SetUserLoginStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_SetUserLoginStatusName);
			EOS_IntegratedPlatform_SetUserLoginStatus = (EOS_IntegratedPlatform_SetUserLoginStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_SetUserLoginStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_IntegratedPlatform_SetUserPreLogoutCallbackName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_IntegratedPlatform_SetUserPreLogoutCallbackName);
			EOS_IntegratedPlatform_SetUserPreLogoutCallback = (EOS_IntegratedPlatform_SetUserPreLogoutCallbackDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_IntegratedPlatform_SetUserPreLogoutCallbackDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_AddNotifyPermissionsUpdateReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_AddNotifyPermissionsUpdateReceivedName);
			EOS_KWS_AddNotifyPermissionsUpdateReceived = (EOS_KWS_AddNotifyPermissionsUpdateReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_AddNotifyPermissionsUpdateReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_CopyPermissionByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_CopyPermissionByIndexName);
			EOS_KWS_CopyPermissionByIndex = (EOS_KWS_CopyPermissionByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_CopyPermissionByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_CreateUserName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_CreateUserName);
			EOS_KWS_CreateUser = (EOS_KWS_CreateUserDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_CreateUserDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_GetPermissionByKeyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_GetPermissionByKeyName);
			EOS_KWS_GetPermissionByKey = (EOS_KWS_GetPermissionByKeyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_GetPermissionByKeyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_GetPermissionsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_GetPermissionsCountName);
			EOS_KWS_GetPermissionsCount = (EOS_KWS_GetPermissionsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_GetPermissionsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_PermissionStatus_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_PermissionStatus_ReleaseName);
			EOS_KWS_PermissionStatus_Release = (EOS_KWS_PermissionStatus_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_PermissionStatus_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_QueryAgeGateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_QueryAgeGateName);
			EOS_KWS_QueryAgeGate = (EOS_KWS_QueryAgeGateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_QueryAgeGateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_QueryPermissionsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_QueryPermissionsName);
			EOS_KWS_QueryPermissions = (EOS_KWS_QueryPermissionsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_QueryPermissionsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_RemoveNotifyPermissionsUpdateReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_RemoveNotifyPermissionsUpdateReceivedName);
			EOS_KWS_RemoveNotifyPermissionsUpdateReceived = (EOS_KWS_RemoveNotifyPermissionsUpdateReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_RemoveNotifyPermissionsUpdateReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_RequestPermissionsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_RequestPermissionsName);
			EOS_KWS_RequestPermissions = (EOS_KWS_RequestPermissionsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_RequestPermissionsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_KWS_UpdateParentEmailName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_KWS_UpdateParentEmailName);
			EOS_KWS_UpdateParentEmail = (EOS_KWS_UpdateParentEmailDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_UpdateParentEmailDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_CopyLeaderboardDefinitionByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_CopyLeaderboardDefinitionByIndexName);
			EOS_Leaderboards_CopyLeaderboardDefinitionByIndex = (EOS_Leaderboards_CopyLeaderboardDefinitionByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardDefinitionByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdName);
			EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId = (EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_CopyLeaderboardRecordByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_CopyLeaderboardRecordByIndexName);
			EOS_Leaderboards_CopyLeaderboardRecordByIndex = (EOS_Leaderboards_CopyLeaderboardRecordByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardRecordByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_CopyLeaderboardRecordByUserIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_CopyLeaderboardRecordByUserIdName);
			EOS_Leaderboards_CopyLeaderboardRecordByUserId = (EOS_Leaderboards_CopyLeaderboardRecordByUserIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardRecordByUserIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_CopyLeaderboardUserScoreByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_CopyLeaderboardUserScoreByIndexName);
			EOS_Leaderboards_CopyLeaderboardUserScoreByIndex = (EOS_Leaderboards_CopyLeaderboardUserScoreByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardUserScoreByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdName);
			EOS_Leaderboards_CopyLeaderboardUserScoreByUserId = (EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_Definition_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_Definition_ReleaseName);
			EOS_Leaderboards_Definition_Release = (EOS_Leaderboards_Definition_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_Definition_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_GetLeaderboardDefinitionCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_GetLeaderboardDefinitionCountName);
			EOS_Leaderboards_GetLeaderboardDefinitionCount = (EOS_Leaderboards_GetLeaderboardDefinitionCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_GetLeaderboardDefinitionCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_GetLeaderboardRecordCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_GetLeaderboardRecordCountName);
			EOS_Leaderboards_GetLeaderboardRecordCount = (EOS_Leaderboards_GetLeaderboardRecordCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_GetLeaderboardRecordCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_GetLeaderboardUserScoreCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_GetLeaderboardUserScoreCountName);
			EOS_Leaderboards_GetLeaderboardUserScoreCount = (EOS_Leaderboards_GetLeaderboardUserScoreCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_GetLeaderboardUserScoreCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_LeaderboardRecord_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_LeaderboardRecord_ReleaseName);
			EOS_Leaderboards_LeaderboardRecord_Release = (EOS_Leaderboards_LeaderboardRecord_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_LeaderboardRecord_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_LeaderboardUserScore_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_LeaderboardUserScore_ReleaseName);
			EOS_Leaderboards_LeaderboardUserScore_Release = (EOS_Leaderboards_LeaderboardUserScore_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_LeaderboardUserScore_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_QueryLeaderboardDefinitionsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_QueryLeaderboardDefinitionsName);
			EOS_Leaderboards_QueryLeaderboardDefinitions = (EOS_Leaderboards_QueryLeaderboardDefinitionsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_QueryLeaderboardDefinitionsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_QueryLeaderboardRanksName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_QueryLeaderboardRanksName);
			EOS_Leaderboards_QueryLeaderboardRanks = (EOS_Leaderboards_QueryLeaderboardRanksDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_QueryLeaderboardRanksDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Leaderboards_QueryLeaderboardUserScoresName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Leaderboards_QueryLeaderboardUserScoresName);
			EOS_Leaderboards_QueryLeaderboardUserScores = (EOS_Leaderboards_QueryLeaderboardUserScoresDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_QueryLeaderboardUserScoresDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_CopyAttributeByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_CopyAttributeByIndexName);
			EOS_LobbyDetails_CopyAttributeByIndex = (EOS_LobbyDetails_CopyAttributeByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyAttributeByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_CopyAttributeByKeyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_CopyAttributeByKeyName);
			EOS_LobbyDetails_CopyAttributeByKey = (EOS_LobbyDetails_CopyAttributeByKeyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyAttributeByKeyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_CopyInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_CopyInfoName);
			EOS_LobbyDetails_CopyInfo = (EOS_LobbyDetails_CopyInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_CopyMemberAttributeByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_CopyMemberAttributeByIndexName);
			EOS_LobbyDetails_CopyMemberAttributeByIndex = (EOS_LobbyDetails_CopyMemberAttributeByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyMemberAttributeByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_CopyMemberAttributeByKeyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_CopyMemberAttributeByKeyName);
			EOS_LobbyDetails_CopyMemberAttributeByKey = (EOS_LobbyDetails_CopyMemberAttributeByKeyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyMemberAttributeByKeyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_CopyMemberInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_CopyMemberInfoName);
			EOS_LobbyDetails_CopyMemberInfo = (EOS_LobbyDetails_CopyMemberInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyMemberInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_GetAttributeCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_GetAttributeCountName);
			EOS_LobbyDetails_GetAttributeCount = (EOS_LobbyDetails_GetAttributeCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetAttributeCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_GetLobbyOwnerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_GetLobbyOwnerName);
			EOS_LobbyDetails_GetLobbyOwner = (EOS_LobbyDetails_GetLobbyOwnerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetLobbyOwnerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_GetMemberAttributeCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_GetMemberAttributeCountName);
			EOS_LobbyDetails_GetMemberAttributeCount = (EOS_LobbyDetails_GetMemberAttributeCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetMemberAttributeCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_GetMemberByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_GetMemberByIndexName);
			EOS_LobbyDetails_GetMemberByIndex = (EOS_LobbyDetails_GetMemberByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetMemberByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_GetMemberCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_GetMemberCountName);
			EOS_LobbyDetails_GetMemberCount = (EOS_LobbyDetails_GetMemberCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetMemberCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_Info_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_Info_ReleaseName);
			EOS_LobbyDetails_Info_Release = (EOS_LobbyDetails_Info_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_Info_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_MemberInfo_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_MemberInfo_ReleaseName);
			EOS_LobbyDetails_MemberInfo_Release = (EOS_LobbyDetails_MemberInfo_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_MemberInfo_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyDetails_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyDetails_ReleaseName);
			EOS_LobbyDetails_Release = (EOS_LobbyDetails_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_AddAttributeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_AddAttributeName);
			EOS_LobbyModification_AddAttribute = (EOS_LobbyModification_AddAttributeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_AddAttributeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_AddMemberAttributeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_AddMemberAttributeName);
			EOS_LobbyModification_AddMemberAttribute = (EOS_LobbyModification_AddMemberAttributeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_AddMemberAttributeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_ReleaseName);
			EOS_LobbyModification_Release = (EOS_LobbyModification_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_RemoveAttributeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_RemoveAttributeName);
			EOS_LobbyModification_RemoveAttribute = (EOS_LobbyModification_RemoveAttributeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_RemoveAttributeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_RemoveMemberAttributeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_RemoveMemberAttributeName);
			EOS_LobbyModification_RemoveMemberAttribute = (EOS_LobbyModification_RemoveMemberAttributeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_RemoveMemberAttributeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_SetAllowedPlatformIdsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_SetAllowedPlatformIdsName);
			EOS_LobbyModification_SetAllowedPlatformIds = (EOS_LobbyModification_SetAllowedPlatformIdsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetAllowedPlatformIdsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_SetBucketIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_SetBucketIdName);
			EOS_LobbyModification_SetBucketId = (EOS_LobbyModification_SetBucketIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetBucketIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_SetInvitesAllowedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_SetInvitesAllowedName);
			EOS_LobbyModification_SetInvitesAllowed = (EOS_LobbyModification_SetInvitesAllowedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetInvitesAllowedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_SetMaxMembersName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_SetMaxMembersName);
			EOS_LobbyModification_SetMaxMembers = (EOS_LobbyModification_SetMaxMembersDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetMaxMembersDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbyModification_SetPermissionLevelName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbyModification_SetPermissionLevelName);
			EOS_LobbyModification_SetPermissionLevel = (EOS_LobbyModification_SetPermissionLevelDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetPermissionLevelDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_CopySearchResultByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_CopySearchResultByIndexName);
			EOS_LobbySearch_CopySearchResultByIndex = (EOS_LobbySearch_CopySearchResultByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_CopySearchResultByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_FindName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_FindName);
			EOS_LobbySearch_Find = (EOS_LobbySearch_FindDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_FindDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_GetSearchResultCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_GetSearchResultCountName);
			EOS_LobbySearch_GetSearchResultCount = (EOS_LobbySearch_GetSearchResultCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_GetSearchResultCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_ReleaseName);
			EOS_LobbySearch_Release = (EOS_LobbySearch_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_RemoveParameterName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_RemoveParameterName);
			EOS_LobbySearch_RemoveParameter = (EOS_LobbySearch_RemoveParameterDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_RemoveParameterDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_SetLobbyIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_SetLobbyIdName);
			EOS_LobbySearch_SetLobbyId = (EOS_LobbySearch_SetLobbyIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetLobbyIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_SetMaxResultsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_SetMaxResultsName);
			EOS_LobbySearch_SetMaxResults = (EOS_LobbySearch_SetMaxResultsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetMaxResultsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_SetParameterName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_SetParameterName);
			EOS_LobbySearch_SetParameter = (EOS_LobbySearch_SetParameterDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetParameterDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_LobbySearch_SetTargetUserIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_LobbySearch_SetTargetUserIdName);
			EOS_LobbySearch_SetTargetUserId = (EOS_LobbySearch_SetTargetUserIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetTargetUserIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyJoinLobbyAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyJoinLobbyAcceptedName);
			EOS_Lobby_AddNotifyJoinLobbyAccepted = (EOS_Lobby_AddNotifyJoinLobbyAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyJoinLobbyAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLeaveLobbyRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLeaveLobbyRequestedName);
			EOS_Lobby_AddNotifyLeaveLobbyRequested = (EOS_Lobby_AddNotifyLeaveLobbyRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLeaveLobbyRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLobbyInviteAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLobbyInviteAcceptedName);
			EOS_Lobby_AddNotifyLobbyInviteAccepted = (EOS_Lobby_AddNotifyLobbyInviteAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyInviteAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLobbyInviteReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLobbyInviteReceivedName);
			EOS_Lobby_AddNotifyLobbyInviteReceived = (EOS_Lobby_AddNotifyLobbyInviteReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyInviteReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLobbyInviteRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLobbyInviteRejectedName);
			EOS_Lobby_AddNotifyLobbyInviteRejected = (EOS_Lobby_AddNotifyLobbyInviteRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyInviteRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLobbyMemberStatusReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLobbyMemberStatusReceivedName);
			EOS_Lobby_AddNotifyLobbyMemberStatusReceived = (EOS_Lobby_AddNotifyLobbyMemberStatusReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyMemberStatusReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedName);
			EOS_Lobby_AddNotifyLobbyMemberUpdateReceived = (EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyLobbyUpdateReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyLobbyUpdateReceivedName);
			EOS_Lobby_AddNotifyLobbyUpdateReceived = (EOS_Lobby_AddNotifyLobbyUpdateReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyUpdateReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifyRTCRoomConnectionChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifyRTCRoomConnectionChangedName);
			EOS_Lobby_AddNotifyRTCRoomConnectionChanged = (EOS_Lobby_AddNotifyRTCRoomConnectionChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyRTCRoomConnectionChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedName);
			EOS_Lobby_AddNotifySendLobbyNativeInviteRequested = (EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_Attribute_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_Attribute_ReleaseName);
			EOS_Lobby_Attribute_Release = (EOS_Lobby_Attribute_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_Attribute_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_CopyLobbyDetailsHandleName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_CopyLobbyDetailsHandleName);
			EOS_Lobby_CopyLobbyDetailsHandle = (EOS_Lobby_CopyLobbyDetailsHandleDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CopyLobbyDetailsHandleDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_CopyLobbyDetailsHandleByInviteIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_CopyLobbyDetailsHandleByInviteIdName);
			EOS_Lobby_CopyLobbyDetailsHandleByInviteId = (EOS_Lobby_CopyLobbyDetailsHandleByInviteIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CopyLobbyDetailsHandleByInviteIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdName);
			EOS_Lobby_CopyLobbyDetailsHandleByUiEventId = (EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_CreateLobbyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_CreateLobbyName);
			EOS_Lobby_CreateLobby = (EOS_Lobby_CreateLobbyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CreateLobbyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_CreateLobbySearchName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_CreateLobbySearchName);
			EOS_Lobby_CreateLobbySearch = (EOS_Lobby_CreateLobbySearchDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CreateLobbySearchDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_DestroyLobbyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_DestroyLobbyName);
			EOS_Lobby_DestroyLobby = (EOS_Lobby_DestroyLobbyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_DestroyLobbyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_GetConnectStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_GetConnectStringName);
			EOS_Lobby_GetConnectString = (EOS_Lobby_GetConnectStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetConnectStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_GetInviteCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_GetInviteCountName);
			EOS_Lobby_GetInviteCount = (EOS_Lobby_GetInviteCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetInviteCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_GetInviteIdByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_GetInviteIdByIndexName);
			EOS_Lobby_GetInviteIdByIndex = (EOS_Lobby_GetInviteIdByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetInviteIdByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_GetRTCRoomNameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_GetRTCRoomNameName);
			EOS_Lobby_GetRTCRoomName = (EOS_Lobby_GetRTCRoomNameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetRTCRoomNameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_HardMuteMemberName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_HardMuteMemberName);
			EOS_Lobby_HardMuteMember = (EOS_Lobby_HardMuteMemberDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_HardMuteMemberDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_IsRTCRoomConnectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_IsRTCRoomConnectedName);
			EOS_Lobby_IsRTCRoomConnected = (EOS_Lobby_IsRTCRoomConnectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_IsRTCRoomConnectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_JoinLobbyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_JoinLobbyName);
			EOS_Lobby_JoinLobby = (EOS_Lobby_JoinLobbyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_JoinLobbyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_JoinLobbyByIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_JoinLobbyByIdName);
			EOS_Lobby_JoinLobbyById = (EOS_Lobby_JoinLobbyByIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_JoinLobbyByIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_JoinRTCRoomName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_JoinRTCRoomName);
			EOS_Lobby_JoinRTCRoom = (EOS_Lobby_JoinRTCRoomDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_JoinRTCRoomDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_KickMemberName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_KickMemberName);
			EOS_Lobby_KickMember = (EOS_Lobby_KickMemberDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_KickMemberDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_LeaveLobbyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_LeaveLobbyName);
			EOS_Lobby_LeaveLobby = (EOS_Lobby_LeaveLobbyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_LeaveLobbyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_LeaveRTCRoomName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_LeaveRTCRoomName);
			EOS_Lobby_LeaveRTCRoom = (EOS_Lobby_LeaveRTCRoomDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_LeaveRTCRoomDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_ParseConnectStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_ParseConnectStringName);
			EOS_Lobby_ParseConnectString = (EOS_Lobby_ParseConnectStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_ParseConnectStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_PromoteMemberName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_PromoteMemberName);
			EOS_Lobby_PromoteMember = (EOS_Lobby_PromoteMemberDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_PromoteMemberDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_QueryInvitesName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_QueryInvitesName);
			EOS_Lobby_QueryInvites = (EOS_Lobby_QueryInvitesDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_QueryInvitesDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RejectInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RejectInviteName);
			EOS_Lobby_RejectInvite = (EOS_Lobby_RejectInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RejectInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyJoinLobbyAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyJoinLobbyAcceptedName);
			EOS_Lobby_RemoveNotifyJoinLobbyAccepted = (EOS_Lobby_RemoveNotifyJoinLobbyAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyJoinLobbyAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLeaveLobbyRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLeaveLobbyRequestedName);
			EOS_Lobby_RemoveNotifyLeaveLobbyRequested = (EOS_Lobby_RemoveNotifyLeaveLobbyRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLeaveLobbyRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLobbyInviteAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLobbyInviteAcceptedName);
			EOS_Lobby_RemoveNotifyLobbyInviteAccepted = (EOS_Lobby_RemoveNotifyLobbyInviteAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyInviteAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLobbyInviteReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLobbyInviteReceivedName);
			EOS_Lobby_RemoveNotifyLobbyInviteReceived = (EOS_Lobby_RemoveNotifyLobbyInviteReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyInviteReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLobbyInviteRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLobbyInviteRejectedName);
			EOS_Lobby_RemoveNotifyLobbyInviteRejected = (EOS_Lobby_RemoveNotifyLobbyInviteRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyInviteRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedName);
			EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived = (EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedName);
			EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived = (EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyLobbyUpdateReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyLobbyUpdateReceivedName);
			EOS_Lobby_RemoveNotifyLobbyUpdateReceived = (EOS_Lobby_RemoveNotifyLobbyUpdateReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyUpdateReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedName);
			EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged = (EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedName);
			EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested = (EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_SendInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_SendInviteName);
			EOS_Lobby_SendInvite = (EOS_Lobby_SendInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_SendInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_UpdateLobbyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_UpdateLobbyName);
			EOS_Lobby_UpdateLobby = (EOS_Lobby_UpdateLobbyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_UpdateLobbyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Lobby_UpdateLobbyModificationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Lobby_UpdateLobbyModificationName);
			EOS_Lobby_UpdateLobbyModification = (EOS_Lobby_UpdateLobbyModificationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_UpdateLobbyModificationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Logging_SetCallbackName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Logging_SetCallbackName);
			EOS_Logging_SetCallback = (EOS_Logging_SetCallbackDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Logging_SetCallbackDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Logging_SetLogLevelName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Logging_SetLogLevelName);
			EOS_Logging_SetLogLevel = (EOS_Logging_SetLogLevelDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Logging_SetLogLevelDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Metrics_BeginPlayerSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Metrics_BeginPlayerSessionName);
			EOS_Metrics_BeginPlayerSession = (EOS_Metrics_BeginPlayerSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Metrics_BeginPlayerSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Metrics_EndPlayerSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Metrics_EndPlayerSessionName);
			EOS_Metrics_EndPlayerSession = (EOS_Metrics_EndPlayerSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Metrics_EndPlayerSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Mods_CopyModInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Mods_CopyModInfoName);
			EOS_Mods_CopyModInfo = (EOS_Mods_CopyModInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_CopyModInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Mods_EnumerateModsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Mods_EnumerateModsName);
			EOS_Mods_EnumerateMods = (EOS_Mods_EnumerateModsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_EnumerateModsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Mods_InstallModName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Mods_InstallModName);
			EOS_Mods_InstallMod = (EOS_Mods_InstallModDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_InstallModDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Mods_ModInfo_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Mods_ModInfo_ReleaseName);
			EOS_Mods_ModInfo_Release = (EOS_Mods_ModInfo_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_ModInfo_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Mods_UninstallModName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Mods_UninstallModName);
			EOS_Mods_UninstallMod = (EOS_Mods_UninstallModDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_UninstallModDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Mods_UpdateModName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Mods_UpdateModName);
			EOS_Mods_UpdateMod = (EOS_Mods_UpdateModDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_UpdateModDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_AcceptConnectionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_AcceptConnectionName);
			EOS_P2P_AcceptConnection = (EOS_P2P_AcceptConnectionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AcceptConnectionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_AddNotifyIncomingPacketQueueFullName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_AddNotifyIncomingPacketQueueFullName);
			EOS_P2P_AddNotifyIncomingPacketQueueFull = (EOS_P2P_AddNotifyIncomingPacketQueueFullDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyIncomingPacketQueueFullDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_AddNotifyPeerConnectionClosedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_AddNotifyPeerConnectionClosedName);
			EOS_P2P_AddNotifyPeerConnectionClosed = (EOS_P2P_AddNotifyPeerConnectionClosedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyPeerConnectionClosedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_AddNotifyPeerConnectionEstablishedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_AddNotifyPeerConnectionEstablishedName);
			EOS_P2P_AddNotifyPeerConnectionEstablished = (EOS_P2P_AddNotifyPeerConnectionEstablishedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyPeerConnectionEstablishedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_AddNotifyPeerConnectionInterruptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_AddNotifyPeerConnectionInterruptedName);
			EOS_P2P_AddNotifyPeerConnectionInterrupted = (EOS_P2P_AddNotifyPeerConnectionInterruptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyPeerConnectionInterruptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_AddNotifyPeerConnectionRequestName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_AddNotifyPeerConnectionRequestName);
			EOS_P2P_AddNotifyPeerConnectionRequest = (EOS_P2P_AddNotifyPeerConnectionRequestDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyPeerConnectionRequestDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_ClearPacketQueueName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_ClearPacketQueueName);
			EOS_P2P_ClearPacketQueue = (EOS_P2P_ClearPacketQueueDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_ClearPacketQueueDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_CloseConnectionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_CloseConnectionName);
			EOS_P2P_CloseConnection = (EOS_P2P_CloseConnectionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_CloseConnectionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_CloseConnectionsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_CloseConnectionsName);
			EOS_P2P_CloseConnections = (EOS_P2P_CloseConnectionsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_CloseConnectionsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_GetNATTypeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_GetNATTypeName);
			EOS_P2P_GetNATType = (EOS_P2P_GetNATTypeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetNATTypeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_GetNextReceivedPacketSizeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_GetNextReceivedPacketSizeName);
			EOS_P2P_GetNextReceivedPacketSize = (EOS_P2P_GetNextReceivedPacketSizeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetNextReceivedPacketSizeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_GetPacketQueueInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_GetPacketQueueInfoName);
			EOS_P2P_GetPacketQueueInfo = (EOS_P2P_GetPacketQueueInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetPacketQueueInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_GetPortRangeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_GetPortRangeName);
			EOS_P2P_GetPortRange = (EOS_P2P_GetPortRangeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetPortRangeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_GetRelayControlName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_GetRelayControlName);
			EOS_P2P_GetRelayControl = (EOS_P2P_GetRelayControlDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetRelayControlDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_QueryNATTypeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_QueryNATTypeName);
			EOS_P2P_QueryNATType = (EOS_P2P_QueryNATTypeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_QueryNATTypeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_ReceivePacketName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_ReceivePacketName);
			EOS_P2P_ReceivePacket = (EOS_P2P_ReceivePacketDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_ReceivePacketDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_RemoveNotifyIncomingPacketQueueFullName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_RemoveNotifyIncomingPacketQueueFullName);
			EOS_P2P_RemoveNotifyIncomingPacketQueueFull = (EOS_P2P_RemoveNotifyIncomingPacketQueueFullDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyIncomingPacketQueueFullDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_RemoveNotifyPeerConnectionClosedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_RemoveNotifyPeerConnectionClosedName);
			EOS_P2P_RemoveNotifyPeerConnectionClosed = (EOS_P2P_RemoveNotifyPeerConnectionClosedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyPeerConnectionClosedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_RemoveNotifyPeerConnectionEstablishedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_RemoveNotifyPeerConnectionEstablishedName);
			EOS_P2P_RemoveNotifyPeerConnectionEstablished = (EOS_P2P_RemoveNotifyPeerConnectionEstablishedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyPeerConnectionEstablishedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_RemoveNotifyPeerConnectionInterruptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_RemoveNotifyPeerConnectionInterruptedName);
			EOS_P2P_RemoveNotifyPeerConnectionInterrupted = (EOS_P2P_RemoveNotifyPeerConnectionInterruptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyPeerConnectionInterruptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_RemoveNotifyPeerConnectionRequestName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_RemoveNotifyPeerConnectionRequestName);
			EOS_P2P_RemoveNotifyPeerConnectionRequest = (EOS_P2P_RemoveNotifyPeerConnectionRequestDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyPeerConnectionRequestDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_SendPacketName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_SendPacketName);
			EOS_P2P_SendPacket = (EOS_P2P_SendPacketDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SendPacketDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_SetPacketQueueSizeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_SetPacketQueueSizeName);
			EOS_P2P_SetPacketQueueSize = (EOS_P2P_SetPacketQueueSizeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SetPacketQueueSizeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_SetPortRangeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_SetPortRangeName);
			EOS_P2P_SetPortRange = (EOS_P2P_SetPortRangeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SetPortRangeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_P2P_SetRelayControlName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_P2P_SetRelayControlName);
			EOS_P2P_SetRelayControl = (EOS_P2P_SetRelayControlDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SetRelayControlDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_CheckForLauncherAndRestartName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_CheckForLauncherAndRestartName);
			EOS_Platform_CheckForLauncherAndRestart = (EOS_Platform_CheckForLauncherAndRestartDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_CheckForLauncherAndRestartDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_CreateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_CreateName);
			EOS_Platform_Create = (EOS_Platform_CreateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_CreateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetAchievementsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetAchievementsInterfaceName);
			EOS_Platform_GetAchievementsInterface = (EOS_Platform_GetAchievementsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAchievementsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetActiveCountryCodeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetActiveCountryCodeName);
			EOS_Platform_GetActiveCountryCode = (EOS_Platform_GetActiveCountryCodeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetActiveCountryCodeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetActiveLocaleCodeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetActiveLocaleCodeName);
			EOS_Platform_GetActiveLocaleCode = (EOS_Platform_GetActiveLocaleCodeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetActiveLocaleCodeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetAntiCheatClientInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetAntiCheatClientInterfaceName);
			EOS_Platform_GetAntiCheatClientInterface = (EOS_Platform_GetAntiCheatClientInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAntiCheatClientInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetAntiCheatServerInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetAntiCheatServerInterfaceName);
			EOS_Platform_GetAntiCheatServerInterface = (EOS_Platform_GetAntiCheatServerInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAntiCheatServerInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetApplicationStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetApplicationStatusName);
			EOS_Platform_GetApplicationStatus = (EOS_Platform_GetApplicationStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetApplicationStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetAuthInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetAuthInterfaceName);
			EOS_Platform_GetAuthInterface = (EOS_Platform_GetAuthInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAuthInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetConnectInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetConnectInterfaceName);
			EOS_Platform_GetConnectInterface = (EOS_Platform_GetConnectInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetConnectInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetCustomInvitesInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetCustomInvitesInterfaceName);
			EOS_Platform_GetCustomInvitesInterface = (EOS_Platform_GetCustomInvitesInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetCustomInvitesInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetDesktopCrossplayStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetDesktopCrossplayStatusName);
			EOS_Platform_GetDesktopCrossplayStatus = (EOS_Platform_GetDesktopCrossplayStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetDesktopCrossplayStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetEcomInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetEcomInterfaceName);
			EOS_Platform_GetEcomInterface = (EOS_Platform_GetEcomInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetEcomInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetFriendsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetFriendsInterfaceName);
			EOS_Platform_GetFriendsInterface = (EOS_Platform_GetFriendsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetFriendsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetIntegratedPlatformInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetIntegratedPlatformInterfaceName);
			EOS_Platform_GetIntegratedPlatformInterface = (EOS_Platform_GetIntegratedPlatformInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetIntegratedPlatformInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetKWSInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetKWSInterfaceName);
			EOS_Platform_GetKWSInterface = (EOS_Platform_GetKWSInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetKWSInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetLeaderboardsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetLeaderboardsInterfaceName);
			EOS_Platform_GetLeaderboardsInterface = (EOS_Platform_GetLeaderboardsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetLeaderboardsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetLobbyInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetLobbyInterfaceName);
			EOS_Platform_GetLobbyInterface = (EOS_Platform_GetLobbyInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetLobbyInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetMetricsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetMetricsInterfaceName);
			EOS_Platform_GetMetricsInterface = (EOS_Platform_GetMetricsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetMetricsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetModsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetModsInterfaceName);
			EOS_Platform_GetModsInterface = (EOS_Platform_GetModsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetModsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetNetworkStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetNetworkStatusName);
			EOS_Platform_GetNetworkStatus = (EOS_Platform_GetNetworkStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetNetworkStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetOverrideCountryCodeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetOverrideCountryCodeName);
			EOS_Platform_GetOverrideCountryCode = (EOS_Platform_GetOverrideCountryCodeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetOverrideCountryCodeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetOverrideLocaleCodeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetOverrideLocaleCodeName);
			EOS_Platform_GetOverrideLocaleCode = (EOS_Platform_GetOverrideLocaleCodeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetOverrideLocaleCodeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetP2PInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetP2PInterfaceName);
			EOS_Platform_GetP2PInterface = (EOS_Platform_GetP2PInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetP2PInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetPlayerDataStorageInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetPlayerDataStorageInterfaceName);
			EOS_Platform_GetPlayerDataStorageInterface = (EOS_Platform_GetPlayerDataStorageInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetPlayerDataStorageInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetPresenceInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetPresenceInterfaceName);
			EOS_Platform_GetPresenceInterface = (EOS_Platform_GetPresenceInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetPresenceInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetProgressionSnapshotInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetProgressionSnapshotInterfaceName);
			EOS_Platform_GetProgressionSnapshotInterface = (EOS_Platform_GetProgressionSnapshotInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetProgressionSnapshotInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetRTCAdminInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetRTCAdminInterfaceName);
			EOS_Platform_GetRTCAdminInterface = (EOS_Platform_GetRTCAdminInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetRTCAdminInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetRTCInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetRTCInterfaceName);
			EOS_Platform_GetRTCInterface = (EOS_Platform_GetRTCInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetRTCInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetReportsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetReportsInterfaceName);
			EOS_Platform_GetReportsInterface = (EOS_Platform_GetReportsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetReportsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetSanctionsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetSanctionsInterfaceName);
			EOS_Platform_GetSanctionsInterface = (EOS_Platform_GetSanctionsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetSanctionsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetSessionsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetSessionsInterfaceName);
			EOS_Platform_GetSessionsInterface = (EOS_Platform_GetSessionsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetSessionsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetStatsInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetStatsInterfaceName);
			EOS_Platform_GetStatsInterface = (EOS_Platform_GetStatsInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetStatsInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetTitleStorageInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetTitleStorageInterfaceName);
			EOS_Platform_GetTitleStorageInterface = (EOS_Platform_GetTitleStorageInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetTitleStorageInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetUIInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetUIInterfaceName);
			EOS_Platform_GetUIInterface = (EOS_Platform_GetUIInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetUIInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_GetUserInfoInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_GetUserInfoInterfaceName);
			EOS_Platform_GetUserInfoInterface = (EOS_Platform_GetUserInfoInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetUserInfoInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_ReleaseName);
			EOS_Platform_Release = (EOS_Platform_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_SetApplicationStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_SetApplicationStatusName);
			EOS_Platform_SetApplicationStatus = (EOS_Platform_SetApplicationStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_SetApplicationStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_SetNetworkStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_SetNetworkStatusName);
			EOS_Platform_SetNetworkStatus = (EOS_Platform_SetNetworkStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_SetNetworkStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_SetOverrideCountryCodeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_SetOverrideCountryCodeName);
			EOS_Platform_SetOverrideCountryCode = (EOS_Platform_SetOverrideCountryCodeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_SetOverrideCountryCodeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_SetOverrideLocaleCodeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_SetOverrideLocaleCodeName);
			EOS_Platform_SetOverrideLocaleCode = (EOS_Platform_SetOverrideLocaleCodeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_SetOverrideLocaleCodeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Platform_TickName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Platform_TickName);
			EOS_Platform_Tick = (EOS_Platform_TickDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_TickDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorageFileTransferRequest_CancelRequestName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorageFileTransferRequest_CancelRequestName);
			EOS_PlayerDataStorageFileTransferRequest_CancelRequest = (EOS_PlayerDataStorageFileTransferRequest_CancelRequestDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_CancelRequestDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateName);
			EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState = (EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorageFileTransferRequest_GetFilenameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorageFileTransferRequest_GetFilenameName);
			EOS_PlayerDataStorageFileTransferRequest_GetFilename = (EOS_PlayerDataStorageFileTransferRequest_GetFilenameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_GetFilenameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorageFileTransferRequest_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorageFileTransferRequest_ReleaseName);
			EOS_PlayerDataStorageFileTransferRequest_Release = (EOS_PlayerDataStorageFileTransferRequest_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_CopyFileMetadataAtIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_CopyFileMetadataAtIndexName);
			EOS_PlayerDataStorage_CopyFileMetadataAtIndex = (EOS_PlayerDataStorage_CopyFileMetadataAtIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_CopyFileMetadataAtIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_CopyFileMetadataByFilenameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_CopyFileMetadataByFilenameName);
			EOS_PlayerDataStorage_CopyFileMetadataByFilename = (EOS_PlayerDataStorage_CopyFileMetadataByFilenameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_CopyFileMetadataByFilenameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_DeleteCacheName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_DeleteCacheName);
			EOS_PlayerDataStorage_DeleteCache = (EOS_PlayerDataStorage_DeleteCacheDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_DeleteCacheDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_DeleteFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_DeleteFileName);
			EOS_PlayerDataStorage_DeleteFile = (EOS_PlayerDataStorage_DeleteFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_DeleteFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_DuplicateFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_DuplicateFileName);
			EOS_PlayerDataStorage_DuplicateFile = (EOS_PlayerDataStorage_DuplicateFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_DuplicateFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_FileMetadata_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_FileMetadata_ReleaseName);
			EOS_PlayerDataStorage_FileMetadata_Release = (EOS_PlayerDataStorage_FileMetadata_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_FileMetadata_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_GetFileMetadataCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_GetFileMetadataCountName);
			EOS_PlayerDataStorage_GetFileMetadataCount = (EOS_PlayerDataStorage_GetFileMetadataCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_GetFileMetadataCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_QueryFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_QueryFileName);
			EOS_PlayerDataStorage_QueryFile = (EOS_PlayerDataStorage_QueryFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_QueryFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_QueryFileListName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_QueryFileListName);
			EOS_PlayerDataStorage_QueryFileList = (EOS_PlayerDataStorage_QueryFileListDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_QueryFileListDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_ReadFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_ReadFileName);
			EOS_PlayerDataStorage_ReadFile = (EOS_PlayerDataStorage_ReadFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_ReadFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PlayerDataStorage_WriteFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PlayerDataStorage_WriteFileName);
			EOS_PlayerDataStorage_WriteFile = (EOS_PlayerDataStorage_WriteFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_WriteFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PresenceModification_DeleteDataName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PresenceModification_DeleteDataName);
			EOS_PresenceModification_DeleteData = (EOS_PresenceModification_DeleteDataDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_DeleteDataDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PresenceModification_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PresenceModification_ReleaseName);
			EOS_PresenceModification_Release = (EOS_PresenceModification_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PresenceModification_SetDataName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PresenceModification_SetDataName);
			EOS_PresenceModification_SetData = (EOS_PresenceModification_SetDataDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetDataDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PresenceModification_SetJoinInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PresenceModification_SetJoinInfoName);
			EOS_PresenceModification_SetJoinInfo = (EOS_PresenceModification_SetJoinInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetJoinInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PresenceModification_SetRawRichTextName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PresenceModification_SetRawRichTextName);
			EOS_PresenceModification_SetRawRichText = (EOS_PresenceModification_SetRawRichTextDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetRawRichTextDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_PresenceModification_SetStatusName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_PresenceModification_SetStatusName);
			EOS_PresenceModification_SetStatus = (EOS_PresenceModification_SetStatusDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetStatusDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_AddNotifyJoinGameAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_AddNotifyJoinGameAcceptedName);
			EOS_Presence_AddNotifyJoinGameAccepted = (EOS_Presence_AddNotifyJoinGameAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_AddNotifyJoinGameAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_AddNotifyOnPresenceChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_AddNotifyOnPresenceChangedName);
			EOS_Presence_AddNotifyOnPresenceChanged = (EOS_Presence_AddNotifyOnPresenceChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_AddNotifyOnPresenceChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_CopyPresenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_CopyPresenceName);
			EOS_Presence_CopyPresence = (EOS_Presence_CopyPresenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_CopyPresenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_CreatePresenceModificationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_CreatePresenceModificationName);
			EOS_Presence_CreatePresenceModification = (EOS_Presence_CreatePresenceModificationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_CreatePresenceModificationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_GetJoinInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_GetJoinInfoName);
			EOS_Presence_GetJoinInfo = (EOS_Presence_GetJoinInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_GetJoinInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_HasPresenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_HasPresenceName);
			EOS_Presence_HasPresence = (EOS_Presence_HasPresenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_HasPresenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_Info_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_Info_ReleaseName);
			EOS_Presence_Info_Release = (EOS_Presence_Info_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_Info_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_QueryPresenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_QueryPresenceName);
			EOS_Presence_QueryPresence = (EOS_Presence_QueryPresenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_QueryPresenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_RemoveNotifyJoinGameAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_RemoveNotifyJoinGameAcceptedName);
			EOS_Presence_RemoveNotifyJoinGameAccepted = (EOS_Presence_RemoveNotifyJoinGameAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_RemoveNotifyJoinGameAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_RemoveNotifyOnPresenceChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_RemoveNotifyOnPresenceChangedName);
			EOS_Presence_RemoveNotifyOnPresenceChanged = (EOS_Presence_RemoveNotifyOnPresenceChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_RemoveNotifyOnPresenceChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Presence_SetPresenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Presence_SetPresenceName);
			EOS_Presence_SetPresence = (EOS_Presence_SetPresenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_SetPresenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProductUserId_FromStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProductUserId_FromStringName);
			EOS_ProductUserId_FromString = (EOS_ProductUserId_FromStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProductUserId_FromStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProductUserId_IsValidName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProductUserId_IsValidName);
			EOS_ProductUserId_IsValid = (EOS_ProductUserId_IsValidDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProductUserId_IsValidDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProductUserId_ToStringName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProductUserId_ToStringName);
			EOS_ProductUserId_ToString = (EOS_ProductUserId_ToStringDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProductUserId_ToStringDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProgressionSnapshot_AddProgressionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProgressionSnapshot_AddProgressionName);
			EOS_ProgressionSnapshot_AddProgression = (EOS_ProgressionSnapshot_AddProgressionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProgressionSnapshot_AddProgressionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProgressionSnapshot_BeginSnapshotName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProgressionSnapshot_BeginSnapshotName);
			EOS_ProgressionSnapshot_BeginSnapshot = (EOS_ProgressionSnapshot_BeginSnapshotDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProgressionSnapshot_BeginSnapshotDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProgressionSnapshot_DeleteSnapshotName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProgressionSnapshot_DeleteSnapshotName);
			EOS_ProgressionSnapshot_DeleteSnapshot = (EOS_ProgressionSnapshot_DeleteSnapshotDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProgressionSnapshot_DeleteSnapshotDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProgressionSnapshot_EndSnapshotName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProgressionSnapshot_EndSnapshotName);
			EOS_ProgressionSnapshot_EndSnapshot = (EOS_ProgressionSnapshot_EndSnapshotDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProgressionSnapshot_EndSnapshotDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ProgressionSnapshot_SubmitSnapshotName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ProgressionSnapshot_SubmitSnapshotName);
			EOS_ProgressionSnapshot_SubmitSnapshot = (EOS_ProgressionSnapshot_SubmitSnapshotDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProgressionSnapshot_SubmitSnapshotDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAdmin_CopyUserTokenByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAdmin_CopyUserTokenByIndexName);
			EOS_RTCAdmin_CopyUserTokenByIndex = (EOS_RTCAdmin_CopyUserTokenByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_CopyUserTokenByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAdmin_CopyUserTokenByUserIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAdmin_CopyUserTokenByUserIdName);
			EOS_RTCAdmin_CopyUserTokenByUserId = (EOS_RTCAdmin_CopyUserTokenByUserIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_CopyUserTokenByUserIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAdmin_KickName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAdmin_KickName);
			EOS_RTCAdmin_Kick = (EOS_RTCAdmin_KickDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_KickDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAdmin_QueryJoinRoomTokenName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAdmin_QueryJoinRoomTokenName);
			EOS_RTCAdmin_QueryJoinRoomToken = (EOS_RTCAdmin_QueryJoinRoomTokenDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_QueryJoinRoomTokenDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAdmin_SetParticipantHardMuteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAdmin_SetParticipantHardMuteName);
			EOS_RTCAdmin_SetParticipantHardMute = (EOS_RTCAdmin_SetParticipantHardMuteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_SetParticipantHardMuteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAdmin_UserToken_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAdmin_UserToken_ReleaseName);
			EOS_RTCAdmin_UserToken_Release = (EOS_RTCAdmin_UserToken_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_UserToken_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_AddNotifyAudioBeforeRenderName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_AddNotifyAudioBeforeRenderName);
			EOS_RTCAudio_AddNotifyAudioBeforeRender = (EOS_RTCAudio_AddNotifyAudioBeforeRenderDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioBeforeRenderDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_AddNotifyAudioBeforeSendName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_AddNotifyAudioBeforeSendName);
			EOS_RTCAudio_AddNotifyAudioBeforeSend = (EOS_RTCAudio_AddNotifyAudioBeforeSendDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioBeforeSendDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_AddNotifyAudioDevicesChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_AddNotifyAudioDevicesChangedName);
			EOS_RTCAudio_AddNotifyAudioDevicesChanged = (EOS_RTCAudio_AddNotifyAudioDevicesChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioDevicesChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_AddNotifyAudioInputStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_AddNotifyAudioInputStateName);
			EOS_RTCAudio_AddNotifyAudioInputState = (EOS_RTCAudio_AddNotifyAudioInputStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioInputStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_AddNotifyAudioOutputStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_AddNotifyAudioOutputStateName);
			EOS_RTCAudio_AddNotifyAudioOutputState = (EOS_RTCAudio_AddNotifyAudioOutputStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioOutputStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_AddNotifyParticipantUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_AddNotifyParticipantUpdatedName);
			EOS_RTCAudio_AddNotifyParticipantUpdated = (EOS_RTCAudio_AddNotifyParticipantUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyParticipantUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_CopyInputDeviceInformationByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_CopyInputDeviceInformationByIndexName);
			EOS_RTCAudio_CopyInputDeviceInformationByIndex = (EOS_RTCAudio_CopyInputDeviceInformationByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_CopyInputDeviceInformationByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_CopyOutputDeviceInformationByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_CopyOutputDeviceInformationByIndexName);
			EOS_RTCAudio_CopyOutputDeviceInformationByIndex = (EOS_RTCAudio_CopyOutputDeviceInformationByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_CopyOutputDeviceInformationByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_GetAudioInputDeviceByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_GetAudioInputDeviceByIndexName);
			EOS_RTCAudio_GetAudioInputDeviceByIndex = (EOS_RTCAudio_GetAudioInputDeviceByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioInputDeviceByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_GetAudioInputDevicesCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_GetAudioInputDevicesCountName);
			EOS_RTCAudio_GetAudioInputDevicesCount = (EOS_RTCAudio_GetAudioInputDevicesCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioInputDevicesCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_GetAudioOutputDeviceByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_GetAudioOutputDeviceByIndexName);
			EOS_RTCAudio_GetAudioOutputDeviceByIndex = (EOS_RTCAudio_GetAudioOutputDeviceByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioOutputDeviceByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_GetAudioOutputDevicesCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_GetAudioOutputDevicesCountName);
			EOS_RTCAudio_GetAudioOutputDevicesCount = (EOS_RTCAudio_GetAudioOutputDevicesCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioOutputDevicesCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_GetInputDevicesCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_GetInputDevicesCountName);
			EOS_RTCAudio_GetInputDevicesCount = (EOS_RTCAudio_GetInputDevicesCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetInputDevicesCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_GetOutputDevicesCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_GetOutputDevicesCountName);
			EOS_RTCAudio_GetOutputDevicesCount = (EOS_RTCAudio_GetOutputDevicesCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetOutputDevicesCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_InputDeviceInformation_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_InputDeviceInformation_ReleaseName);
			EOS_RTCAudio_InputDeviceInformation_Release = (EOS_RTCAudio_InputDeviceInformation_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_InputDeviceInformation_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_OutputDeviceInformation_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_OutputDeviceInformation_ReleaseName);
			EOS_RTCAudio_OutputDeviceInformation_Release = (EOS_RTCAudio_OutputDeviceInformation_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_OutputDeviceInformation_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_QueryInputDevicesInformationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_QueryInputDevicesInformationName);
			EOS_RTCAudio_QueryInputDevicesInformation = (EOS_RTCAudio_QueryInputDevicesInformationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_QueryInputDevicesInformationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_QueryOutputDevicesInformationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_QueryOutputDevicesInformationName);
			EOS_RTCAudio_QueryOutputDevicesInformation = (EOS_RTCAudio_QueryOutputDevicesInformationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_QueryOutputDevicesInformationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RegisterPlatformAudioUserName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RegisterPlatformAudioUserName);
			EOS_RTCAudio_RegisterPlatformAudioUser = (EOS_RTCAudio_RegisterPlatformAudioUserDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RegisterPlatformAudioUserDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RegisterPlatformUserName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RegisterPlatformUserName);
			EOS_RTCAudio_RegisterPlatformUser = (EOS_RTCAudio_RegisterPlatformUserDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RegisterPlatformUserDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RemoveNotifyAudioBeforeRenderName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RemoveNotifyAudioBeforeRenderName);
			EOS_RTCAudio_RemoveNotifyAudioBeforeRender = (EOS_RTCAudio_RemoveNotifyAudioBeforeRenderDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioBeforeRenderDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RemoveNotifyAudioBeforeSendName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RemoveNotifyAudioBeforeSendName);
			EOS_RTCAudio_RemoveNotifyAudioBeforeSend = (EOS_RTCAudio_RemoveNotifyAudioBeforeSendDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioBeforeSendDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RemoveNotifyAudioDevicesChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RemoveNotifyAudioDevicesChangedName);
			EOS_RTCAudio_RemoveNotifyAudioDevicesChanged = (EOS_RTCAudio_RemoveNotifyAudioDevicesChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioDevicesChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RemoveNotifyAudioInputStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RemoveNotifyAudioInputStateName);
			EOS_RTCAudio_RemoveNotifyAudioInputState = (EOS_RTCAudio_RemoveNotifyAudioInputStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioInputStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RemoveNotifyAudioOutputStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RemoveNotifyAudioOutputStateName);
			EOS_RTCAudio_RemoveNotifyAudioOutputState = (EOS_RTCAudio_RemoveNotifyAudioOutputStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioOutputStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_RemoveNotifyParticipantUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_RemoveNotifyParticipantUpdatedName);
			EOS_RTCAudio_RemoveNotifyParticipantUpdated = (EOS_RTCAudio_RemoveNotifyParticipantUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyParticipantUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_SendAudioName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_SendAudioName);
			EOS_RTCAudio_SendAudio = (EOS_RTCAudio_SendAudioDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SendAudioDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_SetAudioInputSettingsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_SetAudioInputSettingsName);
			EOS_RTCAudio_SetAudioInputSettings = (EOS_RTCAudio_SetAudioInputSettingsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SetAudioInputSettingsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_SetAudioOutputSettingsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_SetAudioOutputSettingsName);
			EOS_RTCAudio_SetAudioOutputSettings = (EOS_RTCAudio_SetAudioOutputSettingsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SetAudioOutputSettingsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_SetInputDeviceSettingsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_SetInputDeviceSettingsName);
			EOS_RTCAudio_SetInputDeviceSettings = (EOS_RTCAudio_SetInputDeviceSettingsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SetInputDeviceSettingsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_SetOutputDeviceSettingsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_SetOutputDeviceSettingsName);
			EOS_RTCAudio_SetOutputDeviceSettings = (EOS_RTCAudio_SetOutputDeviceSettingsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SetOutputDeviceSettingsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UnregisterPlatformAudioUserName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UnregisterPlatformAudioUserName);
			EOS_RTCAudio_UnregisterPlatformAudioUser = (EOS_RTCAudio_UnregisterPlatformAudioUserDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UnregisterPlatformAudioUserDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UnregisterPlatformUserName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UnregisterPlatformUserName);
			EOS_RTCAudio_UnregisterPlatformUser = (EOS_RTCAudio_UnregisterPlatformUserDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UnregisterPlatformUserDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UpdateParticipantVolumeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UpdateParticipantVolumeName);
			EOS_RTCAudio_UpdateParticipantVolume = (EOS_RTCAudio_UpdateParticipantVolumeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateParticipantVolumeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UpdateReceivingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UpdateReceivingName);
			EOS_RTCAudio_UpdateReceiving = (EOS_RTCAudio_UpdateReceivingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateReceivingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UpdateReceivingVolumeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UpdateReceivingVolumeName);
			EOS_RTCAudio_UpdateReceivingVolume = (EOS_RTCAudio_UpdateReceivingVolumeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateReceivingVolumeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UpdateSendingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UpdateSendingName);
			EOS_RTCAudio_UpdateSending = (EOS_RTCAudio_UpdateSendingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateSendingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCAudio_UpdateSendingVolumeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCAudio_UpdateSendingVolumeName);
			EOS_RTCAudio_UpdateSendingVolume = (EOS_RTCAudio_UpdateSendingVolumeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateSendingVolumeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_AddNotifyDataReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_AddNotifyDataReceivedName);
			EOS_RTCData_AddNotifyDataReceived = (EOS_RTCData_AddNotifyDataReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_AddNotifyDataReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_AddNotifyParticipantUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_AddNotifyParticipantUpdatedName);
			EOS_RTCData_AddNotifyParticipantUpdated = (EOS_RTCData_AddNotifyParticipantUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_AddNotifyParticipantUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_RemoveNotifyDataReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_RemoveNotifyDataReceivedName);
			EOS_RTCData_RemoveNotifyDataReceived = (EOS_RTCData_RemoveNotifyDataReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_RemoveNotifyDataReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_RemoveNotifyParticipantUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_RemoveNotifyParticipantUpdatedName);
			EOS_RTCData_RemoveNotifyParticipantUpdated = (EOS_RTCData_RemoveNotifyParticipantUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_RemoveNotifyParticipantUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_SendDataName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_SendDataName);
			EOS_RTCData_SendData = (EOS_RTCData_SendDataDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_SendDataDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_UpdateReceivingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_UpdateReceivingName);
			EOS_RTCData_UpdateReceiving = (EOS_RTCData_UpdateReceivingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_UpdateReceivingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTCData_UpdateSendingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTCData_UpdateSendingName);
			EOS_RTCData_UpdateSending = (EOS_RTCData_UpdateSendingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCData_UpdateSendingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_AddNotifyDisconnectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_AddNotifyDisconnectedName);
			EOS_RTC_AddNotifyDisconnected = (EOS_RTC_AddNotifyDisconnectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_AddNotifyDisconnectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_AddNotifyParticipantStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_AddNotifyParticipantStatusChangedName);
			EOS_RTC_AddNotifyParticipantStatusChanged = (EOS_RTC_AddNotifyParticipantStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_AddNotifyParticipantStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_AddNotifyRoomStatisticsUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_AddNotifyRoomStatisticsUpdatedName);
			EOS_RTC_AddNotifyRoomStatisticsUpdated = (EOS_RTC_AddNotifyRoomStatisticsUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_AddNotifyRoomStatisticsUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_BlockParticipantName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_BlockParticipantName);
			EOS_RTC_BlockParticipant = (EOS_RTC_BlockParticipantDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_BlockParticipantDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_GetAudioInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_GetAudioInterfaceName);
			EOS_RTC_GetAudioInterface = (EOS_RTC_GetAudioInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_GetAudioInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_GetDataInterfaceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_GetDataInterfaceName);
			EOS_RTC_GetDataInterface = (EOS_RTC_GetDataInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_GetDataInterfaceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_JoinRoomName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_JoinRoomName);
			EOS_RTC_JoinRoom = (EOS_RTC_JoinRoomDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_JoinRoomDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_LeaveRoomName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_LeaveRoomName);
			EOS_RTC_LeaveRoom = (EOS_RTC_LeaveRoomDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_LeaveRoomDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_RemoveNotifyDisconnectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_RemoveNotifyDisconnectedName);
			EOS_RTC_RemoveNotifyDisconnected = (EOS_RTC_RemoveNotifyDisconnectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_RemoveNotifyDisconnectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_RemoveNotifyParticipantStatusChangedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_RemoveNotifyParticipantStatusChangedName);
			EOS_RTC_RemoveNotifyParticipantStatusChanged = (EOS_RTC_RemoveNotifyParticipantStatusChangedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_RemoveNotifyParticipantStatusChangedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_RemoveNotifyRoomStatisticsUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_RemoveNotifyRoomStatisticsUpdatedName);
			EOS_RTC_RemoveNotifyRoomStatisticsUpdated = (EOS_RTC_RemoveNotifyRoomStatisticsUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_RemoveNotifyRoomStatisticsUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_SetRoomSettingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_SetRoomSettingName);
			EOS_RTC_SetRoomSetting = (EOS_RTC_SetRoomSettingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_SetRoomSettingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_RTC_SetSettingName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_RTC_SetSettingName);
			EOS_RTC_SetSetting = (EOS_RTC_SetSettingDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_SetSettingDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Reports_SendPlayerBehaviorReportName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Reports_SendPlayerBehaviorReportName);
			EOS_Reports_SendPlayerBehaviorReport = (EOS_Reports_SendPlayerBehaviorReportDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Reports_SendPlayerBehaviorReportDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sanctions_CopyPlayerSanctionByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sanctions_CopyPlayerSanctionByIndexName);
			EOS_Sanctions_CopyPlayerSanctionByIndex = (EOS_Sanctions_CopyPlayerSanctionByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_CopyPlayerSanctionByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sanctions_CreatePlayerSanctionAppealName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sanctions_CreatePlayerSanctionAppealName);
			EOS_Sanctions_CreatePlayerSanctionAppeal = (EOS_Sanctions_CreatePlayerSanctionAppealDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_CreatePlayerSanctionAppealDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sanctions_GetPlayerSanctionCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sanctions_GetPlayerSanctionCountName);
			EOS_Sanctions_GetPlayerSanctionCount = (EOS_Sanctions_GetPlayerSanctionCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_GetPlayerSanctionCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sanctions_PlayerSanction_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sanctions_PlayerSanction_ReleaseName);
			EOS_Sanctions_PlayerSanction_Release = (EOS_Sanctions_PlayerSanction_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_PlayerSanction_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sanctions_QueryActivePlayerSanctionsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sanctions_QueryActivePlayerSanctionsName);
			EOS_Sanctions_QueryActivePlayerSanctions = (EOS_Sanctions_QueryActivePlayerSanctionsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_QueryActivePlayerSanctionsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_Attribute_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_Attribute_ReleaseName);
			EOS_SessionDetails_Attribute_Release = (EOS_SessionDetails_Attribute_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_Attribute_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_CopyInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_CopyInfoName);
			EOS_SessionDetails_CopyInfo = (EOS_SessionDetails_CopyInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_CopyInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_CopySessionAttributeByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_CopySessionAttributeByIndexName);
			EOS_SessionDetails_CopySessionAttributeByIndex = (EOS_SessionDetails_CopySessionAttributeByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_CopySessionAttributeByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_CopySessionAttributeByKeyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_CopySessionAttributeByKeyName);
			EOS_SessionDetails_CopySessionAttributeByKey = (EOS_SessionDetails_CopySessionAttributeByKeyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_CopySessionAttributeByKeyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_GetSessionAttributeCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_GetSessionAttributeCountName);
			EOS_SessionDetails_GetSessionAttributeCount = (EOS_SessionDetails_GetSessionAttributeCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_GetSessionAttributeCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_Info_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_Info_ReleaseName);
			EOS_SessionDetails_Info_Release = (EOS_SessionDetails_Info_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_Info_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionDetails_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionDetails_ReleaseName);
			EOS_SessionDetails_Release = (EOS_SessionDetails_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_AddAttributeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_AddAttributeName);
			EOS_SessionModification_AddAttribute = (EOS_SessionModification_AddAttributeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_AddAttributeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_ReleaseName);
			EOS_SessionModification_Release = (EOS_SessionModification_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_RemoveAttributeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_RemoveAttributeName);
			EOS_SessionModification_RemoveAttribute = (EOS_SessionModification_RemoveAttributeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_RemoveAttributeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetAllowedPlatformIdsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetAllowedPlatformIdsName);
			EOS_SessionModification_SetAllowedPlatformIds = (EOS_SessionModification_SetAllowedPlatformIdsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetAllowedPlatformIdsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetBucketIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetBucketIdName);
			EOS_SessionModification_SetBucketId = (EOS_SessionModification_SetBucketIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetBucketIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetHostAddressName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetHostAddressName);
			EOS_SessionModification_SetHostAddress = (EOS_SessionModification_SetHostAddressDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetHostAddressDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetInvitesAllowedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetInvitesAllowedName);
			EOS_SessionModification_SetInvitesAllowed = (EOS_SessionModification_SetInvitesAllowedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetInvitesAllowedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetJoinInProgressAllowedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetJoinInProgressAllowedName);
			EOS_SessionModification_SetJoinInProgressAllowed = (EOS_SessionModification_SetJoinInProgressAllowedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetJoinInProgressAllowedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetMaxPlayersName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetMaxPlayersName);
			EOS_SessionModification_SetMaxPlayers = (EOS_SessionModification_SetMaxPlayersDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetMaxPlayersDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionModification_SetPermissionLevelName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionModification_SetPermissionLevelName);
			EOS_SessionModification_SetPermissionLevel = (EOS_SessionModification_SetPermissionLevelDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetPermissionLevelDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_CopySearchResultByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_CopySearchResultByIndexName);
			EOS_SessionSearch_CopySearchResultByIndex = (EOS_SessionSearch_CopySearchResultByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_CopySearchResultByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_FindName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_FindName);
			EOS_SessionSearch_Find = (EOS_SessionSearch_FindDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_FindDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_GetSearchResultCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_GetSearchResultCountName);
			EOS_SessionSearch_GetSearchResultCount = (EOS_SessionSearch_GetSearchResultCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_GetSearchResultCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_ReleaseName);
			EOS_SessionSearch_Release = (EOS_SessionSearch_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_RemoveParameterName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_RemoveParameterName);
			EOS_SessionSearch_RemoveParameter = (EOS_SessionSearch_RemoveParameterDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_RemoveParameterDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_SetMaxResultsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_SetMaxResultsName);
			EOS_SessionSearch_SetMaxResults = (EOS_SessionSearch_SetMaxResultsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetMaxResultsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_SetParameterName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_SetParameterName);
			EOS_SessionSearch_SetParameter = (EOS_SessionSearch_SetParameterDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetParameterDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_SetSessionIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_SetSessionIdName);
			EOS_SessionSearch_SetSessionId = (EOS_SessionSearch_SetSessionIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetSessionIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_SessionSearch_SetTargetUserIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_SessionSearch_SetTargetUserIdName);
			EOS_SessionSearch_SetTargetUserId = (EOS_SessionSearch_SetTargetUserIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetTargetUserIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_AddNotifyJoinSessionAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_AddNotifyJoinSessionAcceptedName);
			EOS_Sessions_AddNotifyJoinSessionAccepted = (EOS_Sessions_AddNotifyJoinSessionAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifyJoinSessionAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_AddNotifyLeaveSessionRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_AddNotifyLeaveSessionRequestedName);
			EOS_Sessions_AddNotifyLeaveSessionRequested = (EOS_Sessions_AddNotifyLeaveSessionRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifyLeaveSessionRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_AddNotifySendSessionNativeInviteRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_AddNotifySendSessionNativeInviteRequestedName);
			EOS_Sessions_AddNotifySendSessionNativeInviteRequested = (EOS_Sessions_AddNotifySendSessionNativeInviteRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifySendSessionNativeInviteRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_AddNotifySessionInviteAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_AddNotifySessionInviteAcceptedName);
			EOS_Sessions_AddNotifySessionInviteAccepted = (EOS_Sessions_AddNotifySessionInviteAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifySessionInviteAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_AddNotifySessionInviteReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_AddNotifySessionInviteReceivedName);
			EOS_Sessions_AddNotifySessionInviteReceived = (EOS_Sessions_AddNotifySessionInviteReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifySessionInviteReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_AddNotifySessionInviteRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_AddNotifySessionInviteRejectedName);
			EOS_Sessions_AddNotifySessionInviteRejected = (EOS_Sessions_AddNotifySessionInviteRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifySessionInviteRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_CopyActiveSessionHandleName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_CopyActiveSessionHandleName);
			EOS_Sessions_CopyActiveSessionHandle = (EOS_Sessions_CopyActiveSessionHandleDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopyActiveSessionHandleDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_CopySessionHandleByInviteIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_CopySessionHandleByInviteIdName);
			EOS_Sessions_CopySessionHandleByInviteId = (EOS_Sessions_CopySessionHandleByInviteIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopySessionHandleByInviteIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_CopySessionHandleByUiEventIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_CopySessionHandleByUiEventIdName);
			EOS_Sessions_CopySessionHandleByUiEventId = (EOS_Sessions_CopySessionHandleByUiEventIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopySessionHandleByUiEventIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_CopySessionHandleForPresenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_CopySessionHandleForPresenceName);
			EOS_Sessions_CopySessionHandleForPresence = (EOS_Sessions_CopySessionHandleForPresenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopySessionHandleForPresenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_CreateSessionModificationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_CreateSessionModificationName);
			EOS_Sessions_CreateSessionModification = (EOS_Sessions_CreateSessionModificationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CreateSessionModificationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_CreateSessionSearchName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_CreateSessionSearchName);
			EOS_Sessions_CreateSessionSearch = (EOS_Sessions_CreateSessionSearchDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CreateSessionSearchDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_DestroySessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_DestroySessionName);
			EOS_Sessions_DestroySession = (EOS_Sessions_DestroySessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_DestroySessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_DumpSessionStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_DumpSessionStateName);
			EOS_Sessions_DumpSessionState = (EOS_Sessions_DumpSessionStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_DumpSessionStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_EndSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_EndSessionName);
			EOS_Sessions_EndSession = (EOS_Sessions_EndSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_EndSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_GetInviteCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_GetInviteCountName);
			EOS_Sessions_GetInviteCount = (EOS_Sessions_GetInviteCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_GetInviteCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_GetInviteIdByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_GetInviteIdByIndexName);
			EOS_Sessions_GetInviteIdByIndex = (EOS_Sessions_GetInviteIdByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_GetInviteIdByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_IsUserInSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_IsUserInSessionName);
			EOS_Sessions_IsUserInSession = (EOS_Sessions_IsUserInSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_IsUserInSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_JoinSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_JoinSessionName);
			EOS_Sessions_JoinSession = (EOS_Sessions_JoinSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_JoinSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_QueryInvitesName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_QueryInvitesName);
			EOS_Sessions_QueryInvites = (EOS_Sessions_QueryInvitesDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_QueryInvitesDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RegisterPlayersName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RegisterPlayersName);
			EOS_Sessions_RegisterPlayers = (EOS_Sessions_RegisterPlayersDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RegisterPlayersDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RejectInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RejectInviteName);
			EOS_Sessions_RejectInvite = (EOS_Sessions_RejectInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RejectInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RemoveNotifyJoinSessionAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RemoveNotifyJoinSessionAcceptedName);
			EOS_Sessions_RemoveNotifyJoinSessionAccepted = (EOS_Sessions_RemoveNotifyJoinSessionAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifyJoinSessionAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RemoveNotifyLeaveSessionRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RemoveNotifyLeaveSessionRequestedName);
			EOS_Sessions_RemoveNotifyLeaveSessionRequested = (EOS_Sessions_RemoveNotifyLeaveSessionRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifyLeaveSessionRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedName);
			EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested = (EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RemoveNotifySessionInviteAcceptedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RemoveNotifySessionInviteAcceptedName);
			EOS_Sessions_RemoveNotifySessionInviteAccepted = (EOS_Sessions_RemoveNotifySessionInviteAcceptedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifySessionInviteAcceptedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RemoveNotifySessionInviteReceivedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RemoveNotifySessionInviteReceivedName);
			EOS_Sessions_RemoveNotifySessionInviteReceived = (EOS_Sessions_RemoveNotifySessionInviteReceivedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifySessionInviteReceivedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_RemoveNotifySessionInviteRejectedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_RemoveNotifySessionInviteRejectedName);
			EOS_Sessions_RemoveNotifySessionInviteRejected = (EOS_Sessions_RemoveNotifySessionInviteRejectedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifySessionInviteRejectedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_SendInviteName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_SendInviteName);
			EOS_Sessions_SendInvite = (EOS_Sessions_SendInviteDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_SendInviteDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_StartSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_StartSessionName);
			EOS_Sessions_StartSession = (EOS_Sessions_StartSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_StartSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_UnregisterPlayersName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_UnregisterPlayersName);
			EOS_Sessions_UnregisterPlayers = (EOS_Sessions_UnregisterPlayersDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_UnregisterPlayersDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_UpdateSessionName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_UpdateSessionName);
			EOS_Sessions_UpdateSession = (EOS_Sessions_UpdateSessionDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_UpdateSessionDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Sessions_UpdateSessionModificationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Sessions_UpdateSessionModificationName);
			EOS_Sessions_UpdateSessionModification = (EOS_Sessions_UpdateSessionModificationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_UpdateSessionModificationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_ShutdownName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_ShutdownName);
			EOS_Shutdown = (EOS_ShutdownDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ShutdownDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Stats_CopyStatByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Stats_CopyStatByIndexName);
			EOS_Stats_CopyStatByIndex = (EOS_Stats_CopyStatByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_CopyStatByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Stats_CopyStatByNameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Stats_CopyStatByNameName);
			EOS_Stats_CopyStatByName = (EOS_Stats_CopyStatByNameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_CopyStatByNameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Stats_GetStatsCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Stats_GetStatsCountName);
			EOS_Stats_GetStatsCount = (EOS_Stats_GetStatsCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_GetStatsCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Stats_IngestStatName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Stats_IngestStatName);
			EOS_Stats_IngestStat = (EOS_Stats_IngestStatDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_IngestStatDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Stats_QueryStatsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Stats_QueryStatsName);
			EOS_Stats_QueryStats = (EOS_Stats_QueryStatsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_QueryStatsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_Stats_Stat_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_Stats_Stat_ReleaseName);
			EOS_Stats_Stat_Release = (EOS_Stats_Stat_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_Stat_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorageFileTransferRequest_CancelRequestName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorageFileTransferRequest_CancelRequestName);
			EOS_TitleStorageFileTransferRequest_CancelRequest = (EOS_TitleStorageFileTransferRequest_CancelRequestDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_CancelRequestDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorageFileTransferRequest_GetFileRequestStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorageFileTransferRequest_GetFileRequestStateName);
			EOS_TitleStorageFileTransferRequest_GetFileRequestState = (EOS_TitleStorageFileTransferRequest_GetFileRequestStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_GetFileRequestStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorageFileTransferRequest_GetFilenameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorageFileTransferRequest_GetFilenameName);
			EOS_TitleStorageFileTransferRequest_GetFilename = (EOS_TitleStorageFileTransferRequest_GetFilenameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_GetFilenameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorageFileTransferRequest_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorageFileTransferRequest_ReleaseName);
			EOS_TitleStorageFileTransferRequest_Release = (EOS_TitleStorageFileTransferRequest_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_CopyFileMetadataAtIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_CopyFileMetadataAtIndexName);
			EOS_TitleStorage_CopyFileMetadataAtIndex = (EOS_TitleStorage_CopyFileMetadataAtIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_CopyFileMetadataAtIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_CopyFileMetadataByFilenameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_CopyFileMetadataByFilenameName);
			EOS_TitleStorage_CopyFileMetadataByFilename = (EOS_TitleStorage_CopyFileMetadataByFilenameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_CopyFileMetadataByFilenameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_DeleteCacheName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_DeleteCacheName);
			EOS_TitleStorage_DeleteCache = (EOS_TitleStorage_DeleteCacheDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_DeleteCacheDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_FileMetadata_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_FileMetadata_ReleaseName);
			EOS_TitleStorage_FileMetadata_Release = (EOS_TitleStorage_FileMetadata_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_FileMetadata_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_GetFileMetadataCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_GetFileMetadataCountName);
			EOS_TitleStorage_GetFileMetadataCount = (EOS_TitleStorage_GetFileMetadataCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_GetFileMetadataCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_QueryFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_QueryFileName);
			EOS_TitleStorage_QueryFile = (EOS_TitleStorage_QueryFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_QueryFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_QueryFileListName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_QueryFileListName);
			EOS_TitleStorage_QueryFileList = (EOS_TitleStorage_QueryFileListDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_QueryFileListDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_TitleStorage_ReadFileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_TitleStorage_ReadFileName);
			EOS_TitleStorage_ReadFile = (EOS_TitleStorage_ReadFileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_ReadFileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_AcknowledgeEventIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_AcknowledgeEventIdName);
			EOS_UI_AcknowledgeEventId = (EOS_UI_AcknowledgeEventIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_AcknowledgeEventIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_AddNotifyDisplaySettingsUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_AddNotifyDisplaySettingsUpdatedName);
			EOS_UI_AddNotifyDisplaySettingsUpdated = (EOS_UI_AddNotifyDisplaySettingsUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_AddNotifyDisplaySettingsUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_AddNotifyMemoryMonitorName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_AddNotifyMemoryMonitorName);
			EOS_UI_AddNotifyMemoryMonitor = (EOS_UI_AddNotifyMemoryMonitorDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_AddNotifyMemoryMonitorDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_GetFriendsExclusiveInputName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_GetFriendsExclusiveInputName);
			EOS_UI_GetFriendsExclusiveInput = (EOS_UI_GetFriendsExclusiveInputDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetFriendsExclusiveInputDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_GetFriendsVisibleName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_GetFriendsVisibleName);
			EOS_UI_GetFriendsVisible = (EOS_UI_GetFriendsVisibleDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetFriendsVisibleDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_GetNotificationLocationPreferenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_GetNotificationLocationPreferenceName);
			EOS_UI_GetNotificationLocationPreference = (EOS_UI_GetNotificationLocationPreferenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetNotificationLocationPreferenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_GetToggleFriendsButtonName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_GetToggleFriendsButtonName);
			EOS_UI_GetToggleFriendsButton = (EOS_UI_GetToggleFriendsButtonDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetToggleFriendsButtonDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_GetToggleFriendsKeyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_GetToggleFriendsKeyName);
			EOS_UI_GetToggleFriendsKey = (EOS_UI_GetToggleFriendsKeyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetToggleFriendsKeyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_HideFriendsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_HideFriendsName);
			EOS_UI_HideFriends = (EOS_UI_HideFriendsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_HideFriendsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_IsSocialOverlayPausedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_IsSocialOverlayPausedName);
			EOS_UI_IsSocialOverlayPaused = (EOS_UI_IsSocialOverlayPausedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_IsSocialOverlayPausedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_IsValidButtonCombinationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_IsValidButtonCombinationName);
			EOS_UI_IsValidButtonCombination = (EOS_UI_IsValidButtonCombinationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_IsValidButtonCombinationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_IsValidKeyCombinationName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_IsValidKeyCombinationName);
			EOS_UI_IsValidKeyCombination = (EOS_UI_IsValidKeyCombinationDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_IsValidKeyCombinationDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_PauseSocialOverlayName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_PauseSocialOverlayName);
			EOS_UI_PauseSocialOverlay = (EOS_UI_PauseSocialOverlayDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_PauseSocialOverlayDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_PrePresentName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_PrePresentName);
			EOS_UI_PrePresent = (EOS_UI_PrePresentDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_PrePresentDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_RemoveNotifyDisplaySettingsUpdatedName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_RemoveNotifyDisplaySettingsUpdatedName);
			EOS_UI_RemoveNotifyDisplaySettingsUpdated = (EOS_UI_RemoveNotifyDisplaySettingsUpdatedDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_RemoveNotifyDisplaySettingsUpdatedDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_RemoveNotifyMemoryMonitorName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_RemoveNotifyMemoryMonitorName);
			EOS_UI_RemoveNotifyMemoryMonitor = (EOS_UI_RemoveNotifyMemoryMonitorDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_RemoveNotifyMemoryMonitorDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_ReportInputStateName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_ReportInputStateName);
			EOS_UI_ReportInputState = (EOS_UI_ReportInputStateDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_ReportInputStateDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_SetDisplayPreferenceName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_SetDisplayPreferenceName);
			EOS_UI_SetDisplayPreference = (EOS_UI_SetDisplayPreferenceDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_SetDisplayPreferenceDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_SetToggleFriendsButtonName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_SetToggleFriendsButtonName);
			EOS_UI_SetToggleFriendsButton = (EOS_UI_SetToggleFriendsButtonDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_SetToggleFriendsButtonDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_SetToggleFriendsKeyName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_SetToggleFriendsKeyName);
			EOS_UI_SetToggleFriendsKey = (EOS_UI_SetToggleFriendsKeyDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_SetToggleFriendsKeyDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_ShowBlockPlayerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_ShowBlockPlayerName);
			EOS_UI_ShowBlockPlayer = (EOS_UI_ShowBlockPlayerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_ShowBlockPlayerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_ShowFriendsName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_ShowFriendsName);
			EOS_UI_ShowFriends = (EOS_UI_ShowFriendsDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_ShowFriendsDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_ShowNativeProfileName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_ShowNativeProfileName);
			EOS_UI_ShowNativeProfile = (EOS_UI_ShowNativeProfileDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_ShowNativeProfileDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UI_ShowReportPlayerName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UI_ShowReportPlayerName);
			EOS_UI_ShowReportPlayer = (EOS_UI_ShowReportPlayerDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_ShowReportPlayerDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_BestDisplayName_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_BestDisplayName_ReleaseName);
			EOS_UserInfo_BestDisplayName_Release = (EOS_UserInfo_BestDisplayName_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_BestDisplayName_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_CopyBestDisplayNameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_CopyBestDisplayNameName);
			EOS_UserInfo_CopyBestDisplayName = (EOS_UserInfo_CopyBestDisplayNameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyBestDisplayNameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_CopyBestDisplayNameWithPlatformName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_CopyBestDisplayNameWithPlatformName);
			EOS_UserInfo_CopyBestDisplayNameWithPlatform = (EOS_UserInfo_CopyBestDisplayNameWithPlatformDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyBestDisplayNameWithPlatformDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_CopyExternalUserInfoByAccountIdName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_CopyExternalUserInfoByAccountIdName);
			EOS_UserInfo_CopyExternalUserInfoByAccountId = (EOS_UserInfo_CopyExternalUserInfoByAccountIdDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyExternalUserInfoByAccountIdDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_CopyExternalUserInfoByAccountTypeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_CopyExternalUserInfoByAccountTypeName);
			EOS_UserInfo_CopyExternalUserInfoByAccountType = (EOS_UserInfo_CopyExternalUserInfoByAccountTypeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyExternalUserInfoByAccountTypeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_CopyExternalUserInfoByIndexName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_CopyExternalUserInfoByIndexName);
			EOS_UserInfo_CopyExternalUserInfoByIndex = (EOS_UserInfo_CopyExternalUserInfoByIndexDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyExternalUserInfoByIndexDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_CopyUserInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_CopyUserInfoName);
			EOS_UserInfo_CopyUserInfo = (EOS_UserInfo_CopyUserInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyUserInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_ExternalUserInfo_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_ExternalUserInfo_ReleaseName);
			EOS_UserInfo_ExternalUserInfo_Release = (EOS_UserInfo_ExternalUserInfo_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_ExternalUserInfo_ReleaseDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_GetExternalUserInfoCountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_GetExternalUserInfoCountName);
			EOS_UserInfo_GetExternalUserInfoCount = (EOS_UserInfo_GetExternalUserInfoCountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_GetExternalUserInfoCountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_GetLocalPlatformTypeName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_GetLocalPlatformTypeName);
			EOS_UserInfo_GetLocalPlatformType = (EOS_UserInfo_GetLocalPlatformTypeDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_GetLocalPlatformTypeDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_QueryUserInfoName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_QueryUserInfoName);
			EOS_UserInfo_QueryUserInfo = (EOS_UserInfo_QueryUserInfoDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_QueryUserInfoDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_QueryUserInfoByDisplayNameName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_QueryUserInfoByDisplayNameName);
			EOS_UserInfo_QueryUserInfoByDisplayName = (EOS_UserInfo_QueryUserInfoByDisplayNameDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_QueryUserInfoByDisplayNameDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_QueryUserInfoByExternalAccountName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_QueryUserInfoByExternalAccountName);
			EOS_UserInfo_QueryUserInfoByExternalAccount = (EOS_UserInfo_QueryUserInfoByExternalAccountDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_QueryUserInfoByExternalAccountDelegate));

			functionPointer = getFunctionPointer(libraryHandle, EOS_UserInfo_ReleaseName);
			if (functionPointer == IntPtr.Zero) throw new DynamicBindingException(EOS_UserInfo_ReleaseName);
			EOS_UserInfo_Release = (EOS_UserInfo_ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_ReleaseDelegate));
		}

		/// <summary>
		/// Unhooks dynamic bindings.
		/// </summary>
		public static void Unhook()
		{
			EOS_Achievements_AddNotifyAchievementsUnlocked = null;
			EOS_Achievements_AddNotifyAchievementsUnlockedV2 = null;
			EOS_Achievements_CopyAchievementDefinitionByAchievementId = null;
			EOS_Achievements_CopyAchievementDefinitionByIndex = null;
			EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId = null;
			EOS_Achievements_CopyAchievementDefinitionV2ByIndex = null;
			EOS_Achievements_CopyPlayerAchievementByAchievementId = null;
			EOS_Achievements_CopyPlayerAchievementByIndex = null;
			EOS_Achievements_CopyUnlockedAchievementByAchievementId = null;
			EOS_Achievements_CopyUnlockedAchievementByIndex = null;
			EOS_Achievements_DefinitionV2_Release = null;
			EOS_Achievements_Definition_Release = null;
			EOS_Achievements_GetAchievementDefinitionCount = null;
			EOS_Achievements_GetPlayerAchievementCount = null;
			EOS_Achievements_GetUnlockedAchievementCount = null;
			EOS_Achievements_PlayerAchievement_Release = null;
			EOS_Achievements_QueryDefinitions = null;
			EOS_Achievements_QueryPlayerAchievements = null;
			EOS_Achievements_RemoveNotifyAchievementsUnlocked = null;
			EOS_Achievements_UnlockAchievements = null;
			EOS_Achievements_UnlockedAchievement_Release = null;
			EOS_ActiveSession_CopyInfo = null;
			EOS_ActiveSession_GetRegisteredPlayerByIndex = null;
			EOS_ActiveSession_GetRegisteredPlayerCount = null;
			EOS_ActiveSession_Info_Release = null;
			EOS_ActiveSession_Release = null;
			EOS_AntiCheatClient_AddExternalIntegrityCatalog = null;
			EOS_AntiCheatClient_AddNotifyClientIntegrityViolated = null;
			EOS_AntiCheatClient_AddNotifyMessageToPeer = null;
			EOS_AntiCheatClient_AddNotifyMessageToServer = null;
			EOS_AntiCheatClient_AddNotifyPeerActionRequired = null;
			EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged = null;
			EOS_AntiCheatClient_BeginSession = null;
			EOS_AntiCheatClient_EndSession = null;
			EOS_AntiCheatClient_GetProtectMessageOutputLength = null;
			EOS_AntiCheatClient_PollStatus = null;
			EOS_AntiCheatClient_ProtectMessage = null;
			EOS_AntiCheatClient_ReceiveMessageFromPeer = null;
			EOS_AntiCheatClient_ReceiveMessageFromServer = null;
			EOS_AntiCheatClient_RegisterPeer = null;
			EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated = null;
			EOS_AntiCheatClient_RemoveNotifyMessageToPeer = null;
			EOS_AntiCheatClient_RemoveNotifyMessageToServer = null;
			EOS_AntiCheatClient_RemoveNotifyPeerActionRequired = null;
			EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged = null;
			EOS_AntiCheatClient_Reserved01 = null;
			EOS_AntiCheatClient_UnprotectMessage = null;
			EOS_AntiCheatClient_UnregisterPeer = null;
			EOS_AntiCheatServer_AddNotifyClientActionRequired = null;
			EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged = null;
			EOS_AntiCheatServer_AddNotifyMessageToClient = null;
			EOS_AntiCheatServer_BeginSession = null;
			EOS_AntiCheatServer_EndSession = null;
			EOS_AntiCheatServer_GetProtectMessageOutputLength = null;
			EOS_AntiCheatServer_LogEvent = null;
			EOS_AntiCheatServer_LogGameRoundEnd = null;
			EOS_AntiCheatServer_LogGameRoundStart = null;
			EOS_AntiCheatServer_LogPlayerDespawn = null;
			EOS_AntiCheatServer_LogPlayerRevive = null;
			EOS_AntiCheatServer_LogPlayerSpawn = null;
			EOS_AntiCheatServer_LogPlayerTakeDamage = null;
			EOS_AntiCheatServer_LogPlayerTick = null;
			EOS_AntiCheatServer_LogPlayerUseAbility = null;
			EOS_AntiCheatServer_LogPlayerUseWeapon = null;
			EOS_AntiCheatServer_ProtectMessage = null;
			EOS_AntiCheatServer_ReceiveMessageFromClient = null;
			EOS_AntiCheatServer_RegisterClient = null;
			EOS_AntiCheatServer_RegisterEvent = null;
			EOS_AntiCheatServer_RemoveNotifyClientActionRequired = null;
			EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged = null;
			EOS_AntiCheatServer_RemoveNotifyMessageToClient = null;
			EOS_AntiCheatServer_SetClientDetails = null;
			EOS_AntiCheatServer_SetClientNetworkState = null;
			EOS_AntiCheatServer_SetGameSessionId = null;
			EOS_AntiCheatServer_UnprotectMessage = null;
			EOS_AntiCheatServer_UnregisterClient = null;
			EOS_Auth_AddNotifyLoginStatusChanged = null;
			EOS_Auth_CopyIdToken = null;
			EOS_Auth_CopyUserAuthToken = null;
			EOS_Auth_DeletePersistentAuth = null;
			EOS_Auth_GetLoggedInAccountByIndex = null;
			EOS_Auth_GetLoggedInAccountsCount = null;
			EOS_Auth_GetLoginStatus = null;
			EOS_Auth_GetMergedAccountByIndex = null;
			EOS_Auth_GetMergedAccountsCount = null;
			EOS_Auth_GetSelectedAccountId = null;
			EOS_Auth_IdToken_Release = null;
			EOS_Auth_LinkAccount = null;
			EOS_Auth_Login = null;
			EOS_Auth_Logout = null;
			EOS_Auth_QueryIdToken = null;
			EOS_Auth_RemoveNotifyLoginStatusChanged = null;
			EOS_Auth_Token_Release = null;
			EOS_Auth_VerifyIdToken = null;
			EOS_Auth_VerifyUserAuth = null;
			EOS_ByteArray_ToString = null;
			EOS_Connect_AddNotifyAuthExpiration = null;
			EOS_Connect_AddNotifyLoginStatusChanged = null;
			EOS_Connect_CopyIdToken = null;
			EOS_Connect_CopyProductUserExternalAccountByAccountId = null;
			EOS_Connect_CopyProductUserExternalAccountByAccountType = null;
			EOS_Connect_CopyProductUserExternalAccountByIndex = null;
			EOS_Connect_CopyProductUserInfo = null;
			EOS_Connect_CreateDeviceId = null;
			EOS_Connect_CreateUser = null;
			EOS_Connect_DeleteDeviceId = null;
			EOS_Connect_ExternalAccountInfo_Release = null;
			EOS_Connect_GetExternalAccountMapping = null;
			EOS_Connect_GetLoggedInUserByIndex = null;
			EOS_Connect_GetLoggedInUsersCount = null;
			EOS_Connect_GetLoginStatus = null;
			EOS_Connect_GetProductUserExternalAccountCount = null;
			EOS_Connect_GetProductUserIdMapping = null;
			EOS_Connect_IdToken_Release = null;
			EOS_Connect_LinkAccount = null;
			EOS_Connect_Login = null;
			EOS_Connect_Logout = null;
			EOS_Connect_QueryExternalAccountMappings = null;
			EOS_Connect_QueryProductUserIdMappings = null;
			EOS_Connect_RemoveNotifyAuthExpiration = null;
			EOS_Connect_RemoveNotifyLoginStatusChanged = null;
			EOS_Connect_TransferDeviceIdAccount = null;
			EOS_Connect_UnlinkAccount = null;
			EOS_Connect_VerifyIdToken = null;
			EOS_ContinuanceToken_ToString = null;
			EOS_CustomInvites_AcceptRequestToJoin = null;
			EOS_CustomInvites_AddNotifyCustomInviteAccepted = null;
			EOS_CustomInvites_AddNotifyCustomInviteReceived = null;
			EOS_CustomInvites_AddNotifyCustomInviteRejected = null;
			EOS_CustomInvites_AddNotifyRequestToJoinAccepted = null;
			EOS_CustomInvites_AddNotifyRequestToJoinReceived = null;
			EOS_CustomInvites_AddNotifyRequestToJoinRejected = null;
			EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived = null;
			EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested = null;
			EOS_CustomInvites_FinalizeInvite = null;
			EOS_CustomInvites_RejectRequestToJoin = null;
			EOS_CustomInvites_RemoveNotifyCustomInviteAccepted = null;
			EOS_CustomInvites_RemoveNotifyCustomInviteReceived = null;
			EOS_CustomInvites_RemoveNotifyCustomInviteRejected = null;
			EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted = null;
			EOS_CustomInvites_RemoveNotifyRequestToJoinReceived = null;
			EOS_CustomInvites_RemoveNotifyRequestToJoinRejected = null;
			EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived = null;
			EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested = null;
			EOS_CustomInvites_SendCustomInvite = null;
			EOS_CustomInvites_SendRequestToJoin = null;
			EOS_CustomInvites_SetCustomInvite = null;
			EOS_EApplicationStatus_ToString = null;
			EOS_ENetworkStatus_ToString = null;
			EOS_EResult_IsOperationComplete = null;
			EOS_EResult_ToString = null;
			EOS_Ecom_CatalogItem_Release = null;
			EOS_Ecom_CatalogOffer_Release = null;
			EOS_Ecom_CatalogRelease_Release = null;
			EOS_Ecom_Checkout = null;
			EOS_Ecom_CopyEntitlementById = null;
			EOS_Ecom_CopyEntitlementByIndex = null;
			EOS_Ecom_CopyEntitlementByNameAndIndex = null;
			EOS_Ecom_CopyItemById = null;
			EOS_Ecom_CopyItemImageInfoByIndex = null;
			EOS_Ecom_CopyItemReleaseByIndex = null;
			EOS_Ecom_CopyLastRedeemedEntitlementByIndex = null;
			EOS_Ecom_CopyOfferById = null;
			EOS_Ecom_CopyOfferByIndex = null;
			EOS_Ecom_CopyOfferImageInfoByIndex = null;
			EOS_Ecom_CopyOfferItemByIndex = null;
			EOS_Ecom_CopyTransactionById = null;
			EOS_Ecom_CopyTransactionByIndex = null;
			EOS_Ecom_Entitlement_Release = null;
			EOS_Ecom_GetEntitlementsByNameCount = null;
			EOS_Ecom_GetEntitlementsCount = null;
			EOS_Ecom_GetItemImageInfoCount = null;
			EOS_Ecom_GetItemReleaseCount = null;
			EOS_Ecom_GetLastRedeemedEntitlementsCount = null;
			EOS_Ecom_GetOfferCount = null;
			EOS_Ecom_GetOfferImageInfoCount = null;
			EOS_Ecom_GetOfferItemCount = null;
			EOS_Ecom_GetTransactionCount = null;
			EOS_Ecom_KeyImageInfo_Release = null;
			EOS_Ecom_QueryEntitlementToken = null;
			EOS_Ecom_QueryEntitlements = null;
			EOS_Ecom_QueryOffers = null;
			EOS_Ecom_QueryOwnership = null;
			EOS_Ecom_QueryOwnershipBySandboxIds = null;
			EOS_Ecom_QueryOwnershipToken = null;
			EOS_Ecom_RedeemEntitlements = null;
			EOS_Ecom_Transaction_CopyEntitlementByIndex = null;
			EOS_Ecom_Transaction_GetEntitlementsCount = null;
			EOS_Ecom_Transaction_GetTransactionId = null;
			EOS_Ecom_Transaction_Release = null;
			EOS_EpicAccountId_FromString = null;
			EOS_EpicAccountId_IsValid = null;
			EOS_EpicAccountId_ToString = null;
			EOS_Friends_AcceptInvite = null;
			EOS_Friends_AddNotifyBlockedUsersUpdate = null;
			EOS_Friends_AddNotifyFriendsUpdate = null;
			EOS_Friends_GetBlockedUserAtIndex = null;
			EOS_Friends_GetBlockedUsersCount = null;
			EOS_Friends_GetFriendAtIndex = null;
			EOS_Friends_GetFriendsCount = null;
			EOS_Friends_GetStatus = null;
			EOS_Friends_QueryFriends = null;
			EOS_Friends_RejectInvite = null;
			EOS_Friends_RemoveNotifyBlockedUsersUpdate = null;
			EOS_Friends_RemoveNotifyFriendsUpdate = null;
			EOS_Friends_SendInvite = null;
			EOS_GetVersion = null;
			EOS_Initialize = null;
			EOS_IntegratedPlatformOptionsContainer_Add = null;
			EOS_IntegratedPlatformOptionsContainer_Release = null;
			EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged = null;
			EOS_IntegratedPlatform_ClearUserPreLogoutCallback = null;
			EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer = null;
			EOS_IntegratedPlatform_FinalizeDeferredUserLogout = null;
			EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged = null;
			EOS_IntegratedPlatform_SetUserLoginStatus = null;
			EOS_IntegratedPlatform_SetUserPreLogoutCallback = null;
			EOS_KWS_AddNotifyPermissionsUpdateReceived = null;
			EOS_KWS_CopyPermissionByIndex = null;
			EOS_KWS_CreateUser = null;
			EOS_KWS_GetPermissionByKey = null;
			EOS_KWS_GetPermissionsCount = null;
			EOS_KWS_PermissionStatus_Release = null;
			EOS_KWS_QueryAgeGate = null;
			EOS_KWS_QueryPermissions = null;
			EOS_KWS_RemoveNotifyPermissionsUpdateReceived = null;
			EOS_KWS_RequestPermissions = null;
			EOS_KWS_UpdateParentEmail = null;
			EOS_Leaderboards_CopyLeaderboardDefinitionByIndex = null;
			EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId = null;
			EOS_Leaderboards_CopyLeaderboardRecordByIndex = null;
			EOS_Leaderboards_CopyLeaderboardRecordByUserId = null;
			EOS_Leaderboards_CopyLeaderboardUserScoreByIndex = null;
			EOS_Leaderboards_CopyLeaderboardUserScoreByUserId = null;
			EOS_Leaderboards_Definition_Release = null;
			EOS_Leaderboards_GetLeaderboardDefinitionCount = null;
			EOS_Leaderboards_GetLeaderboardRecordCount = null;
			EOS_Leaderboards_GetLeaderboardUserScoreCount = null;
			EOS_Leaderboards_LeaderboardRecord_Release = null;
			EOS_Leaderboards_LeaderboardUserScore_Release = null;
			EOS_Leaderboards_QueryLeaderboardDefinitions = null;
			EOS_Leaderboards_QueryLeaderboardRanks = null;
			EOS_Leaderboards_QueryLeaderboardUserScores = null;
			EOS_LobbyDetails_CopyAttributeByIndex = null;
			EOS_LobbyDetails_CopyAttributeByKey = null;
			EOS_LobbyDetails_CopyInfo = null;
			EOS_LobbyDetails_CopyMemberAttributeByIndex = null;
			EOS_LobbyDetails_CopyMemberAttributeByKey = null;
			EOS_LobbyDetails_CopyMemberInfo = null;
			EOS_LobbyDetails_GetAttributeCount = null;
			EOS_LobbyDetails_GetLobbyOwner = null;
			EOS_LobbyDetails_GetMemberAttributeCount = null;
			EOS_LobbyDetails_GetMemberByIndex = null;
			EOS_LobbyDetails_GetMemberCount = null;
			EOS_LobbyDetails_Info_Release = null;
			EOS_LobbyDetails_MemberInfo_Release = null;
			EOS_LobbyDetails_Release = null;
			EOS_LobbyModification_AddAttribute = null;
			EOS_LobbyModification_AddMemberAttribute = null;
			EOS_LobbyModification_Release = null;
			EOS_LobbyModification_RemoveAttribute = null;
			EOS_LobbyModification_RemoveMemberAttribute = null;
			EOS_LobbyModification_SetAllowedPlatformIds = null;
			EOS_LobbyModification_SetBucketId = null;
			EOS_LobbyModification_SetInvitesAllowed = null;
			EOS_LobbyModification_SetMaxMembers = null;
			EOS_LobbyModification_SetPermissionLevel = null;
			EOS_LobbySearch_CopySearchResultByIndex = null;
			EOS_LobbySearch_Find = null;
			EOS_LobbySearch_GetSearchResultCount = null;
			EOS_LobbySearch_Release = null;
			EOS_LobbySearch_RemoveParameter = null;
			EOS_LobbySearch_SetLobbyId = null;
			EOS_LobbySearch_SetMaxResults = null;
			EOS_LobbySearch_SetParameter = null;
			EOS_LobbySearch_SetTargetUserId = null;
			EOS_Lobby_AddNotifyJoinLobbyAccepted = null;
			EOS_Lobby_AddNotifyLeaveLobbyRequested = null;
			EOS_Lobby_AddNotifyLobbyInviteAccepted = null;
			EOS_Lobby_AddNotifyLobbyInviteReceived = null;
			EOS_Lobby_AddNotifyLobbyInviteRejected = null;
			EOS_Lobby_AddNotifyLobbyMemberStatusReceived = null;
			EOS_Lobby_AddNotifyLobbyMemberUpdateReceived = null;
			EOS_Lobby_AddNotifyLobbyUpdateReceived = null;
			EOS_Lobby_AddNotifyRTCRoomConnectionChanged = null;
			EOS_Lobby_AddNotifySendLobbyNativeInviteRequested = null;
			EOS_Lobby_Attribute_Release = null;
			EOS_Lobby_CopyLobbyDetailsHandle = null;
			EOS_Lobby_CopyLobbyDetailsHandleByInviteId = null;
			EOS_Lobby_CopyLobbyDetailsHandleByUiEventId = null;
			EOS_Lobby_CreateLobby = null;
			EOS_Lobby_CreateLobbySearch = null;
			EOS_Lobby_DestroyLobby = null;
			EOS_Lobby_GetConnectString = null;
			EOS_Lobby_GetInviteCount = null;
			EOS_Lobby_GetInviteIdByIndex = null;
			EOS_Lobby_GetRTCRoomName = null;
			EOS_Lobby_HardMuteMember = null;
			EOS_Lobby_IsRTCRoomConnected = null;
			EOS_Lobby_JoinLobby = null;
			EOS_Lobby_JoinLobbyById = null;
			EOS_Lobby_JoinRTCRoom = null;
			EOS_Lobby_KickMember = null;
			EOS_Lobby_LeaveLobby = null;
			EOS_Lobby_LeaveRTCRoom = null;
			EOS_Lobby_ParseConnectString = null;
			EOS_Lobby_PromoteMember = null;
			EOS_Lobby_QueryInvites = null;
			EOS_Lobby_RejectInvite = null;
			EOS_Lobby_RemoveNotifyJoinLobbyAccepted = null;
			EOS_Lobby_RemoveNotifyLeaveLobbyRequested = null;
			EOS_Lobby_RemoveNotifyLobbyInviteAccepted = null;
			EOS_Lobby_RemoveNotifyLobbyInviteReceived = null;
			EOS_Lobby_RemoveNotifyLobbyInviteRejected = null;
			EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived = null;
			EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived = null;
			EOS_Lobby_RemoveNotifyLobbyUpdateReceived = null;
			EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged = null;
			EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested = null;
			EOS_Lobby_SendInvite = null;
			EOS_Lobby_UpdateLobby = null;
			EOS_Lobby_UpdateLobbyModification = null;
			EOS_Logging_SetCallback = null;
			EOS_Logging_SetLogLevel = null;
			EOS_Metrics_BeginPlayerSession = null;
			EOS_Metrics_EndPlayerSession = null;
			EOS_Mods_CopyModInfo = null;
			EOS_Mods_EnumerateMods = null;
			EOS_Mods_InstallMod = null;
			EOS_Mods_ModInfo_Release = null;
			EOS_Mods_UninstallMod = null;
			EOS_Mods_UpdateMod = null;
			EOS_P2P_AcceptConnection = null;
			EOS_P2P_AddNotifyIncomingPacketQueueFull = null;
			EOS_P2P_AddNotifyPeerConnectionClosed = null;
			EOS_P2P_AddNotifyPeerConnectionEstablished = null;
			EOS_P2P_AddNotifyPeerConnectionInterrupted = null;
			EOS_P2P_AddNotifyPeerConnectionRequest = null;
			EOS_P2P_ClearPacketQueue = null;
			EOS_P2P_CloseConnection = null;
			EOS_P2P_CloseConnections = null;
			EOS_P2P_GetNATType = null;
			EOS_P2P_GetNextReceivedPacketSize = null;
			EOS_P2P_GetPacketQueueInfo = null;
			EOS_P2P_GetPortRange = null;
			EOS_P2P_GetRelayControl = null;
			EOS_P2P_QueryNATType = null;
			EOS_P2P_ReceivePacket = null;
			EOS_P2P_RemoveNotifyIncomingPacketQueueFull = null;
			EOS_P2P_RemoveNotifyPeerConnectionClosed = null;
			EOS_P2P_RemoveNotifyPeerConnectionEstablished = null;
			EOS_P2P_RemoveNotifyPeerConnectionInterrupted = null;
			EOS_P2P_RemoveNotifyPeerConnectionRequest = null;
			EOS_P2P_SendPacket = null;
			EOS_P2P_SetPacketQueueSize = null;
			EOS_P2P_SetPortRange = null;
			EOS_P2P_SetRelayControl = null;
			EOS_Platform_CheckForLauncherAndRestart = null;
			EOS_Platform_Create = null;
			EOS_Platform_GetAchievementsInterface = null;
			EOS_Platform_GetActiveCountryCode = null;
			EOS_Platform_GetActiveLocaleCode = null;
			EOS_Platform_GetAntiCheatClientInterface = null;
			EOS_Platform_GetAntiCheatServerInterface = null;
			EOS_Platform_GetApplicationStatus = null;
			EOS_Platform_GetAuthInterface = null;
			EOS_Platform_GetConnectInterface = null;
			EOS_Platform_GetCustomInvitesInterface = null;
			EOS_Platform_GetDesktopCrossplayStatus = null;
			EOS_Platform_GetEcomInterface = null;
			EOS_Platform_GetFriendsInterface = null;
			EOS_Platform_GetIntegratedPlatformInterface = null;
			EOS_Platform_GetKWSInterface = null;
			EOS_Platform_GetLeaderboardsInterface = null;
			EOS_Platform_GetLobbyInterface = null;
			EOS_Platform_GetMetricsInterface = null;
			EOS_Platform_GetModsInterface = null;
			EOS_Platform_GetNetworkStatus = null;
			EOS_Platform_GetOverrideCountryCode = null;
			EOS_Platform_GetOverrideLocaleCode = null;
			EOS_Platform_GetP2PInterface = null;
			EOS_Platform_GetPlayerDataStorageInterface = null;
			EOS_Platform_GetPresenceInterface = null;
			EOS_Platform_GetProgressionSnapshotInterface = null;
			EOS_Platform_GetRTCAdminInterface = null;
			EOS_Platform_GetRTCInterface = null;
			EOS_Platform_GetReportsInterface = null;
			EOS_Platform_GetSanctionsInterface = null;
			EOS_Platform_GetSessionsInterface = null;
			EOS_Platform_GetStatsInterface = null;
			EOS_Platform_GetTitleStorageInterface = null;
			EOS_Platform_GetUIInterface = null;
			EOS_Platform_GetUserInfoInterface = null;
			EOS_Platform_Release = null;
			EOS_Platform_SetApplicationStatus = null;
			EOS_Platform_SetNetworkStatus = null;
			EOS_Platform_SetOverrideCountryCode = null;
			EOS_Platform_SetOverrideLocaleCode = null;
			EOS_Platform_Tick = null;
			EOS_PlayerDataStorageFileTransferRequest_CancelRequest = null;
			EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState = null;
			EOS_PlayerDataStorageFileTransferRequest_GetFilename = null;
			EOS_PlayerDataStorageFileTransferRequest_Release = null;
			EOS_PlayerDataStorage_CopyFileMetadataAtIndex = null;
			EOS_PlayerDataStorage_CopyFileMetadataByFilename = null;
			EOS_PlayerDataStorage_DeleteCache = null;
			EOS_PlayerDataStorage_DeleteFile = null;
			EOS_PlayerDataStorage_DuplicateFile = null;
			EOS_PlayerDataStorage_FileMetadata_Release = null;
			EOS_PlayerDataStorage_GetFileMetadataCount = null;
			EOS_PlayerDataStorage_QueryFile = null;
			EOS_PlayerDataStorage_QueryFileList = null;
			EOS_PlayerDataStorage_ReadFile = null;
			EOS_PlayerDataStorage_WriteFile = null;
			EOS_PresenceModification_DeleteData = null;
			EOS_PresenceModification_Release = null;
			EOS_PresenceModification_SetData = null;
			EOS_PresenceModification_SetJoinInfo = null;
			EOS_PresenceModification_SetRawRichText = null;
			EOS_PresenceModification_SetStatus = null;
			EOS_Presence_AddNotifyJoinGameAccepted = null;
			EOS_Presence_AddNotifyOnPresenceChanged = null;
			EOS_Presence_CopyPresence = null;
			EOS_Presence_CreatePresenceModification = null;
			EOS_Presence_GetJoinInfo = null;
			EOS_Presence_HasPresence = null;
			EOS_Presence_Info_Release = null;
			EOS_Presence_QueryPresence = null;
			EOS_Presence_RemoveNotifyJoinGameAccepted = null;
			EOS_Presence_RemoveNotifyOnPresenceChanged = null;
			EOS_Presence_SetPresence = null;
			EOS_ProductUserId_FromString = null;
			EOS_ProductUserId_IsValid = null;
			EOS_ProductUserId_ToString = null;
			EOS_ProgressionSnapshot_AddProgression = null;
			EOS_ProgressionSnapshot_BeginSnapshot = null;
			EOS_ProgressionSnapshot_DeleteSnapshot = null;
			EOS_ProgressionSnapshot_EndSnapshot = null;
			EOS_ProgressionSnapshot_SubmitSnapshot = null;
			EOS_RTCAdmin_CopyUserTokenByIndex = null;
			EOS_RTCAdmin_CopyUserTokenByUserId = null;
			EOS_RTCAdmin_Kick = null;
			EOS_RTCAdmin_QueryJoinRoomToken = null;
			EOS_RTCAdmin_SetParticipantHardMute = null;
			EOS_RTCAdmin_UserToken_Release = null;
			EOS_RTCAudio_AddNotifyAudioBeforeRender = null;
			EOS_RTCAudio_AddNotifyAudioBeforeSend = null;
			EOS_RTCAudio_AddNotifyAudioDevicesChanged = null;
			EOS_RTCAudio_AddNotifyAudioInputState = null;
			EOS_RTCAudio_AddNotifyAudioOutputState = null;
			EOS_RTCAudio_AddNotifyParticipantUpdated = null;
			EOS_RTCAudio_CopyInputDeviceInformationByIndex = null;
			EOS_RTCAudio_CopyOutputDeviceInformationByIndex = null;
			EOS_RTCAudio_GetAudioInputDeviceByIndex = null;
			EOS_RTCAudio_GetAudioInputDevicesCount = null;
			EOS_RTCAudio_GetAudioOutputDeviceByIndex = null;
			EOS_RTCAudio_GetAudioOutputDevicesCount = null;
			EOS_RTCAudio_GetInputDevicesCount = null;
			EOS_RTCAudio_GetOutputDevicesCount = null;
			EOS_RTCAudio_InputDeviceInformation_Release = null;
			EOS_RTCAudio_OutputDeviceInformation_Release = null;
			EOS_RTCAudio_QueryInputDevicesInformation = null;
			EOS_RTCAudio_QueryOutputDevicesInformation = null;
			EOS_RTCAudio_RegisterPlatformAudioUser = null;
			EOS_RTCAudio_RegisterPlatformUser = null;
			EOS_RTCAudio_RemoveNotifyAudioBeforeRender = null;
			EOS_RTCAudio_RemoveNotifyAudioBeforeSend = null;
			EOS_RTCAudio_RemoveNotifyAudioDevicesChanged = null;
			EOS_RTCAudio_RemoveNotifyAudioInputState = null;
			EOS_RTCAudio_RemoveNotifyAudioOutputState = null;
			EOS_RTCAudio_RemoveNotifyParticipantUpdated = null;
			EOS_RTCAudio_SendAudio = null;
			EOS_RTCAudio_SetAudioInputSettings = null;
			EOS_RTCAudio_SetAudioOutputSettings = null;
			EOS_RTCAudio_SetInputDeviceSettings = null;
			EOS_RTCAudio_SetOutputDeviceSettings = null;
			EOS_RTCAudio_UnregisterPlatformAudioUser = null;
			EOS_RTCAudio_UnregisterPlatformUser = null;
			EOS_RTCAudio_UpdateParticipantVolume = null;
			EOS_RTCAudio_UpdateReceiving = null;
			EOS_RTCAudio_UpdateReceivingVolume = null;
			EOS_RTCAudio_UpdateSending = null;
			EOS_RTCAudio_UpdateSendingVolume = null;
			EOS_RTCData_AddNotifyDataReceived = null;
			EOS_RTCData_AddNotifyParticipantUpdated = null;
			EOS_RTCData_RemoveNotifyDataReceived = null;
			EOS_RTCData_RemoveNotifyParticipantUpdated = null;
			EOS_RTCData_SendData = null;
			EOS_RTCData_UpdateReceiving = null;
			EOS_RTCData_UpdateSending = null;
			EOS_RTC_AddNotifyDisconnected = null;
			EOS_RTC_AddNotifyParticipantStatusChanged = null;
			EOS_RTC_AddNotifyRoomStatisticsUpdated = null;
			EOS_RTC_BlockParticipant = null;
			EOS_RTC_GetAudioInterface = null;
			EOS_RTC_GetDataInterface = null;
			EOS_RTC_JoinRoom = null;
			EOS_RTC_LeaveRoom = null;
			EOS_RTC_RemoveNotifyDisconnected = null;
			EOS_RTC_RemoveNotifyParticipantStatusChanged = null;
			EOS_RTC_RemoveNotifyRoomStatisticsUpdated = null;
			EOS_RTC_SetRoomSetting = null;
			EOS_RTC_SetSetting = null;
			EOS_Reports_SendPlayerBehaviorReport = null;
			EOS_Sanctions_CopyPlayerSanctionByIndex = null;
			EOS_Sanctions_CreatePlayerSanctionAppeal = null;
			EOS_Sanctions_GetPlayerSanctionCount = null;
			EOS_Sanctions_PlayerSanction_Release = null;
			EOS_Sanctions_QueryActivePlayerSanctions = null;
			EOS_SessionDetails_Attribute_Release = null;
			EOS_SessionDetails_CopyInfo = null;
			EOS_SessionDetails_CopySessionAttributeByIndex = null;
			EOS_SessionDetails_CopySessionAttributeByKey = null;
			EOS_SessionDetails_GetSessionAttributeCount = null;
			EOS_SessionDetails_Info_Release = null;
			EOS_SessionDetails_Release = null;
			EOS_SessionModification_AddAttribute = null;
			EOS_SessionModification_Release = null;
			EOS_SessionModification_RemoveAttribute = null;
			EOS_SessionModification_SetAllowedPlatformIds = null;
			EOS_SessionModification_SetBucketId = null;
			EOS_SessionModification_SetHostAddress = null;
			EOS_SessionModification_SetInvitesAllowed = null;
			EOS_SessionModification_SetJoinInProgressAllowed = null;
			EOS_SessionModification_SetMaxPlayers = null;
			EOS_SessionModification_SetPermissionLevel = null;
			EOS_SessionSearch_CopySearchResultByIndex = null;
			EOS_SessionSearch_Find = null;
			EOS_SessionSearch_GetSearchResultCount = null;
			EOS_SessionSearch_Release = null;
			EOS_SessionSearch_RemoveParameter = null;
			EOS_SessionSearch_SetMaxResults = null;
			EOS_SessionSearch_SetParameter = null;
			EOS_SessionSearch_SetSessionId = null;
			EOS_SessionSearch_SetTargetUserId = null;
			EOS_Sessions_AddNotifyJoinSessionAccepted = null;
			EOS_Sessions_AddNotifyLeaveSessionRequested = null;
			EOS_Sessions_AddNotifySendSessionNativeInviteRequested = null;
			EOS_Sessions_AddNotifySessionInviteAccepted = null;
			EOS_Sessions_AddNotifySessionInviteReceived = null;
			EOS_Sessions_AddNotifySessionInviteRejected = null;
			EOS_Sessions_CopyActiveSessionHandle = null;
			EOS_Sessions_CopySessionHandleByInviteId = null;
			EOS_Sessions_CopySessionHandleByUiEventId = null;
			EOS_Sessions_CopySessionHandleForPresence = null;
			EOS_Sessions_CreateSessionModification = null;
			EOS_Sessions_CreateSessionSearch = null;
			EOS_Sessions_DestroySession = null;
			EOS_Sessions_DumpSessionState = null;
			EOS_Sessions_EndSession = null;
			EOS_Sessions_GetInviteCount = null;
			EOS_Sessions_GetInviteIdByIndex = null;
			EOS_Sessions_IsUserInSession = null;
			EOS_Sessions_JoinSession = null;
			EOS_Sessions_QueryInvites = null;
			EOS_Sessions_RegisterPlayers = null;
			EOS_Sessions_RejectInvite = null;
			EOS_Sessions_RemoveNotifyJoinSessionAccepted = null;
			EOS_Sessions_RemoveNotifyLeaveSessionRequested = null;
			EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested = null;
			EOS_Sessions_RemoveNotifySessionInviteAccepted = null;
			EOS_Sessions_RemoveNotifySessionInviteReceived = null;
			EOS_Sessions_RemoveNotifySessionInviteRejected = null;
			EOS_Sessions_SendInvite = null;
			EOS_Sessions_StartSession = null;
			EOS_Sessions_UnregisterPlayers = null;
			EOS_Sessions_UpdateSession = null;
			EOS_Sessions_UpdateSessionModification = null;
			EOS_Shutdown = null;
			EOS_Stats_CopyStatByIndex = null;
			EOS_Stats_CopyStatByName = null;
			EOS_Stats_GetStatsCount = null;
			EOS_Stats_IngestStat = null;
			EOS_Stats_QueryStats = null;
			EOS_Stats_Stat_Release = null;
			EOS_TitleStorageFileTransferRequest_CancelRequest = null;
			EOS_TitleStorageFileTransferRequest_GetFileRequestState = null;
			EOS_TitleStorageFileTransferRequest_GetFilename = null;
			EOS_TitleStorageFileTransferRequest_Release = null;
			EOS_TitleStorage_CopyFileMetadataAtIndex = null;
			EOS_TitleStorage_CopyFileMetadataByFilename = null;
			EOS_TitleStorage_DeleteCache = null;
			EOS_TitleStorage_FileMetadata_Release = null;
			EOS_TitleStorage_GetFileMetadataCount = null;
			EOS_TitleStorage_QueryFile = null;
			EOS_TitleStorage_QueryFileList = null;
			EOS_TitleStorage_ReadFile = null;
			EOS_UI_AcknowledgeEventId = null;
			EOS_UI_AddNotifyDisplaySettingsUpdated = null;
			EOS_UI_AddNotifyMemoryMonitor = null;
			EOS_UI_GetFriendsExclusiveInput = null;
			EOS_UI_GetFriendsVisible = null;
			EOS_UI_GetNotificationLocationPreference = null;
			EOS_UI_GetToggleFriendsButton = null;
			EOS_UI_GetToggleFriendsKey = null;
			EOS_UI_HideFriends = null;
			EOS_UI_IsSocialOverlayPaused = null;
			EOS_UI_IsValidButtonCombination = null;
			EOS_UI_IsValidKeyCombination = null;
			EOS_UI_PauseSocialOverlay = null;
			EOS_UI_PrePresent = null;
			EOS_UI_RemoveNotifyDisplaySettingsUpdated = null;
			EOS_UI_RemoveNotifyMemoryMonitor = null;
			EOS_UI_ReportInputState = null;
			EOS_UI_SetDisplayPreference = null;
			EOS_UI_SetToggleFriendsButton = null;
			EOS_UI_SetToggleFriendsKey = null;
			EOS_UI_ShowBlockPlayer = null;
			EOS_UI_ShowFriends = null;
			EOS_UI_ShowNativeProfile = null;
			EOS_UI_ShowReportPlayer = null;
			EOS_UserInfo_BestDisplayName_Release = null;
			EOS_UserInfo_CopyBestDisplayName = null;
			EOS_UserInfo_CopyBestDisplayNameWithPlatform = null;
			EOS_UserInfo_CopyExternalUserInfoByAccountId = null;
			EOS_UserInfo_CopyExternalUserInfoByAccountType = null;
			EOS_UserInfo_CopyExternalUserInfoByIndex = null;
			EOS_UserInfo_CopyUserInfo = null;
			EOS_UserInfo_ExternalUserInfo_Release = null;
			EOS_UserInfo_GetExternalUserInfoCount = null;
			EOS_UserInfo_GetLocalPlatformType = null;
			EOS_UserInfo_QueryUserInfo = null;
			EOS_UserInfo_QueryUserInfoByDisplayName = null;
			EOS_UserInfo_QueryUserInfoByExternalAccount = null;
			EOS_UserInfo_Release = null;
		}

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Achievements_AddNotifyAchievementsUnlockedDelegate(IntPtr handle, ref Achievements.AddNotifyAchievementsUnlockedOptionsInternal options, IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackInternal notificationFn);
		internal static EOS_Achievements_AddNotifyAchievementsUnlockedDelegate EOS_Achievements_AddNotifyAchievementsUnlocked;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Achievements_AddNotifyAchievementsUnlockedV2Delegate(IntPtr handle, ref Achievements.AddNotifyAchievementsUnlockedV2OptionsInternal options, IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackV2Internal notificationFn);
		internal static EOS_Achievements_AddNotifyAchievementsUnlockedV2Delegate EOS_Achievements_AddNotifyAchievementsUnlockedV2;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionByAchievementIdDelegate(IntPtr handle, ref Achievements.CopyAchievementDefinitionByAchievementIdOptionsInternal options, out IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionByAchievementIdDelegate EOS_Achievements_CopyAchievementDefinitionByAchievementId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionByIndexDelegate(IntPtr handle, ref Achievements.CopyAchievementDefinitionByIndexOptionsInternal options, out IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionByIndexDelegate EOS_Achievements_CopyAchievementDefinitionByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdDelegate(IntPtr handle, ref Achievements.CopyAchievementDefinitionV2ByAchievementIdOptionsInternal options, out IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdDelegate EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionV2ByIndexDelegate(IntPtr handle, ref Achievements.CopyAchievementDefinitionV2ByIndexOptionsInternal options, out IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionV2ByIndexDelegate EOS_Achievements_CopyAchievementDefinitionV2ByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyPlayerAchievementByAchievementIdDelegate(IntPtr handle, ref Achievements.CopyPlayerAchievementByAchievementIdOptionsInternal options, out IntPtr outAchievement);
		internal static EOS_Achievements_CopyPlayerAchievementByAchievementIdDelegate EOS_Achievements_CopyPlayerAchievementByAchievementId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyPlayerAchievementByIndexDelegate(IntPtr handle, ref Achievements.CopyPlayerAchievementByIndexOptionsInternal options, out IntPtr outAchievement);
		internal static EOS_Achievements_CopyPlayerAchievementByIndexDelegate EOS_Achievements_CopyPlayerAchievementByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyUnlockedAchievementByAchievementIdDelegate(IntPtr handle, ref Achievements.CopyUnlockedAchievementByAchievementIdOptionsInternal options, out IntPtr outAchievement);
		internal static EOS_Achievements_CopyUnlockedAchievementByAchievementIdDelegate EOS_Achievements_CopyUnlockedAchievementByAchievementId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Achievements_CopyUnlockedAchievementByIndexDelegate(IntPtr handle, ref Achievements.CopyUnlockedAchievementByIndexOptionsInternal options, out IntPtr outAchievement);
		internal static EOS_Achievements_CopyUnlockedAchievementByIndexDelegate EOS_Achievements_CopyUnlockedAchievementByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_DefinitionV2_ReleaseDelegate(IntPtr achievementDefinition);
		internal static EOS_Achievements_DefinitionV2_ReleaseDelegate EOS_Achievements_DefinitionV2_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_Definition_ReleaseDelegate(IntPtr achievementDefinition);
		internal static EOS_Achievements_Definition_ReleaseDelegate EOS_Achievements_Definition_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Achievements_GetAchievementDefinitionCountDelegate(IntPtr handle, ref Achievements.GetAchievementDefinitionCountOptionsInternal options);
		internal static EOS_Achievements_GetAchievementDefinitionCountDelegate EOS_Achievements_GetAchievementDefinitionCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Achievements_GetPlayerAchievementCountDelegate(IntPtr handle, ref Achievements.GetPlayerAchievementCountOptionsInternal options);
		internal static EOS_Achievements_GetPlayerAchievementCountDelegate EOS_Achievements_GetPlayerAchievementCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Achievements_GetUnlockedAchievementCountDelegate(IntPtr handle, ref Achievements.GetUnlockedAchievementCountOptionsInternal options);
		internal static EOS_Achievements_GetUnlockedAchievementCountDelegate EOS_Achievements_GetUnlockedAchievementCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_PlayerAchievement_ReleaseDelegate(IntPtr achievement);
		internal static EOS_Achievements_PlayerAchievement_ReleaseDelegate EOS_Achievements_PlayerAchievement_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_QueryDefinitionsDelegate(IntPtr handle, ref Achievements.QueryDefinitionsOptionsInternal options, IntPtr clientData, Achievements.OnQueryDefinitionsCompleteCallbackInternal completionDelegate);
		internal static EOS_Achievements_QueryDefinitionsDelegate EOS_Achievements_QueryDefinitions;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_QueryPlayerAchievementsDelegate(IntPtr handle, ref Achievements.QueryPlayerAchievementsOptionsInternal options, IntPtr clientData, Achievements.OnQueryPlayerAchievementsCompleteCallbackInternal completionDelegate);
		internal static EOS_Achievements_QueryPlayerAchievementsDelegate EOS_Achievements_QueryPlayerAchievements;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_RemoveNotifyAchievementsUnlockedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Achievements_RemoveNotifyAchievementsUnlockedDelegate EOS_Achievements_RemoveNotifyAchievementsUnlocked;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_UnlockAchievementsDelegate(IntPtr handle, ref Achievements.UnlockAchievementsOptionsInternal options, IntPtr clientData, Achievements.OnUnlockAchievementsCompleteCallbackInternal completionDelegate);
		internal static EOS_Achievements_UnlockAchievementsDelegate EOS_Achievements_UnlockAchievements;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Achievements_UnlockedAchievement_ReleaseDelegate(IntPtr achievement);
		internal static EOS_Achievements_UnlockedAchievement_ReleaseDelegate EOS_Achievements_UnlockedAchievement_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ActiveSession_CopyInfoDelegate(IntPtr handle, ref Sessions.ActiveSessionCopyInfoOptionsInternal options, out IntPtr outActiveSessionInfo);
		internal static EOS_ActiveSession_CopyInfoDelegate EOS_ActiveSession_CopyInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_ActiveSession_GetRegisteredPlayerByIndexDelegate(IntPtr handle, ref Sessions.ActiveSessionGetRegisteredPlayerByIndexOptionsInternal options);
		internal static EOS_ActiveSession_GetRegisteredPlayerByIndexDelegate EOS_ActiveSession_GetRegisteredPlayerByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_ActiveSession_GetRegisteredPlayerCountDelegate(IntPtr handle, ref Sessions.ActiveSessionGetRegisteredPlayerCountOptionsInternal options);
		internal static EOS_ActiveSession_GetRegisteredPlayerCountDelegate EOS_ActiveSession_GetRegisteredPlayerCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_ActiveSession_Info_ReleaseDelegate(IntPtr activeSessionInfo);
		internal static EOS_ActiveSession_Info_ReleaseDelegate EOS_ActiveSession_Info_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_ActiveSession_ReleaseDelegate(IntPtr activeSessionHandle);
		internal static EOS_ActiveSession_ReleaseDelegate EOS_ActiveSession_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_AddExternalIntegrityCatalogDelegate(IntPtr handle, ref AntiCheatClient.AddExternalIntegrityCatalogOptionsInternal options);
		internal static EOS_AntiCheatClient_AddExternalIntegrityCatalogDelegate EOS_AntiCheatClient_AddExternalIntegrityCatalog;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedDelegate(IntPtr handle, ref AntiCheatClient.AddNotifyClientIntegrityViolatedOptionsInternal options, IntPtr clientData, AntiCheatClient.OnClientIntegrityViolatedCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyClientIntegrityViolatedDelegate EOS_AntiCheatClient_AddNotifyClientIntegrityViolated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyMessageToPeerDelegate(IntPtr handle, ref AntiCheatClient.AddNotifyMessageToPeerOptionsInternal options, IntPtr clientData, AntiCheatClient.OnMessageToPeerCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyMessageToPeerDelegate EOS_AntiCheatClient_AddNotifyMessageToPeer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyMessageToServerDelegate(IntPtr handle, ref AntiCheatClient.AddNotifyMessageToServerOptionsInternal options, IntPtr clientData, AntiCheatClient.OnMessageToServerCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyMessageToServerDelegate EOS_AntiCheatClient_AddNotifyMessageToServer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyPeerActionRequiredDelegate(IntPtr handle, ref AntiCheatClient.AddNotifyPeerActionRequiredOptionsInternal options, IntPtr clientData, AntiCheatClient.OnPeerActionRequiredCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyPeerActionRequiredDelegate EOS_AntiCheatClient_AddNotifyPeerActionRequired;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedDelegate(IntPtr handle, ref AntiCheatClient.AddNotifyPeerAuthStatusChangedOptionsInternal options, IntPtr clientData, AntiCheatClient.OnPeerAuthStatusChangedCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedDelegate EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_BeginSessionDelegate(IntPtr handle, ref AntiCheatClient.BeginSessionOptionsInternal options);
		internal static EOS_AntiCheatClient_BeginSessionDelegate EOS_AntiCheatClient_BeginSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_EndSessionDelegate(IntPtr handle, ref AntiCheatClient.EndSessionOptionsInternal options);
		internal static EOS_AntiCheatClient_EndSessionDelegate EOS_AntiCheatClient_EndSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_GetProtectMessageOutputLengthDelegate(IntPtr handle, ref AntiCheatClient.GetProtectMessageOutputLengthOptionsInternal options, out uint outBufferSizeBytes);
		internal static EOS_AntiCheatClient_GetProtectMessageOutputLengthDelegate EOS_AntiCheatClient_GetProtectMessageOutputLength;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_PollStatusDelegate(IntPtr handle, ref AntiCheatClient.PollStatusOptionsInternal options, out AntiCheatClient.AntiCheatClientViolationType outViolationType, IntPtr outMessage);
		internal static EOS_AntiCheatClient_PollStatusDelegate EOS_AntiCheatClient_PollStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_ProtectMessageDelegate(IntPtr handle, ref AntiCheatClient.ProtectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);
		internal static EOS_AntiCheatClient_ProtectMessageDelegate EOS_AntiCheatClient_ProtectMessage;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_ReceiveMessageFromPeerDelegate(IntPtr handle, ref AntiCheatClient.ReceiveMessageFromPeerOptionsInternal options);
		internal static EOS_AntiCheatClient_ReceiveMessageFromPeerDelegate EOS_AntiCheatClient_ReceiveMessageFromPeer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_ReceiveMessageFromServerDelegate(IntPtr handle, ref AntiCheatClient.ReceiveMessageFromServerOptionsInternal options);
		internal static EOS_AntiCheatClient_ReceiveMessageFromServerDelegate EOS_AntiCheatClient_ReceiveMessageFromServer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_RegisterPeerDelegate(IntPtr handle, ref AntiCheatClient.RegisterPeerOptionsInternal options);
		internal static EOS_AntiCheatClient_RegisterPeerDelegate EOS_AntiCheatClient_RegisterPeer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolatedDelegate EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyMessageToPeerDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyMessageToPeerDelegate EOS_AntiCheatClient_RemoveNotifyMessageToPeer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyMessageToServerDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyMessageToServerDelegate EOS_AntiCheatClient_RemoveNotifyMessageToServer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredDelegate EOS_AntiCheatClient_RemoveNotifyPeerActionRequired;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedDelegate EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_Reserved01Delegate(IntPtr handle, ref AntiCheatClient.Reserved01OptionsInternal options, out int outValue);
		internal static EOS_AntiCheatClient_Reserved01Delegate EOS_AntiCheatClient_Reserved01;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_UnprotectMessageDelegate(IntPtr handle, ref AntiCheatClient.UnprotectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);
		internal static EOS_AntiCheatClient_UnprotectMessageDelegate EOS_AntiCheatClient_UnprotectMessage;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatClient_UnregisterPeerDelegate(IntPtr handle, ref AntiCheatClient.UnregisterPeerOptionsInternal options);
		internal static EOS_AntiCheatClient_UnregisterPeerDelegate EOS_AntiCheatClient_UnregisterPeer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatServer_AddNotifyClientActionRequiredDelegate(IntPtr handle, ref AntiCheatServer.AddNotifyClientActionRequiredOptionsInternal options, IntPtr clientData, AntiCheatServer.OnClientActionRequiredCallbackInternal notificationFn);
		internal static EOS_AntiCheatServer_AddNotifyClientActionRequiredDelegate EOS_AntiCheatServer_AddNotifyClientActionRequired;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedDelegate(IntPtr handle, ref AntiCheatServer.AddNotifyClientAuthStatusChangedOptionsInternal options, IntPtr clientData, AntiCheatServer.OnClientAuthStatusChangedCallbackInternal notificationFn);
		internal static EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedDelegate EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_AntiCheatServer_AddNotifyMessageToClientDelegate(IntPtr handle, ref AntiCheatServer.AddNotifyMessageToClientOptionsInternal options, IntPtr clientData, AntiCheatServer.OnMessageToClientCallbackInternal notificationFn);
		internal static EOS_AntiCheatServer_AddNotifyMessageToClientDelegate EOS_AntiCheatServer_AddNotifyMessageToClient;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_BeginSessionDelegate(IntPtr handle, ref AntiCheatServer.BeginSessionOptionsInternal options);
		internal static EOS_AntiCheatServer_BeginSessionDelegate EOS_AntiCheatServer_BeginSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_EndSessionDelegate(IntPtr handle, ref AntiCheatServer.EndSessionOptionsInternal options);
		internal static EOS_AntiCheatServer_EndSessionDelegate EOS_AntiCheatServer_EndSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_GetProtectMessageOutputLengthDelegate(IntPtr handle, ref AntiCheatServer.GetProtectMessageOutputLengthOptionsInternal options, out uint outBufferSizeBytes);
		internal static EOS_AntiCheatServer_GetProtectMessageOutputLengthDelegate EOS_AntiCheatServer_GetProtectMessageOutputLength;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogEventDelegate(IntPtr handle, ref AntiCheatCommon.LogEventOptionsInternal options);
		internal static EOS_AntiCheatServer_LogEventDelegate EOS_AntiCheatServer_LogEvent;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogGameRoundEndDelegate(IntPtr handle, ref AntiCheatCommon.LogGameRoundEndOptionsInternal options);
		internal static EOS_AntiCheatServer_LogGameRoundEndDelegate EOS_AntiCheatServer_LogGameRoundEnd;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogGameRoundStartDelegate(IntPtr handle, ref AntiCheatCommon.LogGameRoundStartOptionsInternal options);
		internal static EOS_AntiCheatServer_LogGameRoundStartDelegate EOS_AntiCheatServer_LogGameRoundStart;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerDespawnDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerDespawnOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerDespawnDelegate EOS_AntiCheatServer_LogPlayerDespawn;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerReviveDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerReviveOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerReviveDelegate EOS_AntiCheatServer_LogPlayerRevive;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerSpawnDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerSpawnOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerSpawnDelegate EOS_AntiCheatServer_LogPlayerSpawn;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerTakeDamageDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerTakeDamageOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerTakeDamageDelegate EOS_AntiCheatServer_LogPlayerTakeDamage;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerTickDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerTickOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerTickDelegate EOS_AntiCheatServer_LogPlayerTick;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerUseAbilityDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerUseAbilityOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerUseAbilityDelegate EOS_AntiCheatServer_LogPlayerUseAbility;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerUseWeaponDelegate(IntPtr handle, ref AntiCheatCommon.LogPlayerUseWeaponOptionsInternal options);
		internal static EOS_AntiCheatServer_LogPlayerUseWeaponDelegate EOS_AntiCheatServer_LogPlayerUseWeapon;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_ProtectMessageDelegate(IntPtr handle, ref AntiCheatServer.ProtectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);
		internal static EOS_AntiCheatServer_ProtectMessageDelegate EOS_AntiCheatServer_ProtectMessage;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_ReceiveMessageFromClientDelegate(IntPtr handle, ref AntiCheatServer.ReceiveMessageFromClientOptionsInternal options);
		internal static EOS_AntiCheatServer_ReceiveMessageFromClientDelegate EOS_AntiCheatServer_ReceiveMessageFromClient;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_RegisterClientDelegate(IntPtr handle, ref AntiCheatServer.RegisterClientOptionsInternal options);
		internal static EOS_AntiCheatServer_RegisterClientDelegate EOS_AntiCheatServer_RegisterClient;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_RegisterEventDelegate(IntPtr handle, ref AntiCheatCommon.RegisterEventOptionsInternal options);
		internal static EOS_AntiCheatServer_RegisterEventDelegate EOS_AntiCheatServer_RegisterEvent;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatServer_RemoveNotifyClientActionRequiredDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatServer_RemoveNotifyClientActionRequiredDelegate EOS_AntiCheatServer_RemoveNotifyClientActionRequired;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedDelegate EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_AntiCheatServer_RemoveNotifyMessageToClientDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatServer_RemoveNotifyMessageToClientDelegate EOS_AntiCheatServer_RemoveNotifyMessageToClient;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_SetClientDetailsDelegate(IntPtr handle, ref AntiCheatCommon.SetClientDetailsOptionsInternal options);
		internal static EOS_AntiCheatServer_SetClientDetailsDelegate EOS_AntiCheatServer_SetClientDetails;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_SetClientNetworkStateDelegate(IntPtr handle, ref AntiCheatServer.SetClientNetworkStateOptionsInternal options);
		internal static EOS_AntiCheatServer_SetClientNetworkStateDelegate EOS_AntiCheatServer_SetClientNetworkState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_SetGameSessionIdDelegate(IntPtr handle, ref AntiCheatCommon.SetGameSessionIdOptionsInternal options);
		internal static EOS_AntiCheatServer_SetGameSessionIdDelegate EOS_AntiCheatServer_SetGameSessionId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_UnprotectMessageDelegate(IntPtr handle, ref AntiCheatServer.UnprotectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);
		internal static EOS_AntiCheatServer_UnprotectMessageDelegate EOS_AntiCheatServer_UnprotectMessage;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_AntiCheatServer_UnregisterClientDelegate(IntPtr handle, ref AntiCheatServer.UnregisterClientOptionsInternal options);
		internal static EOS_AntiCheatServer_UnregisterClientDelegate EOS_AntiCheatServer_UnregisterClient;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Auth_AddNotifyLoginStatusChangedDelegate(IntPtr handle, ref Auth.AddNotifyLoginStatusChangedOptionsInternal options, IntPtr clientData, Auth.OnLoginStatusChangedCallbackInternal notification);
		internal static EOS_Auth_AddNotifyLoginStatusChangedDelegate EOS_Auth_AddNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Auth_CopyIdTokenDelegate(IntPtr handle, ref Auth.CopyIdTokenOptionsInternal options, out IntPtr outIdToken);
		internal static EOS_Auth_CopyIdTokenDelegate EOS_Auth_CopyIdToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Auth_CopyUserAuthTokenDelegate(IntPtr handle, ref Auth.CopyUserAuthTokenOptionsInternal options, IntPtr localUserId, out IntPtr outUserAuthToken);
		internal static EOS_Auth_CopyUserAuthTokenDelegate EOS_Auth_CopyUserAuthToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_DeletePersistentAuthDelegate(IntPtr handle, ref Auth.DeletePersistentAuthOptionsInternal options, IntPtr clientData, Auth.OnDeletePersistentAuthCallbackInternal completionDelegate);
		internal static EOS_Auth_DeletePersistentAuthDelegate EOS_Auth_DeletePersistentAuth;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Auth_GetLoggedInAccountByIndexDelegate(IntPtr handle, int index);
		internal static EOS_Auth_GetLoggedInAccountByIndexDelegate EOS_Auth_GetLoggedInAccountByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_Auth_GetLoggedInAccountsCountDelegate(IntPtr handle);
		internal static EOS_Auth_GetLoggedInAccountsCountDelegate EOS_Auth_GetLoggedInAccountsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate LoginStatus EOS_Auth_GetLoginStatusDelegate(IntPtr handle, IntPtr localUserId);
		internal static EOS_Auth_GetLoginStatusDelegate EOS_Auth_GetLoginStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Auth_GetMergedAccountByIndexDelegate(IntPtr handle, IntPtr localUserId, uint index);
		internal static EOS_Auth_GetMergedAccountByIndexDelegate EOS_Auth_GetMergedAccountByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Auth_GetMergedAccountsCountDelegate(IntPtr handle, IntPtr localUserId);
		internal static EOS_Auth_GetMergedAccountsCountDelegate EOS_Auth_GetMergedAccountsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Auth_GetSelectedAccountIdDelegate(IntPtr handle, IntPtr localUserId, out IntPtr outSelectedAccountId);
		internal static EOS_Auth_GetSelectedAccountIdDelegate EOS_Auth_GetSelectedAccountId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_IdToken_ReleaseDelegate(IntPtr idToken);
		internal static EOS_Auth_IdToken_ReleaseDelegate EOS_Auth_IdToken_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_LinkAccountDelegate(IntPtr handle, ref Auth.LinkAccountOptionsInternal options, IntPtr clientData, Auth.OnLinkAccountCallbackInternal completionDelegate);
		internal static EOS_Auth_LinkAccountDelegate EOS_Auth_LinkAccount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_LoginDelegate(IntPtr handle, ref Auth.LoginOptionsInternal options, IntPtr clientData, Auth.OnLoginCallbackInternal completionDelegate);
		internal static EOS_Auth_LoginDelegate EOS_Auth_Login;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_LogoutDelegate(IntPtr handle, ref Auth.LogoutOptionsInternal options, IntPtr clientData, Auth.OnLogoutCallbackInternal completionDelegate);
		internal static EOS_Auth_LogoutDelegate EOS_Auth_Logout;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_QueryIdTokenDelegate(IntPtr handle, ref Auth.QueryIdTokenOptionsInternal options, IntPtr clientData, Auth.OnQueryIdTokenCallbackInternal completionDelegate);
		internal static EOS_Auth_QueryIdTokenDelegate EOS_Auth_QueryIdToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_RemoveNotifyLoginStatusChangedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Auth_RemoveNotifyLoginStatusChangedDelegate EOS_Auth_RemoveNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_Token_ReleaseDelegate(IntPtr authToken);
		internal static EOS_Auth_Token_ReleaseDelegate EOS_Auth_Token_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_VerifyIdTokenDelegate(IntPtr handle, ref Auth.VerifyIdTokenOptionsInternal options, IntPtr clientData, Auth.OnVerifyIdTokenCallbackInternal completionDelegate);
		internal static EOS_Auth_VerifyIdTokenDelegate EOS_Auth_VerifyIdToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Auth_VerifyUserAuthDelegate(IntPtr handle, ref Auth.VerifyUserAuthOptionsInternal options, IntPtr clientData, Auth.OnVerifyUserAuthCallbackInternal completionDelegate);
		internal static EOS_Auth_VerifyUserAuthDelegate EOS_Auth_VerifyUserAuth;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ByteArray_ToStringDelegate(IntPtr byteArray, uint length, IntPtr outBuffer, ref uint inOutBufferLength);
		internal static EOS_ByteArray_ToStringDelegate EOS_ByteArray_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Connect_AddNotifyAuthExpirationDelegate(IntPtr handle, ref Connect.AddNotifyAuthExpirationOptionsInternal options, IntPtr clientData, Connect.OnAuthExpirationCallbackInternal notification);
		internal static EOS_Connect_AddNotifyAuthExpirationDelegate EOS_Connect_AddNotifyAuthExpiration;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Connect_AddNotifyLoginStatusChangedDelegate(IntPtr handle, ref Connect.AddNotifyLoginStatusChangedOptionsInternal options, IntPtr clientData, Connect.OnLoginStatusChangedCallbackInternal notification);
		internal static EOS_Connect_AddNotifyLoginStatusChangedDelegate EOS_Connect_AddNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Connect_CopyIdTokenDelegate(IntPtr handle, ref Connect.CopyIdTokenOptionsInternal options, out IntPtr outIdToken);
		internal static EOS_Connect_CopyIdTokenDelegate EOS_Connect_CopyIdToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Connect_CopyProductUserExternalAccountByAccountIdDelegate(IntPtr handle, ref Connect.CopyProductUserExternalAccountByAccountIdOptionsInternal options, out IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserExternalAccountByAccountIdDelegate EOS_Connect_CopyProductUserExternalAccountByAccountId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Connect_CopyProductUserExternalAccountByAccountTypeDelegate(IntPtr handle, ref Connect.CopyProductUserExternalAccountByAccountTypeOptionsInternal options, out IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserExternalAccountByAccountTypeDelegate EOS_Connect_CopyProductUserExternalAccountByAccountType;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Connect_CopyProductUserExternalAccountByIndexDelegate(IntPtr handle, ref Connect.CopyProductUserExternalAccountByIndexOptionsInternal options, out IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserExternalAccountByIndexDelegate EOS_Connect_CopyProductUserExternalAccountByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Connect_CopyProductUserInfoDelegate(IntPtr handle, ref Connect.CopyProductUserInfoOptionsInternal options, out IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserInfoDelegate EOS_Connect_CopyProductUserInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_CreateDeviceIdDelegate(IntPtr handle, ref Connect.CreateDeviceIdOptionsInternal options, IntPtr clientData, Connect.OnCreateDeviceIdCallbackInternal completionDelegate);
		internal static EOS_Connect_CreateDeviceIdDelegate EOS_Connect_CreateDeviceId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_CreateUserDelegate(IntPtr handle, ref Connect.CreateUserOptionsInternal options, IntPtr clientData, Connect.OnCreateUserCallbackInternal completionDelegate);
		internal static EOS_Connect_CreateUserDelegate EOS_Connect_CreateUser;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_DeleteDeviceIdDelegate(IntPtr handle, ref Connect.DeleteDeviceIdOptionsInternal options, IntPtr clientData, Connect.OnDeleteDeviceIdCallbackInternal completionDelegate);
		internal static EOS_Connect_DeleteDeviceIdDelegate EOS_Connect_DeleteDeviceId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_ExternalAccountInfo_ReleaseDelegate(IntPtr externalAccountInfo);
		internal static EOS_Connect_ExternalAccountInfo_ReleaseDelegate EOS_Connect_ExternalAccountInfo_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Connect_GetExternalAccountMappingDelegate(IntPtr handle, ref Connect.GetExternalAccountMappingsOptionsInternal options);
		internal static EOS_Connect_GetExternalAccountMappingDelegate EOS_Connect_GetExternalAccountMapping;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Connect_GetLoggedInUserByIndexDelegate(IntPtr handle, int index);
		internal static EOS_Connect_GetLoggedInUserByIndexDelegate EOS_Connect_GetLoggedInUserByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_Connect_GetLoggedInUsersCountDelegate(IntPtr handle);
		internal static EOS_Connect_GetLoggedInUsersCountDelegate EOS_Connect_GetLoggedInUsersCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate LoginStatus EOS_Connect_GetLoginStatusDelegate(IntPtr handle, IntPtr localUserId);
		internal static EOS_Connect_GetLoginStatusDelegate EOS_Connect_GetLoginStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Connect_GetProductUserExternalAccountCountDelegate(IntPtr handle, ref Connect.GetProductUserExternalAccountCountOptionsInternal options);
		internal static EOS_Connect_GetProductUserExternalAccountCountDelegate EOS_Connect_GetProductUserExternalAccountCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Connect_GetProductUserIdMappingDelegate(IntPtr handle, ref Connect.GetProductUserIdMappingOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Connect_GetProductUserIdMappingDelegate EOS_Connect_GetProductUserIdMapping;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_IdToken_ReleaseDelegate(IntPtr idToken);
		internal static EOS_Connect_IdToken_ReleaseDelegate EOS_Connect_IdToken_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_LinkAccountDelegate(IntPtr handle, ref Connect.LinkAccountOptionsInternal options, IntPtr clientData, Connect.OnLinkAccountCallbackInternal completionDelegate);
		internal static EOS_Connect_LinkAccountDelegate EOS_Connect_LinkAccount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_LoginDelegate(IntPtr handle, ref Connect.LoginOptionsInternal options, IntPtr clientData, Connect.OnLoginCallbackInternal completionDelegate);
		internal static EOS_Connect_LoginDelegate EOS_Connect_Login;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_LogoutDelegate(IntPtr handle, ref Connect.LogoutOptionsInternal options, IntPtr clientData, Connect.OnLogoutCallbackInternal completionDelegate);
		internal static EOS_Connect_LogoutDelegate EOS_Connect_Logout;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_QueryExternalAccountMappingsDelegate(IntPtr handle, ref Connect.QueryExternalAccountMappingsOptionsInternal options, IntPtr clientData, Connect.OnQueryExternalAccountMappingsCallbackInternal completionDelegate);
		internal static EOS_Connect_QueryExternalAccountMappingsDelegate EOS_Connect_QueryExternalAccountMappings;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_QueryProductUserIdMappingsDelegate(IntPtr handle, ref Connect.QueryProductUserIdMappingsOptionsInternal options, IntPtr clientData, Connect.OnQueryProductUserIdMappingsCallbackInternal completionDelegate);
		internal static EOS_Connect_QueryProductUserIdMappingsDelegate EOS_Connect_QueryProductUserIdMappings;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_RemoveNotifyAuthExpirationDelegate(IntPtr handle, ulong inId);
		internal static EOS_Connect_RemoveNotifyAuthExpirationDelegate EOS_Connect_RemoveNotifyAuthExpiration;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_RemoveNotifyLoginStatusChangedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Connect_RemoveNotifyLoginStatusChangedDelegate EOS_Connect_RemoveNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_TransferDeviceIdAccountDelegate(IntPtr handle, ref Connect.TransferDeviceIdAccountOptionsInternal options, IntPtr clientData, Connect.OnTransferDeviceIdAccountCallbackInternal completionDelegate);
		internal static EOS_Connect_TransferDeviceIdAccountDelegate EOS_Connect_TransferDeviceIdAccount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_UnlinkAccountDelegate(IntPtr handle, ref Connect.UnlinkAccountOptionsInternal options, IntPtr clientData, Connect.OnUnlinkAccountCallbackInternal completionDelegate);
		internal static EOS_Connect_UnlinkAccountDelegate EOS_Connect_UnlinkAccount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Connect_VerifyIdTokenDelegate(IntPtr handle, ref Connect.VerifyIdTokenOptionsInternal options, IntPtr clientData, Connect.OnVerifyIdTokenCallbackInternal completionDelegate);
		internal static EOS_Connect_VerifyIdTokenDelegate EOS_Connect_VerifyIdToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ContinuanceToken_ToStringDelegate(IntPtr continuanceToken, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_ContinuanceToken_ToStringDelegate EOS_ContinuanceToken_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_AcceptRequestToJoinDelegate(IntPtr handle, ref CustomInvites.AcceptRequestToJoinOptionsInternal options, IntPtr clientData, CustomInvites.OnAcceptRequestToJoinCallbackInternal completionDelegate);
		internal static EOS_CustomInvites_AcceptRequestToJoinDelegate EOS_CustomInvites_AcceptRequestToJoin;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyCustomInviteAcceptedDelegate(IntPtr handle, ref CustomInvites.AddNotifyCustomInviteAcceptedOptionsInternal options, IntPtr clientData, CustomInvites.OnCustomInviteAcceptedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyCustomInviteAcceptedDelegate EOS_CustomInvites_AddNotifyCustomInviteAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyCustomInviteReceivedDelegate(IntPtr handle, ref CustomInvites.AddNotifyCustomInviteReceivedOptionsInternal options, IntPtr clientData, CustomInvites.OnCustomInviteReceivedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyCustomInviteReceivedDelegate EOS_CustomInvites_AddNotifyCustomInviteReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyCustomInviteRejectedDelegate(IntPtr handle, ref CustomInvites.AddNotifyCustomInviteRejectedOptionsInternal options, IntPtr clientData, CustomInvites.OnCustomInviteRejectedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyCustomInviteRejectedDelegate EOS_CustomInvites_AddNotifyCustomInviteRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyRequestToJoinAcceptedDelegate(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinAcceptedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinAcceptedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyRequestToJoinAcceptedDelegate EOS_CustomInvites_AddNotifyRequestToJoinAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyRequestToJoinReceivedDelegate(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinReceivedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinReceivedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyRequestToJoinReceivedDelegate EOS_CustomInvites_AddNotifyRequestToJoinReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyRequestToJoinRejectedDelegate(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinRejectedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinRejectedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyRequestToJoinRejectedDelegate EOS_CustomInvites_AddNotifyRequestToJoinRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedDelegate(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinResponseReceivedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinResponseReceivedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifyRequestToJoinResponseReceivedDelegate EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedDelegate(IntPtr handle, ref CustomInvites.AddNotifySendCustomNativeInviteRequestedOptionsInternal options, IntPtr clientData, CustomInvites.OnSendCustomNativeInviteRequestedCallbackInternal notificationFn);
		internal static EOS_CustomInvites_AddNotifySendCustomNativeInviteRequestedDelegate EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_CustomInvites_FinalizeInviteDelegate(IntPtr handle, ref CustomInvites.FinalizeInviteOptionsInternal options);
		internal static EOS_CustomInvites_FinalizeInviteDelegate EOS_CustomInvites_FinalizeInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RejectRequestToJoinDelegate(IntPtr handle, ref CustomInvites.RejectRequestToJoinOptionsInternal options, IntPtr clientData, CustomInvites.OnRejectRequestToJoinCallbackInternal completionDelegate);
		internal static EOS_CustomInvites_RejectRequestToJoinDelegate EOS_CustomInvites_RejectRequestToJoin;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyCustomInviteAcceptedDelegate EOS_CustomInvites_RemoveNotifyCustomInviteAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyCustomInviteReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyCustomInviteReceivedDelegate EOS_CustomInvites_RemoveNotifyCustomInviteReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyCustomInviteRejectedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyCustomInviteRejectedDelegate EOS_CustomInvites_RemoveNotifyCustomInviteRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyRequestToJoinAcceptedDelegate EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyRequestToJoinReceivedDelegate EOS_CustomInvites_RemoveNotifyRequestToJoinReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyRequestToJoinRejectedDelegate EOS_CustomInvites_RemoveNotifyRequestToJoinRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceivedDelegate EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedDelegate(IntPtr handle, ulong inId);
		internal static EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequestedDelegate EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_SendCustomInviteDelegate(IntPtr handle, ref CustomInvites.SendCustomInviteOptionsInternal options, IntPtr clientData, CustomInvites.OnSendCustomInviteCallbackInternal completionDelegate);
		internal static EOS_CustomInvites_SendCustomInviteDelegate EOS_CustomInvites_SendCustomInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_CustomInvites_SendRequestToJoinDelegate(IntPtr handle, ref CustomInvites.SendRequestToJoinOptionsInternal options, IntPtr clientData, CustomInvites.OnSendRequestToJoinCallbackInternal completionDelegate);
		internal static EOS_CustomInvites_SendRequestToJoinDelegate EOS_CustomInvites_SendRequestToJoin;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_CustomInvites_SetCustomInviteDelegate(IntPtr handle, ref CustomInvites.SetCustomInviteOptionsInternal options);
		internal static EOS_CustomInvites_SetCustomInviteDelegate EOS_CustomInvites_SetCustomInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_EApplicationStatus_ToStringDelegate(Platform.ApplicationStatus applicationStatus);
		internal static EOS_EApplicationStatus_ToStringDelegate EOS_EApplicationStatus_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_ENetworkStatus_ToStringDelegate(Platform.NetworkStatus networkStatus);
		internal static EOS_ENetworkStatus_ToStringDelegate EOS_ENetworkStatus_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_EResult_IsOperationCompleteDelegate(Result result);
		internal static EOS_EResult_IsOperationCompleteDelegate EOS_EResult_IsOperationComplete;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_EResult_ToStringDelegate(Result result);
		internal static EOS_EResult_ToStringDelegate EOS_EResult_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_CatalogItem_ReleaseDelegate(IntPtr catalogItem);
		internal static EOS_Ecom_CatalogItem_ReleaseDelegate EOS_Ecom_CatalogItem_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_CatalogOffer_ReleaseDelegate(IntPtr catalogOffer);
		internal static EOS_Ecom_CatalogOffer_ReleaseDelegate EOS_Ecom_CatalogOffer_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_CatalogRelease_ReleaseDelegate(IntPtr catalogRelease);
		internal static EOS_Ecom_CatalogRelease_ReleaseDelegate EOS_Ecom_CatalogRelease_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_CheckoutDelegate(IntPtr handle, ref Ecom.CheckoutOptionsInternal options, IntPtr clientData, Ecom.OnCheckoutCallbackInternal completionDelegate);
		internal static EOS_Ecom_CheckoutDelegate EOS_Ecom_Checkout;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyEntitlementByIdDelegate(IntPtr handle, ref Ecom.CopyEntitlementByIdOptionsInternal options, out IntPtr outEntitlement);
		internal static EOS_Ecom_CopyEntitlementByIdDelegate EOS_Ecom_CopyEntitlementById;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyEntitlementByIndexDelegate(IntPtr handle, ref Ecom.CopyEntitlementByIndexOptionsInternal options, out IntPtr outEntitlement);
		internal static EOS_Ecom_CopyEntitlementByIndexDelegate EOS_Ecom_CopyEntitlementByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyEntitlementByNameAndIndexDelegate(IntPtr handle, ref Ecom.CopyEntitlementByNameAndIndexOptionsInternal options, out IntPtr outEntitlement);
		internal static EOS_Ecom_CopyEntitlementByNameAndIndexDelegate EOS_Ecom_CopyEntitlementByNameAndIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyItemByIdDelegate(IntPtr handle, ref Ecom.CopyItemByIdOptionsInternal options, out IntPtr outItem);
		internal static EOS_Ecom_CopyItemByIdDelegate EOS_Ecom_CopyItemById;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyItemImageInfoByIndexDelegate(IntPtr handle, ref Ecom.CopyItemImageInfoByIndexOptionsInternal options, out IntPtr outImageInfo);
		internal static EOS_Ecom_CopyItemImageInfoByIndexDelegate EOS_Ecom_CopyItemImageInfoByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyItemReleaseByIndexDelegate(IntPtr handle, ref Ecom.CopyItemReleaseByIndexOptionsInternal options, out IntPtr outRelease);
		internal static EOS_Ecom_CopyItemReleaseByIndexDelegate EOS_Ecom_CopyItemReleaseByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyLastRedeemedEntitlementByIndexDelegate(IntPtr handle, ref Ecom.CopyLastRedeemedEntitlementByIndexOptionsInternal options, IntPtr outRedeemedEntitlementId, ref int inOutRedeemedEntitlementIdLength);
		internal static EOS_Ecom_CopyLastRedeemedEntitlementByIndexDelegate EOS_Ecom_CopyLastRedeemedEntitlementByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyOfferByIdDelegate(IntPtr handle, ref Ecom.CopyOfferByIdOptionsInternal options, out IntPtr outOffer);
		internal static EOS_Ecom_CopyOfferByIdDelegate EOS_Ecom_CopyOfferById;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyOfferByIndexDelegate(IntPtr handle, ref Ecom.CopyOfferByIndexOptionsInternal options, out IntPtr outOffer);
		internal static EOS_Ecom_CopyOfferByIndexDelegate EOS_Ecom_CopyOfferByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyOfferImageInfoByIndexDelegate(IntPtr handle, ref Ecom.CopyOfferImageInfoByIndexOptionsInternal options, out IntPtr outImageInfo);
		internal static EOS_Ecom_CopyOfferImageInfoByIndexDelegate EOS_Ecom_CopyOfferImageInfoByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyOfferItemByIndexDelegate(IntPtr handle, ref Ecom.CopyOfferItemByIndexOptionsInternal options, out IntPtr outItem);
		internal static EOS_Ecom_CopyOfferItemByIndexDelegate EOS_Ecom_CopyOfferItemByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyTransactionByIdDelegate(IntPtr handle, ref Ecom.CopyTransactionByIdOptionsInternal options, out IntPtr outTransaction);
		internal static EOS_Ecom_CopyTransactionByIdDelegate EOS_Ecom_CopyTransactionById;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_CopyTransactionByIndexDelegate(IntPtr handle, ref Ecom.CopyTransactionByIndexOptionsInternal options, out IntPtr outTransaction);
		internal static EOS_Ecom_CopyTransactionByIndexDelegate EOS_Ecom_CopyTransactionByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_Entitlement_ReleaseDelegate(IntPtr entitlement);
		internal static EOS_Ecom_Entitlement_ReleaseDelegate EOS_Ecom_Entitlement_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetEntitlementsByNameCountDelegate(IntPtr handle, ref Ecom.GetEntitlementsByNameCountOptionsInternal options);
		internal static EOS_Ecom_GetEntitlementsByNameCountDelegate EOS_Ecom_GetEntitlementsByNameCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetEntitlementsCountDelegate(IntPtr handle, ref Ecom.GetEntitlementsCountOptionsInternal options);
		internal static EOS_Ecom_GetEntitlementsCountDelegate EOS_Ecom_GetEntitlementsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetItemImageInfoCountDelegate(IntPtr handle, ref Ecom.GetItemImageInfoCountOptionsInternal options);
		internal static EOS_Ecom_GetItemImageInfoCountDelegate EOS_Ecom_GetItemImageInfoCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetItemReleaseCountDelegate(IntPtr handle, ref Ecom.GetItemReleaseCountOptionsInternal options);
		internal static EOS_Ecom_GetItemReleaseCountDelegate EOS_Ecom_GetItemReleaseCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetLastRedeemedEntitlementsCountDelegate(IntPtr handle, ref Ecom.GetLastRedeemedEntitlementsCountOptionsInternal options);
		internal static EOS_Ecom_GetLastRedeemedEntitlementsCountDelegate EOS_Ecom_GetLastRedeemedEntitlementsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetOfferCountDelegate(IntPtr handle, ref Ecom.GetOfferCountOptionsInternal options);
		internal static EOS_Ecom_GetOfferCountDelegate EOS_Ecom_GetOfferCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetOfferImageInfoCountDelegate(IntPtr handle, ref Ecom.GetOfferImageInfoCountOptionsInternal options);
		internal static EOS_Ecom_GetOfferImageInfoCountDelegate EOS_Ecom_GetOfferImageInfoCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetOfferItemCountDelegate(IntPtr handle, ref Ecom.GetOfferItemCountOptionsInternal options);
		internal static EOS_Ecom_GetOfferItemCountDelegate EOS_Ecom_GetOfferItemCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_GetTransactionCountDelegate(IntPtr handle, ref Ecom.GetTransactionCountOptionsInternal options);
		internal static EOS_Ecom_GetTransactionCountDelegate EOS_Ecom_GetTransactionCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_KeyImageInfo_ReleaseDelegate(IntPtr keyImageInfo);
		internal static EOS_Ecom_KeyImageInfo_ReleaseDelegate EOS_Ecom_KeyImageInfo_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_QueryEntitlementTokenDelegate(IntPtr handle, ref Ecom.QueryEntitlementTokenOptionsInternal options, IntPtr clientData, Ecom.OnQueryEntitlementTokenCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryEntitlementTokenDelegate EOS_Ecom_QueryEntitlementToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_QueryEntitlementsDelegate(IntPtr handle, ref Ecom.QueryEntitlementsOptionsInternal options, IntPtr clientData, Ecom.OnQueryEntitlementsCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryEntitlementsDelegate EOS_Ecom_QueryEntitlements;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_QueryOffersDelegate(IntPtr handle, ref Ecom.QueryOffersOptionsInternal options, IntPtr clientData, Ecom.OnQueryOffersCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOffersDelegate EOS_Ecom_QueryOffers;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_QueryOwnershipDelegate(IntPtr handle, ref Ecom.QueryOwnershipOptionsInternal options, IntPtr clientData, Ecom.OnQueryOwnershipCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOwnershipDelegate EOS_Ecom_QueryOwnership;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_QueryOwnershipBySandboxIdsDelegate(IntPtr handle, ref Ecom.QueryOwnershipBySandboxIdsOptionsInternal options, IntPtr clientData, Ecom.OnQueryOwnershipBySandboxIdsCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOwnershipBySandboxIdsDelegate EOS_Ecom_QueryOwnershipBySandboxIds;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_QueryOwnershipTokenDelegate(IntPtr handle, ref Ecom.QueryOwnershipTokenOptionsInternal options, IntPtr clientData, Ecom.OnQueryOwnershipTokenCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOwnershipTokenDelegate EOS_Ecom_QueryOwnershipToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_RedeemEntitlementsDelegate(IntPtr handle, ref Ecom.RedeemEntitlementsOptionsInternal options, IntPtr clientData, Ecom.OnRedeemEntitlementsCallbackInternal completionDelegate);
		internal static EOS_Ecom_RedeemEntitlementsDelegate EOS_Ecom_RedeemEntitlements;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_Transaction_CopyEntitlementByIndexDelegate(IntPtr handle, ref Ecom.TransactionCopyEntitlementByIndexOptionsInternal options, out IntPtr outEntitlement);
		internal static EOS_Ecom_Transaction_CopyEntitlementByIndexDelegate EOS_Ecom_Transaction_CopyEntitlementByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Ecom_Transaction_GetEntitlementsCountDelegate(IntPtr handle, ref Ecom.TransactionGetEntitlementsCountOptionsInternal options);
		internal static EOS_Ecom_Transaction_GetEntitlementsCountDelegate EOS_Ecom_Transaction_GetEntitlementsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Ecom_Transaction_GetTransactionIdDelegate(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Ecom_Transaction_GetTransactionIdDelegate EOS_Ecom_Transaction_GetTransactionId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Ecom_Transaction_ReleaseDelegate(IntPtr transaction);
		internal static EOS_Ecom_Transaction_ReleaseDelegate EOS_Ecom_Transaction_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_EpicAccountId_FromStringDelegate(IntPtr accountIdString);
		internal static EOS_EpicAccountId_FromStringDelegate EOS_EpicAccountId_FromString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_EpicAccountId_IsValidDelegate(IntPtr accountId);
		internal static EOS_EpicAccountId_IsValidDelegate EOS_EpicAccountId_IsValid;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_EpicAccountId_ToStringDelegate(IntPtr accountId, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_EpicAccountId_ToStringDelegate EOS_EpicAccountId_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Friends_AcceptInviteDelegate(IntPtr handle, ref Friends.AcceptInviteOptionsInternal options, IntPtr clientData, Friends.OnAcceptInviteCallbackInternal completionDelegate);
		internal static EOS_Friends_AcceptInviteDelegate EOS_Friends_AcceptInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Friends_AddNotifyBlockedUsersUpdateDelegate(IntPtr handle, ref Friends.AddNotifyBlockedUsersUpdateOptionsInternal options, IntPtr clientData, Friends.OnBlockedUsersUpdateCallbackInternal blockedUsersUpdateHandler);
		internal static EOS_Friends_AddNotifyBlockedUsersUpdateDelegate EOS_Friends_AddNotifyBlockedUsersUpdate;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Friends_AddNotifyFriendsUpdateDelegate(IntPtr handle, ref Friends.AddNotifyFriendsUpdateOptionsInternal options, IntPtr clientData, Friends.OnFriendsUpdateCallbackInternal friendsUpdateHandler);
		internal static EOS_Friends_AddNotifyFriendsUpdateDelegate EOS_Friends_AddNotifyFriendsUpdate;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Friends_GetBlockedUserAtIndexDelegate(IntPtr handle, ref Friends.GetBlockedUserAtIndexOptionsInternal options);
		internal static EOS_Friends_GetBlockedUserAtIndexDelegate EOS_Friends_GetBlockedUserAtIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_Friends_GetBlockedUsersCountDelegate(IntPtr handle, ref Friends.GetBlockedUsersCountOptionsInternal options);
		internal static EOS_Friends_GetBlockedUsersCountDelegate EOS_Friends_GetBlockedUsersCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Friends_GetFriendAtIndexDelegate(IntPtr handle, ref Friends.GetFriendAtIndexOptionsInternal options);
		internal static EOS_Friends_GetFriendAtIndexDelegate EOS_Friends_GetFriendAtIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_Friends_GetFriendsCountDelegate(IntPtr handle, ref Friends.GetFriendsCountOptionsInternal options);
		internal static EOS_Friends_GetFriendsCountDelegate EOS_Friends_GetFriendsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Friends.FriendsStatus EOS_Friends_GetStatusDelegate(IntPtr handle, ref Friends.GetStatusOptionsInternal options);
		internal static EOS_Friends_GetStatusDelegate EOS_Friends_GetStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Friends_QueryFriendsDelegate(IntPtr handle, ref Friends.QueryFriendsOptionsInternal options, IntPtr clientData, Friends.OnQueryFriendsCallbackInternal completionDelegate);
		internal static EOS_Friends_QueryFriendsDelegate EOS_Friends_QueryFriends;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Friends_RejectInviteDelegate(IntPtr handle, ref Friends.RejectInviteOptionsInternal options, IntPtr clientData, Friends.OnRejectInviteCallbackInternal completionDelegate);
		internal static EOS_Friends_RejectInviteDelegate EOS_Friends_RejectInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Friends_RemoveNotifyBlockedUsersUpdateDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_Friends_RemoveNotifyBlockedUsersUpdateDelegate EOS_Friends_RemoveNotifyBlockedUsersUpdate;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Friends_RemoveNotifyFriendsUpdateDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_Friends_RemoveNotifyFriendsUpdateDelegate EOS_Friends_RemoveNotifyFriendsUpdate;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Friends_SendInviteDelegate(IntPtr handle, ref Friends.SendInviteOptionsInternal options, IntPtr clientData, Friends.OnSendInviteCallbackInternal completionDelegate);
		internal static EOS_Friends_SendInviteDelegate EOS_Friends_SendInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_GetVersionDelegate();
		internal static EOS_GetVersionDelegate EOS_GetVersion;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_InitializeDelegate(ref Platform.InitializeOptionsInternal options);
		internal static EOS_InitializeDelegate EOS_Initialize;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_IntegratedPlatformOptionsContainer_AddDelegate(IntPtr handle, ref IntegratedPlatform.IntegratedPlatformOptionsContainerAddOptionsInternal inOptions);
		internal static EOS_IntegratedPlatformOptionsContainer_AddDelegate EOS_IntegratedPlatformOptionsContainer_Add;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_IntegratedPlatformOptionsContainer_ReleaseDelegate(IntPtr integratedPlatformOptionsContainerHandle);
		internal static EOS_IntegratedPlatformOptionsContainer_ReleaseDelegate EOS_IntegratedPlatformOptionsContainer_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedDelegate(IntPtr handle, ref IntegratedPlatform.AddNotifyUserLoginStatusChangedOptionsInternal options, IntPtr clientData, IntegratedPlatform.OnUserLoginStatusChangedCallbackInternal callbackFunction);
		internal static EOS_IntegratedPlatform_AddNotifyUserLoginStatusChangedDelegate EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_IntegratedPlatform_ClearUserPreLogoutCallbackDelegate(IntPtr handle, ref IntegratedPlatform.ClearUserPreLogoutCallbackOptionsInternal options);
		internal static EOS_IntegratedPlatform_ClearUserPreLogoutCallbackDelegate EOS_IntegratedPlatform_ClearUserPreLogoutCallback;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerDelegate(ref IntegratedPlatform.CreateIntegratedPlatformOptionsContainerOptionsInternal options, out IntPtr outIntegratedPlatformOptionsContainerHandle);
		internal static EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainerDelegate EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_IntegratedPlatform_FinalizeDeferredUserLogoutDelegate(IntPtr handle, ref IntegratedPlatform.FinalizeDeferredUserLogoutOptionsInternal options);
		internal static EOS_IntegratedPlatform_FinalizeDeferredUserLogoutDelegate EOS_IntegratedPlatform_FinalizeDeferredUserLogout;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChangedDelegate EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_IntegratedPlatform_SetUserLoginStatusDelegate(IntPtr handle, ref IntegratedPlatform.SetUserLoginStatusOptionsInternal options);
		internal static EOS_IntegratedPlatform_SetUserLoginStatusDelegate EOS_IntegratedPlatform_SetUserLoginStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_IntegratedPlatform_SetUserPreLogoutCallbackDelegate(IntPtr handle, ref IntegratedPlatform.SetUserPreLogoutCallbackOptionsInternal options, IntPtr clientData, IntegratedPlatform.OnUserPreLogoutCallbackInternal callbackFunction);
		internal static EOS_IntegratedPlatform_SetUserPreLogoutCallbackDelegate EOS_IntegratedPlatform_SetUserPreLogoutCallback;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_KWS_AddNotifyPermissionsUpdateReceivedDelegate(IntPtr handle, ref KWS.AddNotifyPermissionsUpdateReceivedOptionsInternal options, IntPtr clientData, KWS.OnPermissionsUpdateReceivedCallbackInternal notificationFn);
		internal static EOS_KWS_AddNotifyPermissionsUpdateReceivedDelegate EOS_KWS_AddNotifyPermissionsUpdateReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_KWS_CopyPermissionByIndexDelegate(IntPtr handle, ref KWS.CopyPermissionByIndexOptionsInternal options, out IntPtr outPermission);
		internal static EOS_KWS_CopyPermissionByIndexDelegate EOS_KWS_CopyPermissionByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_CreateUserDelegate(IntPtr handle, ref KWS.CreateUserOptionsInternal options, IntPtr clientData, KWS.OnCreateUserCallbackInternal completionDelegate);
		internal static EOS_KWS_CreateUserDelegate EOS_KWS_CreateUser;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_KWS_GetPermissionByKeyDelegate(IntPtr handle, ref KWS.GetPermissionByKeyOptionsInternal options, out KWS.KWSPermissionStatus outPermission);
		internal static EOS_KWS_GetPermissionByKeyDelegate EOS_KWS_GetPermissionByKey;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_KWS_GetPermissionsCountDelegate(IntPtr handle, ref KWS.GetPermissionsCountOptionsInternal options);
		internal static EOS_KWS_GetPermissionsCountDelegate EOS_KWS_GetPermissionsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_PermissionStatus_ReleaseDelegate(IntPtr permissionStatus);
		internal static EOS_KWS_PermissionStatus_ReleaseDelegate EOS_KWS_PermissionStatus_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_QueryAgeGateDelegate(IntPtr handle, ref KWS.QueryAgeGateOptionsInternal options, IntPtr clientData, KWS.OnQueryAgeGateCallbackInternal completionDelegate);
		internal static EOS_KWS_QueryAgeGateDelegate EOS_KWS_QueryAgeGate;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_QueryPermissionsDelegate(IntPtr handle, ref KWS.QueryPermissionsOptionsInternal options, IntPtr clientData, KWS.OnQueryPermissionsCallbackInternal completionDelegate);
		internal static EOS_KWS_QueryPermissionsDelegate EOS_KWS_QueryPermissions;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_RemoveNotifyPermissionsUpdateReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_KWS_RemoveNotifyPermissionsUpdateReceivedDelegate EOS_KWS_RemoveNotifyPermissionsUpdateReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_RequestPermissionsDelegate(IntPtr handle, ref KWS.RequestPermissionsOptionsInternal options, IntPtr clientData, KWS.OnRequestPermissionsCallbackInternal completionDelegate);
		internal static EOS_KWS_RequestPermissionsDelegate EOS_KWS_RequestPermissions;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_KWS_UpdateParentEmailDelegate(IntPtr handle, ref KWS.UpdateParentEmailOptionsInternal options, IntPtr clientData, KWS.OnUpdateParentEmailCallbackInternal completionDelegate);
		internal static EOS_KWS_UpdateParentEmailDelegate EOS_KWS_UpdateParentEmail;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardDefinitionByIndexDelegate(IntPtr handle, ref Leaderboards.CopyLeaderboardDefinitionByIndexOptionsInternal options, out IntPtr outLeaderboardDefinition);
		internal static EOS_Leaderboards_CopyLeaderboardDefinitionByIndexDelegate EOS_Leaderboards_CopyLeaderboardDefinitionByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdDelegate(IntPtr handle, ref Leaderboards.CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal options, out IntPtr outLeaderboardDefinition);
		internal static EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdDelegate EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardRecordByIndexDelegate(IntPtr handle, ref Leaderboards.CopyLeaderboardRecordByIndexOptionsInternal options, out IntPtr outLeaderboardRecord);
		internal static EOS_Leaderboards_CopyLeaderboardRecordByIndexDelegate EOS_Leaderboards_CopyLeaderboardRecordByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardRecordByUserIdDelegate(IntPtr handle, ref Leaderboards.CopyLeaderboardRecordByUserIdOptionsInternal options, out IntPtr outLeaderboardRecord);
		internal static EOS_Leaderboards_CopyLeaderboardRecordByUserIdDelegate EOS_Leaderboards_CopyLeaderboardRecordByUserId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardUserScoreByIndexDelegate(IntPtr handle, ref Leaderboards.CopyLeaderboardUserScoreByIndexOptionsInternal options, out IntPtr outLeaderboardUserScore);
		internal static EOS_Leaderboards_CopyLeaderboardUserScoreByIndexDelegate EOS_Leaderboards_CopyLeaderboardUserScoreByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdDelegate(IntPtr handle, ref Leaderboards.CopyLeaderboardUserScoreByUserIdOptionsInternal options, out IntPtr outLeaderboardUserScore);
		internal static EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdDelegate EOS_Leaderboards_CopyLeaderboardUserScoreByUserId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Leaderboards_Definition_ReleaseDelegate(IntPtr leaderboardDefinition);
		internal static EOS_Leaderboards_Definition_ReleaseDelegate EOS_Leaderboards_Definition_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Leaderboards_GetLeaderboardDefinitionCountDelegate(IntPtr handle, ref Leaderboards.GetLeaderboardDefinitionCountOptionsInternal options);
		internal static EOS_Leaderboards_GetLeaderboardDefinitionCountDelegate EOS_Leaderboards_GetLeaderboardDefinitionCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Leaderboards_GetLeaderboardRecordCountDelegate(IntPtr handle, ref Leaderboards.GetLeaderboardRecordCountOptionsInternal options);
		internal static EOS_Leaderboards_GetLeaderboardRecordCountDelegate EOS_Leaderboards_GetLeaderboardRecordCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Leaderboards_GetLeaderboardUserScoreCountDelegate(IntPtr handle, ref Leaderboards.GetLeaderboardUserScoreCountOptionsInternal options);
		internal static EOS_Leaderboards_GetLeaderboardUserScoreCountDelegate EOS_Leaderboards_GetLeaderboardUserScoreCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Leaderboards_LeaderboardRecord_ReleaseDelegate(IntPtr leaderboardRecord);
		internal static EOS_Leaderboards_LeaderboardRecord_ReleaseDelegate EOS_Leaderboards_LeaderboardRecord_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Leaderboards_LeaderboardUserScore_ReleaseDelegate(IntPtr leaderboardUserScore);
		internal static EOS_Leaderboards_LeaderboardUserScore_ReleaseDelegate EOS_Leaderboards_LeaderboardUserScore_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Leaderboards_QueryLeaderboardDefinitionsDelegate(IntPtr handle, ref Leaderboards.QueryLeaderboardDefinitionsOptionsInternal options, IntPtr clientData, Leaderboards.OnQueryLeaderboardDefinitionsCompleteCallbackInternal completionDelegate);
		internal static EOS_Leaderboards_QueryLeaderboardDefinitionsDelegate EOS_Leaderboards_QueryLeaderboardDefinitions;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Leaderboards_QueryLeaderboardRanksDelegate(IntPtr handle, ref Leaderboards.QueryLeaderboardRanksOptionsInternal options, IntPtr clientData, Leaderboards.OnQueryLeaderboardRanksCompleteCallbackInternal completionDelegate);
		internal static EOS_Leaderboards_QueryLeaderboardRanksDelegate EOS_Leaderboards_QueryLeaderboardRanks;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Leaderboards_QueryLeaderboardUserScoresDelegate(IntPtr handle, ref Leaderboards.QueryLeaderboardUserScoresOptionsInternal options, IntPtr clientData, Leaderboards.OnQueryLeaderboardUserScoresCompleteCallbackInternal completionDelegate);
		internal static EOS_Leaderboards_QueryLeaderboardUserScoresDelegate EOS_Leaderboards_QueryLeaderboardUserScores;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyDetails_CopyAttributeByIndexDelegate(IntPtr handle, ref Lobby.LobbyDetailsCopyAttributeByIndexOptionsInternal options, out IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyAttributeByIndexDelegate EOS_LobbyDetails_CopyAttributeByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyDetails_CopyAttributeByKeyDelegate(IntPtr handle, ref Lobby.LobbyDetailsCopyAttributeByKeyOptionsInternal options, out IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyAttributeByKeyDelegate EOS_LobbyDetails_CopyAttributeByKey;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyDetails_CopyInfoDelegate(IntPtr handle, ref Lobby.LobbyDetailsCopyInfoOptionsInternal options, out IntPtr outLobbyDetailsInfo);
		internal static EOS_LobbyDetails_CopyInfoDelegate EOS_LobbyDetails_CopyInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyDetails_CopyMemberAttributeByIndexDelegate(IntPtr handle, ref Lobby.LobbyDetailsCopyMemberAttributeByIndexOptionsInternal options, out IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyMemberAttributeByIndexDelegate EOS_LobbyDetails_CopyMemberAttributeByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyDetails_CopyMemberAttributeByKeyDelegate(IntPtr handle, ref Lobby.LobbyDetailsCopyMemberAttributeByKeyOptionsInternal options, out IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyMemberAttributeByKeyDelegate EOS_LobbyDetails_CopyMemberAttributeByKey;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyDetails_CopyMemberInfoDelegate(IntPtr handle, ref Lobby.LobbyDetailsCopyMemberInfoOptionsInternal options, out IntPtr outLobbyDetailsMemberInfo);
		internal static EOS_LobbyDetails_CopyMemberInfoDelegate EOS_LobbyDetails_CopyMemberInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_LobbyDetails_GetAttributeCountDelegate(IntPtr handle, ref Lobby.LobbyDetailsGetAttributeCountOptionsInternal options);
		internal static EOS_LobbyDetails_GetAttributeCountDelegate EOS_LobbyDetails_GetAttributeCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_LobbyDetails_GetLobbyOwnerDelegate(IntPtr handle, ref Lobby.LobbyDetailsGetLobbyOwnerOptionsInternal options);
		internal static EOS_LobbyDetails_GetLobbyOwnerDelegate EOS_LobbyDetails_GetLobbyOwner;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_LobbyDetails_GetMemberAttributeCountDelegate(IntPtr handle, ref Lobby.LobbyDetailsGetMemberAttributeCountOptionsInternal options);
		internal static EOS_LobbyDetails_GetMemberAttributeCountDelegate EOS_LobbyDetails_GetMemberAttributeCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_LobbyDetails_GetMemberByIndexDelegate(IntPtr handle, ref Lobby.LobbyDetailsGetMemberByIndexOptionsInternal options);
		internal static EOS_LobbyDetails_GetMemberByIndexDelegate EOS_LobbyDetails_GetMemberByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_LobbyDetails_GetMemberCountDelegate(IntPtr handle, ref Lobby.LobbyDetailsGetMemberCountOptionsInternal options);
		internal static EOS_LobbyDetails_GetMemberCountDelegate EOS_LobbyDetails_GetMemberCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_LobbyDetails_Info_ReleaseDelegate(IntPtr lobbyDetailsInfo);
		internal static EOS_LobbyDetails_Info_ReleaseDelegate EOS_LobbyDetails_Info_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_LobbyDetails_MemberInfo_ReleaseDelegate(IntPtr lobbyDetailsMemberInfo);
		internal static EOS_LobbyDetails_MemberInfo_ReleaseDelegate EOS_LobbyDetails_MemberInfo_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_LobbyDetails_ReleaseDelegate(IntPtr lobbyHandle);
		internal static EOS_LobbyDetails_ReleaseDelegate EOS_LobbyDetails_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_AddAttributeDelegate(IntPtr handle, ref Lobby.LobbyModificationAddAttributeOptionsInternal options);
		internal static EOS_LobbyModification_AddAttributeDelegate EOS_LobbyModification_AddAttribute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_AddMemberAttributeDelegate(IntPtr handle, ref Lobby.LobbyModificationAddMemberAttributeOptionsInternal options);
		internal static EOS_LobbyModification_AddMemberAttributeDelegate EOS_LobbyModification_AddMemberAttribute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_LobbyModification_ReleaseDelegate(IntPtr lobbyModificationHandle);
		internal static EOS_LobbyModification_ReleaseDelegate EOS_LobbyModification_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_RemoveAttributeDelegate(IntPtr handle, ref Lobby.LobbyModificationRemoveAttributeOptionsInternal options);
		internal static EOS_LobbyModification_RemoveAttributeDelegate EOS_LobbyModification_RemoveAttribute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_RemoveMemberAttributeDelegate(IntPtr handle, ref Lobby.LobbyModificationRemoveMemberAttributeOptionsInternal options);
		internal static EOS_LobbyModification_RemoveMemberAttributeDelegate EOS_LobbyModification_RemoveMemberAttribute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_SetAllowedPlatformIdsDelegate(IntPtr handle, ref Lobby.LobbyModificationSetAllowedPlatformIdsOptionsInternal options);
		internal static EOS_LobbyModification_SetAllowedPlatformIdsDelegate EOS_LobbyModification_SetAllowedPlatformIds;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_SetBucketIdDelegate(IntPtr handle, ref Lobby.LobbyModificationSetBucketIdOptionsInternal options);
		internal static EOS_LobbyModification_SetBucketIdDelegate EOS_LobbyModification_SetBucketId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_SetInvitesAllowedDelegate(IntPtr handle, ref Lobby.LobbyModificationSetInvitesAllowedOptionsInternal options);
		internal static EOS_LobbyModification_SetInvitesAllowedDelegate EOS_LobbyModification_SetInvitesAllowed;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_SetMaxMembersDelegate(IntPtr handle, ref Lobby.LobbyModificationSetMaxMembersOptionsInternal options);
		internal static EOS_LobbyModification_SetMaxMembersDelegate EOS_LobbyModification_SetMaxMembers;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbyModification_SetPermissionLevelDelegate(IntPtr handle, ref Lobby.LobbyModificationSetPermissionLevelOptionsInternal options);
		internal static EOS_LobbyModification_SetPermissionLevelDelegate EOS_LobbyModification_SetPermissionLevel;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbySearch_CopySearchResultByIndexDelegate(IntPtr handle, ref Lobby.LobbySearchCopySearchResultByIndexOptionsInternal options, out IntPtr outLobbyDetailsHandle);
		internal static EOS_LobbySearch_CopySearchResultByIndexDelegate EOS_LobbySearch_CopySearchResultByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_LobbySearch_FindDelegate(IntPtr handle, ref Lobby.LobbySearchFindOptionsInternal options, IntPtr clientData, Lobby.LobbySearchOnFindCallbackInternal completionDelegate);
		internal static EOS_LobbySearch_FindDelegate EOS_LobbySearch_Find;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_LobbySearch_GetSearchResultCountDelegate(IntPtr handle, ref Lobby.LobbySearchGetSearchResultCountOptionsInternal options);
		internal static EOS_LobbySearch_GetSearchResultCountDelegate EOS_LobbySearch_GetSearchResultCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_LobbySearch_ReleaseDelegate(IntPtr lobbySearchHandle);
		internal static EOS_LobbySearch_ReleaseDelegate EOS_LobbySearch_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbySearch_RemoveParameterDelegate(IntPtr handle, ref Lobby.LobbySearchRemoveParameterOptionsInternal options);
		internal static EOS_LobbySearch_RemoveParameterDelegate EOS_LobbySearch_RemoveParameter;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbySearch_SetLobbyIdDelegate(IntPtr handle, ref Lobby.LobbySearchSetLobbyIdOptionsInternal options);
		internal static EOS_LobbySearch_SetLobbyIdDelegate EOS_LobbySearch_SetLobbyId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbySearch_SetMaxResultsDelegate(IntPtr handle, ref Lobby.LobbySearchSetMaxResultsOptionsInternal options);
		internal static EOS_LobbySearch_SetMaxResultsDelegate EOS_LobbySearch_SetMaxResults;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbySearch_SetParameterDelegate(IntPtr handle, ref Lobby.LobbySearchSetParameterOptionsInternal options);
		internal static EOS_LobbySearch_SetParameterDelegate EOS_LobbySearch_SetParameter;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_LobbySearch_SetTargetUserIdDelegate(IntPtr handle, ref Lobby.LobbySearchSetTargetUserIdOptionsInternal options);
		internal static EOS_LobbySearch_SetTargetUserIdDelegate EOS_LobbySearch_SetTargetUserId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyJoinLobbyAcceptedDelegate(IntPtr handle, ref Lobby.AddNotifyJoinLobbyAcceptedOptionsInternal options, IntPtr clientData, Lobby.OnJoinLobbyAcceptedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyJoinLobbyAcceptedDelegate EOS_Lobby_AddNotifyJoinLobbyAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLeaveLobbyRequestedDelegate(IntPtr handle, ref Lobby.AddNotifyLeaveLobbyRequestedOptionsInternal options, IntPtr clientData, Lobby.OnLeaveLobbyRequestedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLeaveLobbyRequestedDelegate EOS_Lobby_AddNotifyLeaveLobbyRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyInviteAcceptedDelegate(IntPtr handle, ref Lobby.AddNotifyLobbyInviteAcceptedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyInviteAcceptedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyInviteAcceptedDelegate EOS_Lobby_AddNotifyLobbyInviteAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyInviteReceivedDelegate(IntPtr handle, ref Lobby.AddNotifyLobbyInviteReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyInviteReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyInviteReceivedDelegate EOS_Lobby_AddNotifyLobbyInviteReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyInviteRejectedDelegate(IntPtr handle, ref Lobby.AddNotifyLobbyInviteRejectedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyInviteRejectedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyInviteRejectedDelegate EOS_Lobby_AddNotifyLobbyInviteRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyMemberStatusReceivedDelegate(IntPtr handle, ref Lobby.AddNotifyLobbyMemberStatusReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyMemberStatusReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyMemberStatusReceivedDelegate EOS_Lobby_AddNotifyLobbyMemberStatusReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedDelegate(IntPtr handle, ref Lobby.AddNotifyLobbyMemberUpdateReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyMemberUpdateReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedDelegate EOS_Lobby_AddNotifyLobbyMemberUpdateReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyUpdateReceivedDelegate(IntPtr handle, ref Lobby.AddNotifyLobbyUpdateReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyUpdateReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyUpdateReceivedDelegate EOS_Lobby_AddNotifyLobbyUpdateReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifyRTCRoomConnectionChangedDelegate(IntPtr handle, ref Lobby.AddNotifyRTCRoomConnectionChangedOptionsInternal options, IntPtr clientData, Lobby.OnRTCRoomConnectionChangedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyRTCRoomConnectionChangedDelegate EOS_Lobby_AddNotifyRTCRoomConnectionChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedDelegate(IntPtr handle, ref Lobby.AddNotifySendLobbyNativeInviteRequestedOptionsInternal options, IntPtr clientData, Lobby.OnSendLobbyNativeInviteRequestedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifySendLobbyNativeInviteRequestedDelegate EOS_Lobby_AddNotifySendLobbyNativeInviteRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_Attribute_ReleaseDelegate(IntPtr lobbyAttribute);
		internal static EOS_Lobby_Attribute_ReleaseDelegate EOS_Lobby_Attribute_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_CopyLobbyDetailsHandleDelegate(IntPtr handle, ref Lobby.CopyLobbyDetailsHandleOptionsInternal options, out IntPtr outLobbyDetailsHandle);
		internal static EOS_Lobby_CopyLobbyDetailsHandleDelegate EOS_Lobby_CopyLobbyDetailsHandle;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_CopyLobbyDetailsHandleByInviteIdDelegate(IntPtr handle, ref Lobby.CopyLobbyDetailsHandleByInviteIdOptionsInternal options, out IntPtr outLobbyDetailsHandle);
		internal static EOS_Lobby_CopyLobbyDetailsHandleByInviteIdDelegate EOS_Lobby_CopyLobbyDetailsHandleByInviteId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdDelegate(IntPtr handle, ref Lobby.CopyLobbyDetailsHandleByUiEventIdOptionsInternal options, out IntPtr outLobbyDetailsHandle);
		internal static EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdDelegate EOS_Lobby_CopyLobbyDetailsHandleByUiEventId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_CreateLobbyDelegate(IntPtr handle, ref Lobby.CreateLobbyOptionsInternal options, IntPtr clientData, Lobby.OnCreateLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_CreateLobbyDelegate EOS_Lobby_CreateLobby;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_CreateLobbySearchDelegate(IntPtr handle, ref Lobby.CreateLobbySearchOptionsInternal options, out IntPtr outLobbySearchHandle);
		internal static EOS_Lobby_CreateLobbySearchDelegate EOS_Lobby_CreateLobbySearch;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_DestroyLobbyDelegate(IntPtr handle, ref Lobby.DestroyLobbyOptionsInternal options, IntPtr clientData, Lobby.OnDestroyLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_DestroyLobbyDelegate EOS_Lobby_DestroyLobby;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_GetConnectStringDelegate(IntPtr handle, ref Lobby.GetConnectStringOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);
		internal static EOS_Lobby_GetConnectStringDelegate EOS_Lobby_GetConnectString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Lobby_GetInviteCountDelegate(IntPtr handle, ref Lobby.GetInviteCountOptionsInternal options);
		internal static EOS_Lobby_GetInviteCountDelegate EOS_Lobby_GetInviteCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_GetInviteIdByIndexDelegate(IntPtr handle, ref Lobby.GetInviteIdByIndexOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Lobby_GetInviteIdByIndexDelegate EOS_Lobby_GetInviteIdByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_GetRTCRoomNameDelegate(IntPtr handle, ref Lobby.GetRTCRoomNameOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);
		internal static EOS_Lobby_GetRTCRoomNameDelegate EOS_Lobby_GetRTCRoomName;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_HardMuteMemberDelegate(IntPtr handle, ref Lobby.HardMuteMemberOptionsInternal options, IntPtr clientData, Lobby.OnHardMuteMemberCallbackInternal completionDelegate);
		internal static EOS_Lobby_HardMuteMemberDelegate EOS_Lobby_HardMuteMember;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_IsRTCRoomConnectedDelegate(IntPtr handle, ref Lobby.IsRTCRoomConnectedOptionsInternal options, out int outIsConnected);
		internal static EOS_Lobby_IsRTCRoomConnectedDelegate EOS_Lobby_IsRTCRoomConnected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_JoinLobbyDelegate(IntPtr handle, ref Lobby.JoinLobbyOptionsInternal options, IntPtr clientData, Lobby.OnJoinLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_JoinLobbyDelegate EOS_Lobby_JoinLobby;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_JoinLobbyByIdDelegate(IntPtr handle, ref Lobby.JoinLobbyByIdOptionsInternal options, IntPtr clientData, Lobby.OnJoinLobbyByIdCallbackInternal completionDelegate);
		internal static EOS_Lobby_JoinLobbyByIdDelegate EOS_Lobby_JoinLobbyById;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_JoinRTCRoomDelegate(IntPtr handle, ref Lobby.JoinRTCRoomOptionsInternal options, IntPtr clientData, Lobby.OnJoinRTCRoomCallbackInternal completionDelegate);
		internal static EOS_Lobby_JoinRTCRoomDelegate EOS_Lobby_JoinRTCRoom;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_KickMemberDelegate(IntPtr handle, ref Lobby.KickMemberOptionsInternal options, IntPtr clientData, Lobby.OnKickMemberCallbackInternal completionDelegate);
		internal static EOS_Lobby_KickMemberDelegate EOS_Lobby_KickMember;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_LeaveLobbyDelegate(IntPtr handle, ref Lobby.LeaveLobbyOptionsInternal options, IntPtr clientData, Lobby.OnLeaveLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_LeaveLobbyDelegate EOS_Lobby_LeaveLobby;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_LeaveRTCRoomDelegate(IntPtr handle, ref Lobby.LeaveRTCRoomOptionsInternal options, IntPtr clientData, Lobby.OnLeaveRTCRoomCallbackInternal completionDelegate);
		internal static EOS_Lobby_LeaveRTCRoomDelegate EOS_Lobby_LeaveRTCRoom;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_ParseConnectStringDelegate(IntPtr handle, ref Lobby.ParseConnectStringOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);
		internal static EOS_Lobby_ParseConnectStringDelegate EOS_Lobby_ParseConnectString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_PromoteMemberDelegate(IntPtr handle, ref Lobby.PromoteMemberOptionsInternal options, IntPtr clientData, Lobby.OnPromoteMemberCallbackInternal completionDelegate);
		internal static EOS_Lobby_PromoteMemberDelegate EOS_Lobby_PromoteMember;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_QueryInvitesDelegate(IntPtr handle, ref Lobby.QueryInvitesOptionsInternal options, IntPtr clientData, Lobby.OnQueryInvitesCallbackInternal completionDelegate);
		internal static EOS_Lobby_QueryInvitesDelegate EOS_Lobby_QueryInvites;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RejectInviteDelegate(IntPtr handle, ref Lobby.RejectInviteOptionsInternal options, IntPtr clientData, Lobby.OnRejectInviteCallbackInternal completionDelegate);
		internal static EOS_Lobby_RejectInviteDelegate EOS_Lobby_RejectInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyJoinLobbyAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyJoinLobbyAcceptedDelegate EOS_Lobby_RemoveNotifyJoinLobbyAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLeaveLobbyRequestedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLeaveLobbyRequestedDelegate EOS_Lobby_RemoveNotifyLeaveLobbyRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyInviteAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyInviteAcceptedDelegate EOS_Lobby_RemoveNotifyLobbyInviteAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyInviteReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyInviteReceivedDelegate EOS_Lobby_RemoveNotifyLobbyInviteReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyInviteRejectedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyInviteRejectedDelegate EOS_Lobby_RemoveNotifyLobbyInviteRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedDelegate EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedDelegate EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyUpdateReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyUpdateReceivedDelegate EOS_Lobby_RemoveNotifyLobbyUpdateReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedDelegate EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequestedDelegate EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_SendInviteDelegate(IntPtr handle, ref Lobby.SendInviteOptionsInternal options, IntPtr clientData, Lobby.OnSendInviteCallbackInternal completionDelegate);
		internal static EOS_Lobby_SendInviteDelegate EOS_Lobby_SendInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Lobby_UpdateLobbyDelegate(IntPtr handle, ref Lobby.UpdateLobbyOptionsInternal options, IntPtr clientData, Lobby.OnUpdateLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_UpdateLobbyDelegate EOS_Lobby_UpdateLobby;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Lobby_UpdateLobbyModificationDelegate(IntPtr handle, ref Lobby.UpdateLobbyModificationOptionsInternal options, out IntPtr outLobbyModificationHandle);
		internal static EOS_Lobby_UpdateLobbyModificationDelegate EOS_Lobby_UpdateLobbyModification;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Logging_SetCallbackDelegate(Logging.LogMessageFuncInternal callback);
		internal static EOS_Logging_SetCallbackDelegate EOS_Logging_SetCallback;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Logging_SetLogLevelDelegate(Logging.LogCategory logCategory, Logging.LogLevel logLevel);
		internal static EOS_Logging_SetLogLevelDelegate EOS_Logging_SetLogLevel;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Metrics_BeginPlayerSessionDelegate(IntPtr handle, ref Metrics.BeginPlayerSessionOptionsInternal options);
		internal static EOS_Metrics_BeginPlayerSessionDelegate EOS_Metrics_BeginPlayerSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Metrics_EndPlayerSessionDelegate(IntPtr handle, ref Metrics.EndPlayerSessionOptionsInternal options);
		internal static EOS_Metrics_EndPlayerSessionDelegate EOS_Metrics_EndPlayerSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Mods_CopyModInfoDelegate(IntPtr handle, ref Mods.CopyModInfoOptionsInternal options, out IntPtr outEnumeratedMods);
		internal static EOS_Mods_CopyModInfoDelegate EOS_Mods_CopyModInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Mods_EnumerateModsDelegate(IntPtr handle, ref Mods.EnumerateModsOptionsInternal options, IntPtr clientData, Mods.OnEnumerateModsCallbackInternal completionDelegate);
		internal static EOS_Mods_EnumerateModsDelegate EOS_Mods_EnumerateMods;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Mods_InstallModDelegate(IntPtr handle, ref Mods.InstallModOptionsInternal options, IntPtr clientData, Mods.OnInstallModCallbackInternal completionDelegate);
		internal static EOS_Mods_InstallModDelegate EOS_Mods_InstallMod;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Mods_ModInfo_ReleaseDelegate(IntPtr modInfo);
		internal static EOS_Mods_ModInfo_ReleaseDelegate EOS_Mods_ModInfo_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Mods_UninstallModDelegate(IntPtr handle, ref Mods.UninstallModOptionsInternal options, IntPtr clientData, Mods.OnUninstallModCallbackInternal completionDelegate);
		internal static EOS_Mods_UninstallModDelegate EOS_Mods_UninstallMod;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Mods_UpdateModDelegate(IntPtr handle, ref Mods.UpdateModOptionsInternal options, IntPtr clientData, Mods.OnUpdateModCallbackInternal completionDelegate);
		internal static EOS_Mods_UpdateModDelegate EOS_Mods_UpdateMod;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_AcceptConnectionDelegate(IntPtr handle, ref P2P.AcceptConnectionOptionsInternal options);
		internal static EOS_P2P_AcceptConnectionDelegate EOS_P2P_AcceptConnection;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_P2P_AddNotifyIncomingPacketQueueFullDelegate(IntPtr handle, ref P2P.AddNotifyIncomingPacketQueueFullOptionsInternal options, IntPtr clientData, P2P.OnIncomingPacketQueueFullCallbackInternal incomingPacketQueueFullHandler);
		internal static EOS_P2P_AddNotifyIncomingPacketQueueFullDelegate EOS_P2P_AddNotifyIncomingPacketQueueFull;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_P2P_AddNotifyPeerConnectionClosedDelegate(IntPtr handle, ref P2P.AddNotifyPeerConnectionClosedOptionsInternal options, IntPtr clientData, P2P.OnRemoteConnectionClosedCallbackInternal connectionClosedHandler);
		internal static EOS_P2P_AddNotifyPeerConnectionClosedDelegate EOS_P2P_AddNotifyPeerConnectionClosed;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_P2P_AddNotifyPeerConnectionEstablishedDelegate(IntPtr handle, ref P2P.AddNotifyPeerConnectionEstablishedOptionsInternal options, IntPtr clientData, P2P.OnPeerConnectionEstablishedCallbackInternal connectionEstablishedHandler);
		internal static EOS_P2P_AddNotifyPeerConnectionEstablishedDelegate EOS_P2P_AddNotifyPeerConnectionEstablished;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_P2P_AddNotifyPeerConnectionInterruptedDelegate(IntPtr handle, ref P2P.AddNotifyPeerConnectionInterruptedOptionsInternal options, IntPtr clientData, P2P.OnPeerConnectionInterruptedCallbackInternal connectionInterruptedHandler);
		internal static EOS_P2P_AddNotifyPeerConnectionInterruptedDelegate EOS_P2P_AddNotifyPeerConnectionInterrupted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_P2P_AddNotifyPeerConnectionRequestDelegate(IntPtr handle, ref P2P.AddNotifyPeerConnectionRequestOptionsInternal options, IntPtr clientData, P2P.OnIncomingConnectionRequestCallbackInternal connectionRequestHandler);
		internal static EOS_P2P_AddNotifyPeerConnectionRequestDelegate EOS_P2P_AddNotifyPeerConnectionRequest;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_ClearPacketQueueDelegate(IntPtr handle, ref P2P.ClearPacketQueueOptionsInternal options);
		internal static EOS_P2P_ClearPacketQueueDelegate EOS_P2P_ClearPacketQueue;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_CloseConnectionDelegate(IntPtr handle, ref P2P.CloseConnectionOptionsInternal options);
		internal static EOS_P2P_CloseConnectionDelegate EOS_P2P_CloseConnection;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_CloseConnectionsDelegate(IntPtr handle, ref P2P.CloseConnectionsOptionsInternal options);
		internal static EOS_P2P_CloseConnectionsDelegate EOS_P2P_CloseConnections;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_GetNATTypeDelegate(IntPtr handle, ref P2P.GetNATTypeOptionsInternal options, out P2P.NATType outNATType);
		internal static EOS_P2P_GetNATTypeDelegate EOS_P2P_GetNATType;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_GetNextReceivedPacketSizeDelegate(IntPtr handle, ref P2P.GetNextReceivedPacketSizeOptionsInternal options, out uint outPacketSizeBytes);
		internal static EOS_P2P_GetNextReceivedPacketSizeDelegate EOS_P2P_GetNextReceivedPacketSize;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_GetPacketQueueInfoDelegate(IntPtr handle, ref P2P.GetPacketQueueInfoOptionsInternal options, out P2P.PacketQueueInfoInternal outPacketQueueInfo);
		internal static EOS_P2P_GetPacketQueueInfoDelegate EOS_P2P_GetPacketQueueInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_GetPortRangeDelegate(IntPtr handle, ref P2P.GetPortRangeOptionsInternal options, out ushort outPort, out ushort outNumAdditionalPortsToTry);
		internal static EOS_P2P_GetPortRangeDelegate EOS_P2P_GetPortRange;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_GetRelayControlDelegate(IntPtr handle, ref P2P.GetRelayControlOptionsInternal options, out P2P.RelayControl outRelayControl);
		internal static EOS_P2P_GetRelayControlDelegate EOS_P2P_GetRelayControl;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_P2P_QueryNATTypeDelegate(IntPtr handle, ref P2P.QueryNATTypeOptionsInternal options, IntPtr clientData, P2P.OnQueryNATTypeCompleteCallbackInternal completionDelegate);
		internal static EOS_P2P_QueryNATTypeDelegate EOS_P2P_QueryNATType;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_ReceivePacketDelegate(IntPtr handle, ref P2P.ReceivePacketOptionsInternal options, out IntPtr outPeerId, IntPtr outSocketId, out byte outChannel, IntPtr outData, out uint outBytesWritten);
		internal static EOS_P2P_ReceivePacketDelegate EOS_P2P_ReceivePacket;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_P2P_RemoveNotifyIncomingPacketQueueFullDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyIncomingPacketQueueFullDelegate EOS_P2P_RemoveNotifyIncomingPacketQueueFull;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_P2P_RemoveNotifyPeerConnectionClosedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyPeerConnectionClosedDelegate EOS_P2P_RemoveNotifyPeerConnectionClosed;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_P2P_RemoveNotifyPeerConnectionEstablishedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyPeerConnectionEstablishedDelegate EOS_P2P_RemoveNotifyPeerConnectionEstablished;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_P2P_RemoveNotifyPeerConnectionInterruptedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyPeerConnectionInterruptedDelegate EOS_P2P_RemoveNotifyPeerConnectionInterrupted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_P2P_RemoveNotifyPeerConnectionRequestDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyPeerConnectionRequestDelegate EOS_P2P_RemoveNotifyPeerConnectionRequest;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_SendPacketDelegate(IntPtr handle, ref P2P.SendPacketOptionsInternal options);
		internal static EOS_P2P_SendPacketDelegate EOS_P2P_SendPacket;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_SetPacketQueueSizeDelegate(IntPtr handle, ref P2P.SetPacketQueueSizeOptionsInternal options);
		internal static EOS_P2P_SetPacketQueueSizeDelegate EOS_P2P_SetPacketQueueSize;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_SetPortRangeDelegate(IntPtr handle, ref P2P.SetPortRangeOptionsInternal options);
		internal static EOS_P2P_SetPortRangeDelegate EOS_P2P_SetPortRange;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_P2P_SetRelayControlDelegate(IntPtr handle, ref P2P.SetRelayControlOptionsInternal options);
		internal static EOS_P2P_SetRelayControlDelegate EOS_P2P_SetRelayControl;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_CheckForLauncherAndRestartDelegate(IntPtr handle);
		internal static EOS_Platform_CheckForLauncherAndRestartDelegate EOS_Platform_CheckForLauncherAndRestart;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_CreateDelegate(ref Platform.OptionsInternal options);
		internal static EOS_Platform_CreateDelegate EOS_Platform_Create;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetAchievementsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetAchievementsInterfaceDelegate EOS_Platform_GetAchievementsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_GetActiveCountryCodeDelegate(IntPtr handle, IntPtr localUserId, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetActiveCountryCodeDelegate EOS_Platform_GetActiveCountryCode;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_GetActiveLocaleCodeDelegate(IntPtr handle, IntPtr localUserId, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetActiveLocaleCodeDelegate EOS_Platform_GetActiveLocaleCode;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetAntiCheatClientInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetAntiCheatClientInterfaceDelegate EOS_Platform_GetAntiCheatClientInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetAntiCheatServerInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetAntiCheatServerInterfaceDelegate EOS_Platform_GetAntiCheatServerInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Platform.ApplicationStatus EOS_Platform_GetApplicationStatusDelegate(IntPtr handle);
		internal static EOS_Platform_GetApplicationStatusDelegate EOS_Platform_GetApplicationStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetAuthInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetAuthInterfaceDelegate EOS_Platform_GetAuthInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetConnectInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetConnectInterfaceDelegate EOS_Platform_GetConnectInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetCustomInvitesInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetCustomInvitesInterfaceDelegate EOS_Platform_GetCustomInvitesInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_GetDesktopCrossplayStatusDelegate(IntPtr handle, ref Platform.GetDesktopCrossplayStatusOptionsInternal options, out Platform.DesktopCrossplayStatusInfoInternal outDesktopCrossplayStatusInfo);
		internal static EOS_Platform_GetDesktopCrossplayStatusDelegate EOS_Platform_GetDesktopCrossplayStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetEcomInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetEcomInterfaceDelegate EOS_Platform_GetEcomInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetFriendsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetFriendsInterfaceDelegate EOS_Platform_GetFriendsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetIntegratedPlatformInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetIntegratedPlatformInterfaceDelegate EOS_Platform_GetIntegratedPlatformInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetKWSInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetKWSInterfaceDelegate EOS_Platform_GetKWSInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetLeaderboardsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetLeaderboardsInterfaceDelegate EOS_Platform_GetLeaderboardsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetLobbyInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetLobbyInterfaceDelegate EOS_Platform_GetLobbyInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetMetricsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetMetricsInterfaceDelegate EOS_Platform_GetMetricsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetModsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetModsInterfaceDelegate EOS_Platform_GetModsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Platform.NetworkStatus EOS_Platform_GetNetworkStatusDelegate(IntPtr handle);
		internal static EOS_Platform_GetNetworkStatusDelegate EOS_Platform_GetNetworkStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_GetOverrideCountryCodeDelegate(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetOverrideCountryCodeDelegate EOS_Platform_GetOverrideCountryCode;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_GetOverrideLocaleCodeDelegate(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetOverrideLocaleCodeDelegate EOS_Platform_GetOverrideLocaleCode;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetP2PInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetP2PInterfaceDelegate EOS_Platform_GetP2PInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetPlayerDataStorageInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetPlayerDataStorageInterfaceDelegate EOS_Platform_GetPlayerDataStorageInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetPresenceInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetPresenceInterfaceDelegate EOS_Platform_GetPresenceInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetProgressionSnapshotInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetProgressionSnapshotInterfaceDelegate EOS_Platform_GetProgressionSnapshotInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetRTCAdminInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetRTCAdminInterfaceDelegate EOS_Platform_GetRTCAdminInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetRTCInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetRTCInterfaceDelegate EOS_Platform_GetRTCInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetReportsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetReportsInterfaceDelegate EOS_Platform_GetReportsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetSanctionsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetSanctionsInterfaceDelegate EOS_Platform_GetSanctionsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetSessionsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetSessionsInterfaceDelegate EOS_Platform_GetSessionsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetStatsInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetStatsInterfaceDelegate EOS_Platform_GetStatsInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetTitleStorageInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetTitleStorageInterfaceDelegate EOS_Platform_GetTitleStorageInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetUIInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetUIInterfaceDelegate EOS_Platform_GetUIInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_Platform_GetUserInfoInterfaceDelegate(IntPtr handle);
		internal static EOS_Platform_GetUserInfoInterfaceDelegate EOS_Platform_GetUserInfoInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Platform_ReleaseDelegate(IntPtr handle);
		internal static EOS_Platform_ReleaseDelegate EOS_Platform_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_SetApplicationStatusDelegate(IntPtr handle, Platform.ApplicationStatus newStatus);
		internal static EOS_Platform_SetApplicationStatusDelegate EOS_Platform_SetApplicationStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_SetNetworkStatusDelegate(IntPtr handle, Platform.NetworkStatus newStatus);
		internal static EOS_Platform_SetNetworkStatusDelegate EOS_Platform_SetNetworkStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_SetOverrideCountryCodeDelegate(IntPtr handle, IntPtr newCountryCode);
		internal static EOS_Platform_SetOverrideCountryCodeDelegate EOS_Platform_SetOverrideCountryCode;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Platform_SetOverrideLocaleCodeDelegate(IntPtr handle, IntPtr newLocaleCode);
		internal static EOS_Platform_SetOverrideLocaleCodeDelegate EOS_Platform_SetOverrideLocaleCode;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Platform_TickDelegate(IntPtr handle);
		internal static EOS_Platform_TickDelegate EOS_Platform_Tick;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorageFileTransferRequest_CancelRequestDelegate(IntPtr handle);
		internal static EOS_PlayerDataStorageFileTransferRequest_CancelRequestDelegate EOS_PlayerDataStorageFileTransferRequest_CancelRequest;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateDelegate(IntPtr handle);
		internal static EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateDelegate EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorageFileTransferRequest_GetFilenameDelegate(IntPtr handle, uint filenameStringBufferSizeBytes, IntPtr outStringBuffer, out int outStringLength);
		internal static EOS_PlayerDataStorageFileTransferRequest_GetFilenameDelegate EOS_PlayerDataStorageFileTransferRequest_GetFilename;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PlayerDataStorageFileTransferRequest_ReleaseDelegate(IntPtr playerDataStorageFileTransferHandle);
		internal static EOS_PlayerDataStorageFileTransferRequest_ReleaseDelegate EOS_PlayerDataStorageFileTransferRequest_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorage_CopyFileMetadataAtIndexDelegate(IntPtr handle, ref PlayerDataStorage.CopyFileMetadataAtIndexOptionsInternal copyFileMetadataOptions, out IntPtr outMetadata);
		internal static EOS_PlayerDataStorage_CopyFileMetadataAtIndexDelegate EOS_PlayerDataStorage_CopyFileMetadataAtIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorage_CopyFileMetadataByFilenameDelegate(IntPtr handle, ref PlayerDataStorage.CopyFileMetadataByFilenameOptionsInternal copyFileMetadataOptions, out IntPtr outMetadata);
		internal static EOS_PlayerDataStorage_CopyFileMetadataByFilenameDelegate EOS_PlayerDataStorage_CopyFileMetadataByFilename;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorage_DeleteCacheDelegate(IntPtr handle, ref PlayerDataStorage.DeleteCacheOptionsInternal options, IntPtr clientData, PlayerDataStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_DeleteCacheDelegate EOS_PlayerDataStorage_DeleteCache;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PlayerDataStorage_DeleteFileDelegate(IntPtr handle, ref PlayerDataStorage.DeleteFileOptionsInternal deleteOptions, IntPtr clientData, PlayerDataStorage.OnDeleteFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_DeleteFileDelegate EOS_PlayerDataStorage_DeleteFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PlayerDataStorage_DuplicateFileDelegate(IntPtr handle, ref PlayerDataStorage.DuplicateFileOptionsInternal duplicateOptions, IntPtr clientData, PlayerDataStorage.OnDuplicateFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_DuplicateFileDelegate EOS_PlayerDataStorage_DuplicateFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PlayerDataStorage_FileMetadata_ReleaseDelegate(IntPtr fileMetadata);
		internal static EOS_PlayerDataStorage_FileMetadata_ReleaseDelegate EOS_PlayerDataStorage_FileMetadata_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PlayerDataStorage_GetFileMetadataCountDelegate(IntPtr handle, ref PlayerDataStorage.GetFileMetadataCountOptionsInternal getFileMetadataCountOptions, out int outFileMetadataCount);
		internal static EOS_PlayerDataStorage_GetFileMetadataCountDelegate EOS_PlayerDataStorage_GetFileMetadataCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PlayerDataStorage_QueryFileDelegate(IntPtr handle, ref PlayerDataStorage.QueryFileOptionsInternal queryFileOptions, IntPtr clientData, PlayerDataStorage.OnQueryFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_QueryFileDelegate EOS_PlayerDataStorage_QueryFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PlayerDataStorage_QueryFileListDelegate(IntPtr handle, ref PlayerDataStorage.QueryFileListOptionsInternal queryFileListOptions, IntPtr clientData, PlayerDataStorage.OnQueryFileListCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_QueryFileListDelegate EOS_PlayerDataStorage_QueryFileList;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_PlayerDataStorage_ReadFileDelegate(IntPtr handle, ref PlayerDataStorage.ReadFileOptionsInternal readOptions, IntPtr clientData, PlayerDataStorage.OnReadFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_ReadFileDelegate EOS_PlayerDataStorage_ReadFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_PlayerDataStorage_WriteFileDelegate(IntPtr handle, ref PlayerDataStorage.WriteFileOptionsInternal writeOptions, IntPtr clientData, PlayerDataStorage.OnWriteFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_WriteFileDelegate EOS_PlayerDataStorage_WriteFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PresenceModification_DeleteDataDelegate(IntPtr handle, ref Presence.PresenceModificationDeleteDataOptionsInternal options);
		internal static EOS_PresenceModification_DeleteDataDelegate EOS_PresenceModification_DeleteData;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_PresenceModification_ReleaseDelegate(IntPtr presenceModificationHandle);
		internal static EOS_PresenceModification_ReleaseDelegate EOS_PresenceModification_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PresenceModification_SetDataDelegate(IntPtr handle, ref Presence.PresenceModificationSetDataOptionsInternal options);
		internal static EOS_PresenceModification_SetDataDelegate EOS_PresenceModification_SetData;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PresenceModification_SetJoinInfoDelegate(IntPtr handle, ref Presence.PresenceModificationSetJoinInfoOptionsInternal options);
		internal static EOS_PresenceModification_SetJoinInfoDelegate EOS_PresenceModification_SetJoinInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PresenceModification_SetRawRichTextDelegate(IntPtr handle, ref Presence.PresenceModificationSetRawRichTextOptionsInternal options);
		internal static EOS_PresenceModification_SetRawRichTextDelegate EOS_PresenceModification_SetRawRichText;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_PresenceModification_SetStatusDelegate(IntPtr handle, ref Presence.PresenceModificationSetStatusOptionsInternal options);
		internal static EOS_PresenceModification_SetStatusDelegate EOS_PresenceModification_SetStatus;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Presence_AddNotifyJoinGameAcceptedDelegate(IntPtr handle, ref Presence.AddNotifyJoinGameAcceptedOptionsInternal options, IntPtr clientData, Presence.OnJoinGameAcceptedCallbackInternal notificationFn);
		internal static EOS_Presence_AddNotifyJoinGameAcceptedDelegate EOS_Presence_AddNotifyJoinGameAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Presence_AddNotifyOnPresenceChangedDelegate(IntPtr handle, ref Presence.AddNotifyOnPresenceChangedOptionsInternal options, IntPtr clientData, Presence.OnPresenceChangedCallbackInternal notificationHandler);
		internal static EOS_Presence_AddNotifyOnPresenceChangedDelegate EOS_Presence_AddNotifyOnPresenceChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Presence_CopyPresenceDelegate(IntPtr handle, ref Presence.CopyPresenceOptionsInternal options, out IntPtr outPresence);
		internal static EOS_Presence_CopyPresenceDelegate EOS_Presence_CopyPresence;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Presence_CreatePresenceModificationDelegate(IntPtr handle, ref Presence.CreatePresenceModificationOptionsInternal options, out IntPtr outPresenceModificationHandle);
		internal static EOS_Presence_CreatePresenceModificationDelegate EOS_Presence_CreatePresenceModification;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Presence_GetJoinInfoDelegate(IntPtr handle, ref Presence.GetJoinInfoOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Presence_GetJoinInfoDelegate EOS_Presence_GetJoinInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_Presence_HasPresenceDelegate(IntPtr handle, ref Presence.HasPresenceOptionsInternal options);
		internal static EOS_Presence_HasPresenceDelegate EOS_Presence_HasPresence;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Presence_Info_ReleaseDelegate(IntPtr presenceInfo);
		internal static EOS_Presence_Info_ReleaseDelegate EOS_Presence_Info_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Presence_QueryPresenceDelegate(IntPtr handle, ref Presence.QueryPresenceOptionsInternal options, IntPtr clientData, Presence.OnQueryPresenceCompleteCallbackInternal completionDelegate);
		internal static EOS_Presence_QueryPresenceDelegate EOS_Presence_QueryPresence;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Presence_RemoveNotifyJoinGameAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Presence_RemoveNotifyJoinGameAcceptedDelegate EOS_Presence_RemoveNotifyJoinGameAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Presence_RemoveNotifyOnPresenceChangedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_Presence_RemoveNotifyOnPresenceChangedDelegate EOS_Presence_RemoveNotifyOnPresenceChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Presence_SetPresenceDelegate(IntPtr handle, ref Presence.SetPresenceOptionsInternal options, IntPtr clientData, Presence.SetPresenceCompleteCallbackInternal completionDelegate);
		internal static EOS_Presence_SetPresenceDelegate EOS_Presence_SetPresence;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_ProductUserId_FromStringDelegate(IntPtr productUserIdString);
		internal static EOS_ProductUserId_FromStringDelegate EOS_ProductUserId_FromString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_ProductUserId_IsValidDelegate(IntPtr accountId);
		internal static EOS_ProductUserId_IsValidDelegate EOS_ProductUserId_IsValid;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ProductUserId_ToStringDelegate(IntPtr accountId, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_ProductUserId_ToStringDelegate EOS_ProductUserId_ToString;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ProgressionSnapshot_AddProgressionDelegate(IntPtr handle, ref ProgressionSnapshot.AddProgressionOptionsInternal options);
		internal static EOS_ProgressionSnapshot_AddProgressionDelegate EOS_ProgressionSnapshot_AddProgression;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ProgressionSnapshot_BeginSnapshotDelegate(IntPtr handle, ref ProgressionSnapshot.BeginSnapshotOptionsInternal options, out uint outSnapshotId);
		internal static EOS_ProgressionSnapshot_BeginSnapshotDelegate EOS_ProgressionSnapshot_BeginSnapshot;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_ProgressionSnapshot_DeleteSnapshotDelegate(IntPtr handle, ref ProgressionSnapshot.DeleteSnapshotOptionsInternal options, IntPtr clientData, ProgressionSnapshot.OnDeleteSnapshotCallbackInternal completionDelegate);
		internal static EOS_ProgressionSnapshot_DeleteSnapshotDelegate EOS_ProgressionSnapshot_DeleteSnapshot;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ProgressionSnapshot_EndSnapshotDelegate(IntPtr handle, ref ProgressionSnapshot.EndSnapshotOptionsInternal options);
		internal static EOS_ProgressionSnapshot_EndSnapshotDelegate EOS_ProgressionSnapshot_EndSnapshot;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_ProgressionSnapshot_SubmitSnapshotDelegate(IntPtr handle, ref ProgressionSnapshot.SubmitSnapshotOptionsInternal options, IntPtr clientData, ProgressionSnapshot.OnSubmitSnapshotCallbackInternal completionDelegate);
		internal static EOS_ProgressionSnapshot_SubmitSnapshotDelegate EOS_ProgressionSnapshot_SubmitSnapshot;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAdmin_CopyUserTokenByIndexDelegate(IntPtr handle, ref RTCAdmin.CopyUserTokenByIndexOptionsInternal options, out IntPtr outUserToken);
		internal static EOS_RTCAdmin_CopyUserTokenByIndexDelegate EOS_RTCAdmin_CopyUserTokenByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAdmin_CopyUserTokenByUserIdDelegate(IntPtr handle, ref RTCAdmin.CopyUserTokenByUserIdOptionsInternal options, out IntPtr outUserToken);
		internal static EOS_RTCAdmin_CopyUserTokenByUserIdDelegate EOS_RTCAdmin_CopyUserTokenByUserId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAdmin_KickDelegate(IntPtr handle, ref RTCAdmin.KickOptionsInternal options, IntPtr clientData, RTCAdmin.OnKickCompleteCallbackInternal completionDelegate);
		internal static EOS_RTCAdmin_KickDelegate EOS_RTCAdmin_Kick;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAdmin_QueryJoinRoomTokenDelegate(IntPtr handle, ref RTCAdmin.QueryJoinRoomTokenOptionsInternal options, IntPtr clientData, RTCAdmin.OnQueryJoinRoomTokenCompleteCallbackInternal completionDelegate);
		internal static EOS_RTCAdmin_QueryJoinRoomTokenDelegate EOS_RTCAdmin_QueryJoinRoomToken;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAdmin_SetParticipantHardMuteDelegate(IntPtr handle, ref RTCAdmin.SetParticipantHardMuteOptionsInternal options, IntPtr clientData, RTCAdmin.OnSetParticipantHardMuteCompleteCallbackInternal completionDelegate);
		internal static EOS_RTCAdmin_SetParticipantHardMuteDelegate EOS_RTCAdmin_SetParticipantHardMute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAdmin_UserToken_ReleaseDelegate(IntPtr userToken);
		internal static EOS_RTCAdmin_UserToken_ReleaseDelegate EOS_RTCAdmin_UserToken_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioBeforeRenderDelegate(IntPtr handle, ref RTCAudio.AddNotifyAudioBeforeRenderOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioBeforeRenderCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioBeforeRenderDelegate EOS_RTCAudio_AddNotifyAudioBeforeRender;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioBeforeSendDelegate(IntPtr handle, ref RTCAudio.AddNotifyAudioBeforeSendOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioBeforeSendCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioBeforeSendDelegate EOS_RTCAudio_AddNotifyAudioBeforeSend;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioDevicesChangedDelegate(IntPtr handle, ref RTCAudio.AddNotifyAudioDevicesChangedOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioDevicesChangedCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioDevicesChangedDelegate EOS_RTCAudio_AddNotifyAudioDevicesChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioInputStateDelegate(IntPtr handle, ref RTCAudio.AddNotifyAudioInputStateOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioInputStateCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioInputStateDelegate EOS_RTCAudio_AddNotifyAudioInputState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioOutputStateDelegate(IntPtr handle, ref RTCAudio.AddNotifyAudioOutputStateOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioOutputStateCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioOutputStateDelegate EOS_RTCAudio_AddNotifyAudioOutputState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCAudio_AddNotifyParticipantUpdatedDelegate(IntPtr handle, ref RTCAudio.AddNotifyParticipantUpdatedOptionsInternal options, IntPtr clientData, RTCAudio.OnParticipantUpdatedCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyParticipantUpdatedDelegate EOS_RTCAudio_AddNotifyParticipantUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_CopyInputDeviceInformationByIndexDelegate(IntPtr handle, ref RTCAudio.CopyInputDeviceInformationByIndexOptionsInternal options, out IntPtr outInputDeviceInformation);
		internal static EOS_RTCAudio_CopyInputDeviceInformationByIndexDelegate EOS_RTCAudio_CopyInputDeviceInformationByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_CopyOutputDeviceInformationByIndexDelegate(IntPtr handle, ref RTCAudio.CopyOutputDeviceInformationByIndexOptionsInternal options, out IntPtr outOutputDeviceInformation);
		internal static EOS_RTCAudio_CopyOutputDeviceInformationByIndexDelegate EOS_RTCAudio_CopyOutputDeviceInformationByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_RTCAudio_GetAudioInputDeviceByIndexDelegate(IntPtr handle, ref RTCAudio.GetAudioInputDeviceByIndexOptionsInternal options);
		internal static EOS_RTCAudio_GetAudioInputDeviceByIndexDelegate EOS_RTCAudio_GetAudioInputDeviceByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_RTCAudio_GetAudioInputDevicesCountDelegate(IntPtr handle, ref RTCAudio.GetAudioInputDevicesCountOptionsInternal options);
		internal static EOS_RTCAudio_GetAudioInputDevicesCountDelegate EOS_RTCAudio_GetAudioInputDevicesCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_RTCAudio_GetAudioOutputDeviceByIndexDelegate(IntPtr handle, ref RTCAudio.GetAudioOutputDeviceByIndexOptionsInternal options);
		internal static EOS_RTCAudio_GetAudioOutputDeviceByIndexDelegate EOS_RTCAudio_GetAudioOutputDeviceByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_RTCAudio_GetAudioOutputDevicesCountDelegate(IntPtr handle, ref RTCAudio.GetAudioOutputDevicesCountOptionsInternal options);
		internal static EOS_RTCAudio_GetAudioOutputDevicesCountDelegate EOS_RTCAudio_GetAudioOutputDevicesCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_RTCAudio_GetInputDevicesCountDelegate(IntPtr handle, ref RTCAudio.GetInputDevicesCountOptionsInternal options);
		internal static EOS_RTCAudio_GetInputDevicesCountDelegate EOS_RTCAudio_GetInputDevicesCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_RTCAudio_GetOutputDevicesCountDelegate(IntPtr handle, ref RTCAudio.GetOutputDevicesCountOptionsInternal options);
		internal static EOS_RTCAudio_GetOutputDevicesCountDelegate EOS_RTCAudio_GetOutputDevicesCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_InputDeviceInformation_ReleaseDelegate(IntPtr deviceInformation);
		internal static EOS_RTCAudio_InputDeviceInformation_ReleaseDelegate EOS_RTCAudio_InputDeviceInformation_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_OutputDeviceInformation_ReleaseDelegate(IntPtr deviceInformation);
		internal static EOS_RTCAudio_OutputDeviceInformation_ReleaseDelegate EOS_RTCAudio_OutputDeviceInformation_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_QueryInputDevicesInformationDelegate(IntPtr handle, ref RTCAudio.QueryInputDevicesInformationOptionsInternal options, IntPtr clientData, RTCAudio.OnQueryInputDevicesInformationCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_QueryInputDevicesInformationDelegate EOS_RTCAudio_QueryInputDevicesInformation;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_QueryOutputDevicesInformationDelegate(IntPtr handle, ref RTCAudio.QueryOutputDevicesInformationOptionsInternal options, IntPtr clientData, RTCAudio.OnQueryOutputDevicesInformationCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_QueryOutputDevicesInformationDelegate EOS_RTCAudio_QueryOutputDevicesInformation;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_RegisterPlatformAudioUserDelegate(IntPtr handle, ref RTCAudio.RegisterPlatformAudioUserOptionsInternal options);
		internal static EOS_RTCAudio_RegisterPlatformAudioUserDelegate EOS_RTCAudio_RegisterPlatformAudioUser;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RegisterPlatformUserDelegate(IntPtr handle, ref RTCAudio.RegisterPlatformUserOptionsInternal options, IntPtr clientData, RTCAudio.OnRegisterPlatformUserCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_RegisterPlatformUserDelegate EOS_RTCAudio_RegisterPlatformUser;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioBeforeRenderDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioBeforeRenderDelegate EOS_RTCAudio_RemoveNotifyAudioBeforeRender;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioBeforeSendDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioBeforeSendDelegate EOS_RTCAudio_RemoveNotifyAudioBeforeSend;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioDevicesChangedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioDevicesChangedDelegate EOS_RTCAudio_RemoveNotifyAudioDevicesChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioInputStateDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioInputStateDelegate EOS_RTCAudio_RemoveNotifyAudioInputState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioOutputStateDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioOutputStateDelegate EOS_RTCAudio_RemoveNotifyAudioOutputState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_RemoveNotifyParticipantUpdatedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyParticipantUpdatedDelegate EOS_RTCAudio_RemoveNotifyParticipantUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_SendAudioDelegate(IntPtr handle, ref RTCAudio.SendAudioOptionsInternal options);
		internal static EOS_RTCAudio_SendAudioDelegate EOS_RTCAudio_SendAudio;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_SetAudioInputSettingsDelegate(IntPtr handle, ref RTCAudio.SetAudioInputSettingsOptionsInternal options);
		internal static EOS_RTCAudio_SetAudioInputSettingsDelegate EOS_RTCAudio_SetAudioInputSettings;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_SetAudioOutputSettingsDelegate(IntPtr handle, ref RTCAudio.SetAudioOutputSettingsOptionsInternal options);
		internal static EOS_RTCAudio_SetAudioOutputSettingsDelegate EOS_RTCAudio_SetAudioOutputSettings;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_SetInputDeviceSettingsDelegate(IntPtr handle, ref RTCAudio.SetInputDeviceSettingsOptionsInternal options, IntPtr clientData, RTCAudio.OnSetInputDeviceSettingsCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_SetInputDeviceSettingsDelegate EOS_RTCAudio_SetInputDeviceSettings;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_SetOutputDeviceSettingsDelegate(IntPtr handle, ref RTCAudio.SetOutputDeviceSettingsOptionsInternal options, IntPtr clientData, RTCAudio.OnSetOutputDeviceSettingsCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_SetOutputDeviceSettingsDelegate EOS_RTCAudio_SetOutputDeviceSettings;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCAudio_UnregisterPlatformAudioUserDelegate(IntPtr handle, ref RTCAudio.UnregisterPlatformAudioUserOptionsInternal options);
		internal static EOS_RTCAudio_UnregisterPlatformAudioUserDelegate EOS_RTCAudio_UnregisterPlatformAudioUser;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_UnregisterPlatformUserDelegate(IntPtr handle, ref RTCAudio.UnregisterPlatformUserOptionsInternal options, IntPtr clientData, RTCAudio.OnUnregisterPlatformUserCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UnregisterPlatformUserDelegate EOS_RTCAudio_UnregisterPlatformUser;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_UpdateParticipantVolumeDelegate(IntPtr handle, ref RTCAudio.UpdateParticipantVolumeOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateParticipantVolumeCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateParticipantVolumeDelegate EOS_RTCAudio_UpdateParticipantVolume;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_UpdateReceivingDelegate(IntPtr handle, ref RTCAudio.UpdateReceivingOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateReceivingCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateReceivingDelegate EOS_RTCAudio_UpdateReceiving;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_UpdateReceivingVolumeDelegate(IntPtr handle, ref RTCAudio.UpdateReceivingVolumeOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateReceivingVolumeCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateReceivingVolumeDelegate EOS_RTCAudio_UpdateReceivingVolume;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_UpdateSendingDelegate(IntPtr handle, ref RTCAudio.UpdateSendingOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateSendingCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateSendingDelegate EOS_RTCAudio_UpdateSending;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCAudio_UpdateSendingVolumeDelegate(IntPtr handle, ref RTCAudio.UpdateSendingVolumeOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateSendingVolumeCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateSendingVolumeDelegate EOS_RTCAudio_UpdateSendingVolume;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCData_AddNotifyDataReceivedDelegate(IntPtr handle, ref RTCData.AddNotifyDataReceivedOptionsInternal options, IntPtr clientData, RTCData.OnDataReceivedCallbackInternal completionDelegate);
		internal static EOS_RTCData_AddNotifyDataReceivedDelegate EOS_RTCData_AddNotifyDataReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTCData_AddNotifyParticipantUpdatedDelegate(IntPtr handle, ref RTCData.AddNotifyParticipantUpdatedOptionsInternal options, IntPtr clientData, RTCData.OnParticipantUpdatedCallbackInternal completionDelegate);
		internal static EOS_RTCData_AddNotifyParticipantUpdatedDelegate EOS_RTCData_AddNotifyParticipantUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCData_RemoveNotifyDataReceivedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCData_RemoveNotifyDataReceivedDelegate EOS_RTCData_RemoveNotifyDataReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCData_RemoveNotifyParticipantUpdatedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTCData_RemoveNotifyParticipantUpdatedDelegate EOS_RTCData_RemoveNotifyParticipantUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTCData_SendDataDelegate(IntPtr handle, ref RTCData.SendDataOptionsInternal options);
		internal static EOS_RTCData_SendDataDelegate EOS_RTCData_SendData;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCData_UpdateReceivingDelegate(IntPtr handle, ref RTCData.UpdateReceivingOptionsInternal options, IntPtr clientData, RTCData.OnUpdateReceivingCallbackInternal completionDelegate);
		internal static EOS_RTCData_UpdateReceivingDelegate EOS_RTCData_UpdateReceiving;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTCData_UpdateSendingDelegate(IntPtr handle, ref RTCData.UpdateSendingOptionsInternal options, IntPtr clientData, RTCData.OnUpdateSendingCallbackInternal completionDelegate);
		internal static EOS_RTCData_UpdateSendingDelegate EOS_RTCData_UpdateSending;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTC_AddNotifyDisconnectedDelegate(IntPtr handle, ref RTC.AddNotifyDisconnectedOptionsInternal options, IntPtr clientData, RTC.OnDisconnectedCallbackInternal completionDelegate);
		internal static EOS_RTC_AddNotifyDisconnectedDelegate EOS_RTC_AddNotifyDisconnected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTC_AddNotifyParticipantStatusChangedDelegate(IntPtr handle, ref RTC.AddNotifyParticipantStatusChangedOptionsInternal options, IntPtr clientData, RTC.OnParticipantStatusChangedCallbackInternal completionDelegate);
		internal static EOS_RTC_AddNotifyParticipantStatusChangedDelegate EOS_RTC_AddNotifyParticipantStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_RTC_AddNotifyRoomStatisticsUpdatedDelegate(IntPtr handle, ref RTC.AddNotifyRoomStatisticsUpdatedOptionsInternal options, IntPtr clientData, RTC.OnRoomStatisticsUpdatedCallbackInternal statisticsUpdateHandler);
		internal static EOS_RTC_AddNotifyRoomStatisticsUpdatedDelegate EOS_RTC_AddNotifyRoomStatisticsUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTC_BlockParticipantDelegate(IntPtr handle, ref RTC.BlockParticipantOptionsInternal options, IntPtr clientData, RTC.OnBlockParticipantCallbackInternal completionDelegate);
		internal static EOS_RTC_BlockParticipantDelegate EOS_RTC_BlockParticipant;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_RTC_GetAudioInterfaceDelegate(IntPtr handle);
		internal static EOS_RTC_GetAudioInterfaceDelegate EOS_RTC_GetAudioInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_RTC_GetDataInterfaceDelegate(IntPtr handle);
		internal static EOS_RTC_GetDataInterfaceDelegate EOS_RTC_GetDataInterface;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTC_JoinRoomDelegate(IntPtr handle, ref RTC.JoinRoomOptionsInternal options, IntPtr clientData, RTC.OnJoinRoomCallbackInternal completionDelegate);
		internal static EOS_RTC_JoinRoomDelegate EOS_RTC_JoinRoom;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTC_LeaveRoomDelegate(IntPtr handle, ref RTC.LeaveRoomOptionsInternal options, IntPtr clientData, RTC.OnLeaveRoomCallbackInternal completionDelegate);
		internal static EOS_RTC_LeaveRoomDelegate EOS_RTC_LeaveRoom;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTC_RemoveNotifyDisconnectedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTC_RemoveNotifyDisconnectedDelegate EOS_RTC_RemoveNotifyDisconnected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTC_RemoveNotifyParticipantStatusChangedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTC_RemoveNotifyParticipantStatusChangedDelegate EOS_RTC_RemoveNotifyParticipantStatusChanged;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_RTC_RemoveNotifyRoomStatisticsUpdatedDelegate(IntPtr handle, ulong notificationId);
		internal static EOS_RTC_RemoveNotifyRoomStatisticsUpdatedDelegate EOS_RTC_RemoveNotifyRoomStatisticsUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTC_SetRoomSettingDelegate(IntPtr handle, ref RTC.SetRoomSettingOptionsInternal options);
		internal static EOS_RTC_SetRoomSettingDelegate EOS_RTC_SetRoomSetting;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_RTC_SetSettingDelegate(IntPtr handle, ref RTC.SetSettingOptionsInternal options);
		internal static EOS_RTC_SetSettingDelegate EOS_RTC_SetSetting;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Reports_SendPlayerBehaviorReportDelegate(IntPtr handle, ref Reports.SendPlayerBehaviorReportOptionsInternal options, IntPtr clientData, Reports.OnSendPlayerBehaviorReportCompleteCallbackInternal completionDelegate);
		internal static EOS_Reports_SendPlayerBehaviorReportDelegate EOS_Reports_SendPlayerBehaviorReport;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sanctions_CopyPlayerSanctionByIndexDelegate(IntPtr handle, ref Sanctions.CopyPlayerSanctionByIndexOptionsInternal options, out IntPtr outSanction);
		internal static EOS_Sanctions_CopyPlayerSanctionByIndexDelegate EOS_Sanctions_CopyPlayerSanctionByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sanctions_CreatePlayerSanctionAppealDelegate(IntPtr handle, ref Sanctions.CreatePlayerSanctionAppealOptionsInternal options, IntPtr clientData, Sanctions.CreatePlayerSanctionAppealCallbackInternal completionDelegate);
		internal static EOS_Sanctions_CreatePlayerSanctionAppealDelegate EOS_Sanctions_CreatePlayerSanctionAppeal;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Sanctions_GetPlayerSanctionCountDelegate(IntPtr handle, ref Sanctions.GetPlayerSanctionCountOptionsInternal options);
		internal static EOS_Sanctions_GetPlayerSanctionCountDelegate EOS_Sanctions_GetPlayerSanctionCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sanctions_PlayerSanction_ReleaseDelegate(IntPtr sanction);
		internal static EOS_Sanctions_PlayerSanction_ReleaseDelegate EOS_Sanctions_PlayerSanction_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sanctions_QueryActivePlayerSanctionsDelegate(IntPtr handle, ref Sanctions.QueryActivePlayerSanctionsOptionsInternal options, IntPtr clientData, Sanctions.OnQueryActivePlayerSanctionsCallbackInternal completionDelegate);
		internal static EOS_Sanctions_QueryActivePlayerSanctionsDelegate EOS_Sanctions_QueryActivePlayerSanctions;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_SessionDetails_Attribute_ReleaseDelegate(IntPtr sessionAttribute);
		internal static EOS_SessionDetails_Attribute_ReleaseDelegate EOS_SessionDetails_Attribute_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionDetails_CopyInfoDelegate(IntPtr handle, ref Sessions.SessionDetailsCopyInfoOptionsInternal options, out IntPtr outSessionInfo);
		internal static EOS_SessionDetails_CopyInfoDelegate EOS_SessionDetails_CopyInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionDetails_CopySessionAttributeByIndexDelegate(IntPtr handle, ref Sessions.SessionDetailsCopySessionAttributeByIndexOptionsInternal options, out IntPtr outSessionAttribute);
		internal static EOS_SessionDetails_CopySessionAttributeByIndexDelegate EOS_SessionDetails_CopySessionAttributeByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionDetails_CopySessionAttributeByKeyDelegate(IntPtr handle, ref Sessions.SessionDetailsCopySessionAttributeByKeyOptionsInternal options, out IntPtr outSessionAttribute);
		internal static EOS_SessionDetails_CopySessionAttributeByKeyDelegate EOS_SessionDetails_CopySessionAttributeByKey;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_SessionDetails_GetSessionAttributeCountDelegate(IntPtr handle, ref Sessions.SessionDetailsGetSessionAttributeCountOptionsInternal options);
		internal static EOS_SessionDetails_GetSessionAttributeCountDelegate EOS_SessionDetails_GetSessionAttributeCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_SessionDetails_Info_ReleaseDelegate(IntPtr sessionInfo);
		internal static EOS_SessionDetails_Info_ReleaseDelegate EOS_SessionDetails_Info_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_SessionDetails_ReleaseDelegate(IntPtr sessionHandle);
		internal static EOS_SessionDetails_ReleaseDelegate EOS_SessionDetails_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_AddAttributeDelegate(IntPtr handle, ref Sessions.SessionModificationAddAttributeOptionsInternal options);
		internal static EOS_SessionModification_AddAttributeDelegate EOS_SessionModification_AddAttribute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_SessionModification_ReleaseDelegate(IntPtr sessionModificationHandle);
		internal static EOS_SessionModification_ReleaseDelegate EOS_SessionModification_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_RemoveAttributeDelegate(IntPtr handle, ref Sessions.SessionModificationRemoveAttributeOptionsInternal options);
		internal static EOS_SessionModification_RemoveAttributeDelegate EOS_SessionModification_RemoveAttribute;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetAllowedPlatformIdsDelegate(IntPtr handle, ref Sessions.SessionModificationSetAllowedPlatformIdsOptionsInternal options);
		internal static EOS_SessionModification_SetAllowedPlatformIdsDelegate EOS_SessionModification_SetAllowedPlatformIds;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetBucketIdDelegate(IntPtr handle, ref Sessions.SessionModificationSetBucketIdOptionsInternal options);
		internal static EOS_SessionModification_SetBucketIdDelegate EOS_SessionModification_SetBucketId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetHostAddressDelegate(IntPtr handle, ref Sessions.SessionModificationSetHostAddressOptionsInternal options);
		internal static EOS_SessionModification_SetHostAddressDelegate EOS_SessionModification_SetHostAddress;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetInvitesAllowedDelegate(IntPtr handle, ref Sessions.SessionModificationSetInvitesAllowedOptionsInternal options);
		internal static EOS_SessionModification_SetInvitesAllowedDelegate EOS_SessionModification_SetInvitesAllowed;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetJoinInProgressAllowedDelegate(IntPtr handle, ref Sessions.SessionModificationSetJoinInProgressAllowedOptionsInternal options);
		internal static EOS_SessionModification_SetJoinInProgressAllowedDelegate EOS_SessionModification_SetJoinInProgressAllowed;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetMaxPlayersDelegate(IntPtr handle, ref Sessions.SessionModificationSetMaxPlayersOptionsInternal options);
		internal static EOS_SessionModification_SetMaxPlayersDelegate EOS_SessionModification_SetMaxPlayers;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionModification_SetPermissionLevelDelegate(IntPtr handle, ref Sessions.SessionModificationSetPermissionLevelOptionsInternal options);
		internal static EOS_SessionModification_SetPermissionLevelDelegate EOS_SessionModification_SetPermissionLevel;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionSearch_CopySearchResultByIndexDelegate(IntPtr handle, ref Sessions.SessionSearchCopySearchResultByIndexOptionsInternal options, out IntPtr outSessionHandle);
		internal static EOS_SessionSearch_CopySearchResultByIndexDelegate EOS_SessionSearch_CopySearchResultByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_SessionSearch_FindDelegate(IntPtr handle, ref Sessions.SessionSearchFindOptionsInternal options, IntPtr clientData, Sessions.SessionSearchOnFindCallbackInternal completionDelegate);
		internal static EOS_SessionSearch_FindDelegate EOS_SessionSearch_Find;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_SessionSearch_GetSearchResultCountDelegate(IntPtr handle, ref Sessions.SessionSearchGetSearchResultCountOptionsInternal options);
		internal static EOS_SessionSearch_GetSearchResultCountDelegate EOS_SessionSearch_GetSearchResultCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_SessionSearch_ReleaseDelegate(IntPtr sessionSearchHandle);
		internal static EOS_SessionSearch_ReleaseDelegate EOS_SessionSearch_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionSearch_RemoveParameterDelegate(IntPtr handle, ref Sessions.SessionSearchRemoveParameterOptionsInternal options);
		internal static EOS_SessionSearch_RemoveParameterDelegate EOS_SessionSearch_RemoveParameter;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionSearch_SetMaxResultsDelegate(IntPtr handle, ref Sessions.SessionSearchSetMaxResultsOptionsInternal options);
		internal static EOS_SessionSearch_SetMaxResultsDelegate EOS_SessionSearch_SetMaxResults;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionSearch_SetParameterDelegate(IntPtr handle, ref Sessions.SessionSearchSetParameterOptionsInternal options);
		internal static EOS_SessionSearch_SetParameterDelegate EOS_SessionSearch_SetParameter;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionSearch_SetSessionIdDelegate(IntPtr handle, ref Sessions.SessionSearchSetSessionIdOptionsInternal options);
		internal static EOS_SessionSearch_SetSessionIdDelegate EOS_SessionSearch_SetSessionId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_SessionSearch_SetTargetUserIdDelegate(IntPtr handle, ref Sessions.SessionSearchSetTargetUserIdOptionsInternal options);
		internal static EOS_SessionSearch_SetTargetUserIdDelegate EOS_SessionSearch_SetTargetUserId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Sessions_AddNotifyJoinSessionAcceptedDelegate(IntPtr handle, ref Sessions.AddNotifyJoinSessionAcceptedOptionsInternal options, IntPtr clientData, Sessions.OnJoinSessionAcceptedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifyJoinSessionAcceptedDelegate EOS_Sessions_AddNotifyJoinSessionAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Sessions_AddNotifyLeaveSessionRequestedDelegate(IntPtr handle, ref Sessions.AddNotifyLeaveSessionRequestedOptionsInternal options, IntPtr clientData, Sessions.OnLeaveSessionRequestedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifyLeaveSessionRequestedDelegate EOS_Sessions_AddNotifyLeaveSessionRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Sessions_AddNotifySendSessionNativeInviteRequestedDelegate(IntPtr handle, ref Sessions.AddNotifySendSessionNativeInviteRequestedOptionsInternal options, IntPtr clientData, Sessions.OnSendSessionNativeInviteRequestedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifySendSessionNativeInviteRequestedDelegate EOS_Sessions_AddNotifySendSessionNativeInviteRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Sessions_AddNotifySessionInviteAcceptedDelegate(IntPtr handle, ref Sessions.AddNotifySessionInviteAcceptedOptionsInternal options, IntPtr clientData, Sessions.OnSessionInviteAcceptedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifySessionInviteAcceptedDelegate EOS_Sessions_AddNotifySessionInviteAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Sessions_AddNotifySessionInviteReceivedDelegate(IntPtr handle, ref Sessions.AddNotifySessionInviteReceivedOptionsInternal options, IntPtr clientData, Sessions.OnSessionInviteReceivedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifySessionInviteReceivedDelegate EOS_Sessions_AddNotifySessionInviteReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_Sessions_AddNotifySessionInviteRejectedDelegate(IntPtr handle, ref Sessions.AddNotifySessionInviteRejectedOptionsInternal options, IntPtr clientData, Sessions.OnSessionInviteRejectedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifySessionInviteRejectedDelegate EOS_Sessions_AddNotifySessionInviteRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_CopyActiveSessionHandleDelegate(IntPtr handle, ref Sessions.CopyActiveSessionHandleOptionsInternal options, out IntPtr outSessionHandle);
		internal static EOS_Sessions_CopyActiveSessionHandleDelegate EOS_Sessions_CopyActiveSessionHandle;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_CopySessionHandleByInviteIdDelegate(IntPtr handle, ref Sessions.CopySessionHandleByInviteIdOptionsInternal options, out IntPtr outSessionHandle);
		internal static EOS_Sessions_CopySessionHandleByInviteIdDelegate EOS_Sessions_CopySessionHandleByInviteId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_CopySessionHandleByUiEventIdDelegate(IntPtr handle, ref Sessions.CopySessionHandleByUiEventIdOptionsInternal options, out IntPtr outSessionHandle);
		internal static EOS_Sessions_CopySessionHandleByUiEventIdDelegate EOS_Sessions_CopySessionHandleByUiEventId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_CopySessionHandleForPresenceDelegate(IntPtr handle, ref Sessions.CopySessionHandleForPresenceOptionsInternal options, out IntPtr outSessionHandle);
		internal static EOS_Sessions_CopySessionHandleForPresenceDelegate EOS_Sessions_CopySessionHandleForPresence;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_CreateSessionModificationDelegate(IntPtr handle, ref Sessions.CreateSessionModificationOptionsInternal options, out IntPtr outSessionModificationHandle);
		internal static EOS_Sessions_CreateSessionModificationDelegate EOS_Sessions_CreateSessionModification;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_CreateSessionSearchDelegate(IntPtr handle, ref Sessions.CreateSessionSearchOptionsInternal options, out IntPtr outSessionSearchHandle);
		internal static EOS_Sessions_CreateSessionSearchDelegate EOS_Sessions_CreateSessionSearch;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_DestroySessionDelegate(IntPtr handle, ref Sessions.DestroySessionOptionsInternal options, IntPtr clientData, Sessions.OnDestroySessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_DestroySessionDelegate EOS_Sessions_DestroySession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_DumpSessionStateDelegate(IntPtr handle, ref Sessions.DumpSessionStateOptionsInternal options);
		internal static EOS_Sessions_DumpSessionStateDelegate EOS_Sessions_DumpSessionState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_EndSessionDelegate(IntPtr handle, ref Sessions.EndSessionOptionsInternal options, IntPtr clientData, Sessions.OnEndSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_EndSessionDelegate EOS_Sessions_EndSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Sessions_GetInviteCountDelegate(IntPtr handle, ref Sessions.GetInviteCountOptionsInternal options);
		internal static EOS_Sessions_GetInviteCountDelegate EOS_Sessions_GetInviteCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_GetInviteIdByIndexDelegate(IntPtr handle, ref Sessions.GetInviteIdByIndexOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Sessions_GetInviteIdByIndexDelegate EOS_Sessions_GetInviteIdByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_IsUserInSessionDelegate(IntPtr handle, ref Sessions.IsUserInSessionOptionsInternal options);
		internal static EOS_Sessions_IsUserInSessionDelegate EOS_Sessions_IsUserInSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_JoinSessionDelegate(IntPtr handle, ref Sessions.JoinSessionOptionsInternal options, IntPtr clientData, Sessions.OnJoinSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_JoinSessionDelegate EOS_Sessions_JoinSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_QueryInvitesDelegate(IntPtr handle, ref Sessions.QueryInvitesOptionsInternal options, IntPtr clientData, Sessions.OnQueryInvitesCallbackInternal completionDelegate);
		internal static EOS_Sessions_QueryInvitesDelegate EOS_Sessions_QueryInvites;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RegisterPlayersDelegate(IntPtr handle, ref Sessions.RegisterPlayersOptionsInternal options, IntPtr clientData, Sessions.OnRegisterPlayersCallbackInternal completionDelegate);
		internal static EOS_Sessions_RegisterPlayersDelegate EOS_Sessions_RegisterPlayers;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RejectInviteDelegate(IntPtr handle, ref Sessions.RejectInviteOptionsInternal options, IntPtr clientData, Sessions.OnRejectInviteCallbackInternal completionDelegate);
		internal static EOS_Sessions_RejectInviteDelegate EOS_Sessions_RejectInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RemoveNotifyJoinSessionAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifyJoinSessionAcceptedDelegate EOS_Sessions_RemoveNotifyJoinSessionAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RemoveNotifyLeaveSessionRequestedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifyLeaveSessionRequestedDelegate EOS_Sessions_RemoveNotifyLeaveSessionRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifySendSessionNativeInviteRequestedDelegate EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RemoveNotifySessionInviteAcceptedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifySessionInviteAcceptedDelegate EOS_Sessions_RemoveNotifySessionInviteAccepted;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RemoveNotifySessionInviteReceivedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifySessionInviteReceivedDelegate EOS_Sessions_RemoveNotifySessionInviteReceived;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_RemoveNotifySessionInviteRejectedDelegate(IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifySessionInviteRejectedDelegate EOS_Sessions_RemoveNotifySessionInviteRejected;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_SendInviteDelegate(IntPtr handle, ref Sessions.SendInviteOptionsInternal options, IntPtr clientData, Sessions.OnSendInviteCallbackInternal completionDelegate);
		internal static EOS_Sessions_SendInviteDelegate EOS_Sessions_SendInvite;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_StartSessionDelegate(IntPtr handle, ref Sessions.StartSessionOptionsInternal options, IntPtr clientData, Sessions.OnStartSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_StartSessionDelegate EOS_Sessions_StartSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_UnregisterPlayersDelegate(IntPtr handle, ref Sessions.UnregisterPlayersOptionsInternal options, IntPtr clientData, Sessions.OnUnregisterPlayersCallbackInternal completionDelegate);
		internal static EOS_Sessions_UnregisterPlayersDelegate EOS_Sessions_UnregisterPlayers;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Sessions_UpdateSessionDelegate(IntPtr handle, ref Sessions.UpdateSessionOptionsInternal options, IntPtr clientData, Sessions.OnUpdateSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_UpdateSessionDelegate EOS_Sessions_UpdateSession;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Sessions_UpdateSessionModificationDelegate(IntPtr handle, ref Sessions.UpdateSessionModificationOptionsInternal options, out IntPtr outSessionModificationHandle);
		internal static EOS_Sessions_UpdateSessionModificationDelegate EOS_Sessions_UpdateSessionModification;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_ShutdownDelegate();
		internal static EOS_ShutdownDelegate EOS_Shutdown;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Stats_CopyStatByIndexDelegate(IntPtr handle, ref Stats.CopyStatByIndexOptionsInternal options, out IntPtr outStat);
		internal static EOS_Stats_CopyStatByIndexDelegate EOS_Stats_CopyStatByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_Stats_CopyStatByNameDelegate(IntPtr handle, ref Stats.CopyStatByNameOptionsInternal options, out IntPtr outStat);
		internal static EOS_Stats_CopyStatByNameDelegate EOS_Stats_CopyStatByName;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_Stats_GetStatsCountDelegate(IntPtr handle, ref Stats.GetStatCountOptionsInternal options);
		internal static EOS_Stats_GetStatsCountDelegate EOS_Stats_GetStatsCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Stats_IngestStatDelegate(IntPtr handle, ref Stats.IngestStatOptionsInternal options, IntPtr clientData, Stats.OnIngestStatCompleteCallbackInternal completionDelegate);
		internal static EOS_Stats_IngestStatDelegate EOS_Stats_IngestStat;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Stats_QueryStatsDelegate(IntPtr handle, ref Stats.QueryStatsOptionsInternal options, IntPtr clientData, Stats.OnQueryStatsCompleteCallbackInternal completionDelegate);
		internal static EOS_Stats_QueryStatsDelegate EOS_Stats_QueryStats;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_Stats_Stat_ReleaseDelegate(IntPtr stat);
		internal static EOS_Stats_Stat_ReleaseDelegate EOS_Stats_Stat_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_TitleStorageFileTransferRequest_CancelRequestDelegate(IntPtr handle);
		internal static EOS_TitleStorageFileTransferRequest_CancelRequestDelegate EOS_TitleStorageFileTransferRequest_CancelRequest;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_TitleStorageFileTransferRequest_GetFileRequestStateDelegate(IntPtr handle);
		internal static EOS_TitleStorageFileTransferRequest_GetFileRequestStateDelegate EOS_TitleStorageFileTransferRequest_GetFileRequestState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_TitleStorageFileTransferRequest_GetFilenameDelegate(IntPtr handle, uint filenameStringBufferSizeBytes, IntPtr outStringBuffer, out int outStringLength);
		internal static EOS_TitleStorageFileTransferRequest_GetFilenameDelegate EOS_TitleStorageFileTransferRequest_GetFilename;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_TitleStorageFileTransferRequest_ReleaseDelegate(IntPtr titleStorageFileTransferHandle);
		internal static EOS_TitleStorageFileTransferRequest_ReleaseDelegate EOS_TitleStorageFileTransferRequest_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_TitleStorage_CopyFileMetadataAtIndexDelegate(IntPtr handle, ref TitleStorage.CopyFileMetadataAtIndexOptionsInternal options, out IntPtr outMetadata);
		internal static EOS_TitleStorage_CopyFileMetadataAtIndexDelegate EOS_TitleStorage_CopyFileMetadataAtIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_TitleStorage_CopyFileMetadataByFilenameDelegate(IntPtr handle, ref TitleStorage.CopyFileMetadataByFilenameOptionsInternal options, out IntPtr outMetadata);
		internal static EOS_TitleStorage_CopyFileMetadataByFilenameDelegate EOS_TitleStorage_CopyFileMetadataByFilename;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_TitleStorage_DeleteCacheDelegate(IntPtr handle, ref TitleStorage.DeleteCacheOptionsInternal options, IntPtr clientData, TitleStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_DeleteCacheDelegate EOS_TitleStorage_DeleteCache;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_TitleStorage_FileMetadata_ReleaseDelegate(IntPtr fileMetadata);
		internal static EOS_TitleStorage_FileMetadata_ReleaseDelegate EOS_TitleStorage_FileMetadata_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_TitleStorage_GetFileMetadataCountDelegate(IntPtr handle, ref TitleStorage.GetFileMetadataCountOptionsInternal options);
		internal static EOS_TitleStorage_GetFileMetadataCountDelegate EOS_TitleStorage_GetFileMetadataCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_TitleStorage_QueryFileDelegate(IntPtr handle, ref TitleStorage.QueryFileOptionsInternal options, IntPtr clientData, TitleStorage.OnQueryFileCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_QueryFileDelegate EOS_TitleStorage_QueryFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_TitleStorage_QueryFileListDelegate(IntPtr handle, ref TitleStorage.QueryFileListOptionsInternal options, IntPtr clientData, TitleStorage.OnQueryFileListCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_QueryFileListDelegate EOS_TitleStorage_QueryFileList;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate IntPtr EOS_TitleStorage_ReadFileDelegate(IntPtr handle, ref TitleStorage.ReadFileOptionsInternal options, IntPtr clientData, TitleStorage.OnReadFileCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_ReadFileDelegate EOS_TitleStorage_ReadFile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_AcknowledgeEventIdDelegate(IntPtr handle, ref UI.AcknowledgeEventIdOptionsInternal options);
		internal static EOS_UI_AcknowledgeEventIdDelegate EOS_UI_AcknowledgeEventId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_UI_AddNotifyDisplaySettingsUpdatedDelegate(IntPtr handle, ref UI.AddNotifyDisplaySettingsUpdatedOptionsInternal options, IntPtr clientData, UI.OnDisplaySettingsUpdatedCallbackInternal notificationFn);
		internal static EOS_UI_AddNotifyDisplaySettingsUpdatedDelegate EOS_UI_AddNotifyDisplaySettingsUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate ulong EOS_UI_AddNotifyMemoryMonitorDelegate(IntPtr handle, ref UI.AddNotifyMemoryMonitorOptionsInternal options, IntPtr clientData, UI.OnMemoryMonitorCallbackInternal notificationFn);
		internal static EOS_UI_AddNotifyMemoryMonitorDelegate EOS_UI_AddNotifyMemoryMonitor;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_UI_GetFriendsExclusiveInputDelegate(IntPtr handle, ref UI.GetFriendsExclusiveInputOptionsInternal options);
		internal static EOS_UI_GetFriendsExclusiveInputDelegate EOS_UI_GetFriendsExclusiveInput;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_UI_GetFriendsVisibleDelegate(IntPtr handle, ref UI.GetFriendsVisibleOptionsInternal options);
		internal static EOS_UI_GetFriendsVisibleDelegate EOS_UI_GetFriendsVisible;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate UI.NotificationLocation EOS_UI_GetNotificationLocationPreferenceDelegate(IntPtr handle);
		internal static EOS_UI_GetNotificationLocationPreferenceDelegate EOS_UI_GetNotificationLocationPreference;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate UI.InputStateButtonFlags EOS_UI_GetToggleFriendsButtonDelegate(IntPtr handle, ref UI.GetToggleFriendsButtonOptionsInternal options);
		internal static EOS_UI_GetToggleFriendsButtonDelegate EOS_UI_GetToggleFriendsButton;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate UI.KeyCombination EOS_UI_GetToggleFriendsKeyDelegate(IntPtr handle, ref UI.GetToggleFriendsKeyOptionsInternal options);
		internal static EOS_UI_GetToggleFriendsKeyDelegate EOS_UI_GetToggleFriendsKey;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_HideFriendsDelegate(IntPtr handle, ref UI.HideFriendsOptionsInternal options, IntPtr clientData, UI.OnHideFriendsCallbackInternal completionDelegate);
		internal static EOS_UI_HideFriendsDelegate EOS_UI_HideFriends;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_UI_IsSocialOverlayPausedDelegate(IntPtr handle, ref UI.IsSocialOverlayPausedOptionsInternal options);
		internal static EOS_UI_IsSocialOverlayPausedDelegate EOS_UI_IsSocialOverlayPaused;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_UI_IsValidButtonCombinationDelegate(IntPtr handle, UI.InputStateButtonFlags buttonCombination);
		internal static EOS_UI_IsValidButtonCombinationDelegate EOS_UI_IsValidButtonCombination;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate int EOS_UI_IsValidKeyCombinationDelegate(IntPtr handle, UI.KeyCombination keyCombination);
		internal static EOS_UI_IsValidKeyCombinationDelegate EOS_UI_IsValidKeyCombination;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_PauseSocialOverlayDelegate(IntPtr handle, ref UI.PauseSocialOverlayOptionsInternal options);
		internal static EOS_UI_PauseSocialOverlayDelegate EOS_UI_PauseSocialOverlay;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_PrePresentDelegate(IntPtr handle, ref UI.PrePresentOptionsInternal options);
		internal static EOS_UI_PrePresentDelegate EOS_UI_PrePresent;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_RemoveNotifyDisplaySettingsUpdatedDelegate(IntPtr handle, ulong id);
		internal static EOS_UI_RemoveNotifyDisplaySettingsUpdatedDelegate EOS_UI_RemoveNotifyDisplaySettingsUpdated;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_RemoveNotifyMemoryMonitorDelegate(IntPtr handle, ulong id);
		internal static EOS_UI_RemoveNotifyMemoryMonitorDelegate EOS_UI_RemoveNotifyMemoryMonitor;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_ReportInputStateDelegate(IntPtr handle, ref UI.ReportInputStateOptionsInternal options);
		internal static EOS_UI_ReportInputStateDelegate EOS_UI_ReportInputState;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_SetDisplayPreferenceDelegate(IntPtr handle, ref UI.SetDisplayPreferenceOptionsInternal options);
		internal static EOS_UI_SetDisplayPreferenceDelegate EOS_UI_SetDisplayPreference;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_SetToggleFriendsButtonDelegate(IntPtr handle, ref UI.SetToggleFriendsButtonOptionsInternal options);
		internal static EOS_UI_SetToggleFriendsButtonDelegate EOS_UI_SetToggleFriendsButton;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UI_SetToggleFriendsKeyDelegate(IntPtr handle, ref UI.SetToggleFriendsKeyOptionsInternal options);
		internal static EOS_UI_SetToggleFriendsKeyDelegate EOS_UI_SetToggleFriendsKey;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_ShowBlockPlayerDelegate(IntPtr handle, ref UI.ShowBlockPlayerOptionsInternal options, IntPtr clientData, UI.OnShowBlockPlayerCallbackInternal completionDelegate);
		internal static EOS_UI_ShowBlockPlayerDelegate EOS_UI_ShowBlockPlayer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_ShowFriendsDelegate(IntPtr handle, ref UI.ShowFriendsOptionsInternal options, IntPtr clientData, UI.OnShowFriendsCallbackInternal completionDelegate);
		internal static EOS_UI_ShowFriendsDelegate EOS_UI_ShowFriends;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_ShowNativeProfileDelegate(IntPtr handle, ref UI.ShowNativeProfileOptionsInternal options, IntPtr clientData, UI.OnShowNativeProfileCallbackInternal completionDelegate);
		internal static EOS_UI_ShowNativeProfileDelegate EOS_UI_ShowNativeProfile;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UI_ShowReportPlayerDelegate(IntPtr handle, ref UI.ShowReportPlayerOptionsInternal options, IntPtr clientData, UI.OnShowReportPlayerCallbackInternal completionDelegate);
		internal static EOS_UI_ShowReportPlayerDelegate EOS_UI_ShowReportPlayer;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UserInfo_BestDisplayName_ReleaseDelegate(IntPtr bestDisplayName);
		internal static EOS_UserInfo_BestDisplayName_ReleaseDelegate EOS_UserInfo_BestDisplayName_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UserInfo_CopyBestDisplayNameDelegate(IntPtr handle, ref UserInfo.CopyBestDisplayNameOptionsInternal options, out IntPtr outBestDisplayName);
		internal static EOS_UserInfo_CopyBestDisplayNameDelegate EOS_UserInfo_CopyBestDisplayName;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UserInfo_CopyBestDisplayNameWithPlatformDelegate(IntPtr handle, ref UserInfo.CopyBestDisplayNameWithPlatformOptionsInternal options, out IntPtr outBestDisplayName);
		internal static EOS_UserInfo_CopyBestDisplayNameWithPlatformDelegate EOS_UserInfo_CopyBestDisplayNameWithPlatform;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UserInfo_CopyExternalUserInfoByAccountIdDelegate(IntPtr handle, ref UserInfo.CopyExternalUserInfoByAccountIdOptionsInternal options, out IntPtr outExternalUserInfo);
		internal static EOS_UserInfo_CopyExternalUserInfoByAccountIdDelegate EOS_UserInfo_CopyExternalUserInfoByAccountId;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UserInfo_CopyExternalUserInfoByAccountTypeDelegate(IntPtr handle, ref UserInfo.CopyExternalUserInfoByAccountTypeOptionsInternal options, out IntPtr outExternalUserInfo);
		internal static EOS_UserInfo_CopyExternalUserInfoByAccountTypeDelegate EOS_UserInfo_CopyExternalUserInfoByAccountType;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UserInfo_CopyExternalUserInfoByIndexDelegate(IntPtr handle, ref UserInfo.CopyExternalUserInfoByIndexOptionsInternal options, out IntPtr outExternalUserInfo);
		internal static EOS_UserInfo_CopyExternalUserInfoByIndexDelegate EOS_UserInfo_CopyExternalUserInfoByIndex;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate Result EOS_UserInfo_CopyUserInfoDelegate(IntPtr handle, ref UserInfo.CopyUserInfoOptionsInternal options, out IntPtr outUserInfo);
		internal static EOS_UserInfo_CopyUserInfoDelegate EOS_UserInfo_CopyUserInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UserInfo_ExternalUserInfo_ReleaseDelegate(IntPtr externalUserInfo);
		internal static EOS_UserInfo_ExternalUserInfo_ReleaseDelegate EOS_UserInfo_ExternalUserInfo_Release;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_UserInfo_GetExternalUserInfoCountDelegate(IntPtr handle, ref UserInfo.GetExternalUserInfoCountOptionsInternal options);
		internal static EOS_UserInfo_GetExternalUserInfoCountDelegate EOS_UserInfo_GetExternalUserInfoCount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate uint EOS_UserInfo_GetLocalPlatformTypeDelegate(IntPtr handle, ref UserInfo.GetLocalPlatformTypeOptionsInternal options);
		internal static EOS_UserInfo_GetLocalPlatformTypeDelegate EOS_UserInfo_GetLocalPlatformType;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UserInfo_QueryUserInfoDelegate(IntPtr handle, ref UserInfo.QueryUserInfoOptionsInternal options, IntPtr clientData, UserInfo.OnQueryUserInfoCallbackInternal completionDelegate);
		internal static EOS_UserInfo_QueryUserInfoDelegate EOS_UserInfo_QueryUserInfo;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UserInfo_QueryUserInfoByDisplayNameDelegate(IntPtr handle, ref UserInfo.QueryUserInfoByDisplayNameOptionsInternal options, IntPtr clientData, UserInfo.OnQueryUserInfoByDisplayNameCallbackInternal completionDelegate);
		internal static EOS_UserInfo_QueryUserInfoByDisplayNameDelegate EOS_UserInfo_QueryUserInfoByDisplayName;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UserInfo_QueryUserInfoByExternalAccountDelegate(IntPtr handle, ref UserInfo.QueryUserInfoByExternalAccountOptionsInternal options, IntPtr clientData, UserInfo.OnQueryUserInfoByExternalAccountCallbackInternal completionDelegate);
		internal static EOS_UserInfo_QueryUserInfoByExternalAccountDelegate EOS_UserInfo_QueryUserInfoByExternalAccount;

		[UnmanagedFunctionPointer(Common.LIBRARY_CALLING_CONVENTION)]
		internal delegate void EOS_UserInfo_ReleaseDelegate(IntPtr userInfo);
		internal static EOS_UserInfo_ReleaseDelegate EOS_UserInfo_Release;
#else
		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_AddNotifyAchievementsUnlocked", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Achievements_AddNotifyAchievementsUnlocked(IntPtr handle, ref Achievements.AddNotifyAchievementsUnlockedOptionsInternal options, IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_AddNotifyAchievementsUnlockedV2", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Achievements_AddNotifyAchievementsUnlockedV2(IntPtr handle, ref Achievements.AddNotifyAchievementsUnlockedV2OptionsInternal options, IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackV2Internal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyAchievementDefinitionByAchievementId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionByAchievementId(IntPtr handle, ref Achievements.CopyAchievementDefinitionByAchievementIdOptionsInternal options, out IntPtr outDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyAchievementDefinitionByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionByIndex(IntPtr handle, ref Achievements.CopyAchievementDefinitionByIndexOptionsInternal options, out IntPtr outDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(IntPtr handle, ref Achievements.CopyAchievementDefinitionV2ByAchievementIdOptionsInternal options, out IntPtr outDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyAchievementDefinitionV2ByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionV2ByIndex(IntPtr handle, ref Achievements.CopyAchievementDefinitionV2ByIndexOptionsInternal options, out IntPtr outDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyPlayerAchievementByAchievementId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyPlayerAchievementByAchievementId(IntPtr handle, ref Achievements.CopyPlayerAchievementByAchievementIdOptionsInternal options, out IntPtr outAchievement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyPlayerAchievementByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyPlayerAchievementByIndex(IntPtr handle, ref Achievements.CopyPlayerAchievementByIndexOptionsInternal options, out IntPtr outAchievement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyUnlockedAchievementByAchievementId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyUnlockedAchievementByAchievementId(IntPtr handle, ref Achievements.CopyUnlockedAchievementByAchievementIdOptionsInternal options, out IntPtr outAchievement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_CopyUnlockedAchievementByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Achievements_CopyUnlockedAchievementByIndex(IntPtr handle, ref Achievements.CopyUnlockedAchievementByIndexOptionsInternal options, out IntPtr outAchievement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_DefinitionV2_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_DefinitionV2_Release(IntPtr achievementDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_Definition_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_Definition_Release(IntPtr achievementDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_GetAchievementDefinitionCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Achievements_GetAchievementDefinitionCount(IntPtr handle, ref Achievements.GetAchievementDefinitionCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_GetPlayerAchievementCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Achievements_GetPlayerAchievementCount(IntPtr handle, ref Achievements.GetPlayerAchievementCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_GetUnlockedAchievementCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Achievements_GetUnlockedAchievementCount(IntPtr handle, ref Achievements.GetUnlockedAchievementCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_PlayerAchievement_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_PlayerAchievement_Release(IntPtr achievement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_QueryDefinitions", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_QueryDefinitions(IntPtr handle, ref Achievements.QueryDefinitionsOptionsInternal options, IntPtr clientData, Achievements.OnQueryDefinitionsCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_QueryPlayerAchievements", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_QueryPlayerAchievements(IntPtr handle, ref Achievements.QueryPlayerAchievementsOptionsInternal options, IntPtr clientData, Achievements.OnQueryPlayerAchievementsCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_RemoveNotifyAchievementsUnlocked", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_RemoveNotifyAchievementsUnlocked(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_UnlockAchievements", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_UnlockAchievements(IntPtr handle, ref Achievements.UnlockAchievementsOptionsInternal options, IntPtr clientData, Achievements.OnUnlockAchievementsCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Achievements_UnlockedAchievement_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Achievements_UnlockedAchievement_Release(IntPtr achievement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ActiveSession_CopyInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ActiveSession_CopyInfo(IntPtr handle, ref Sessions.ActiveSessionCopyInfoOptionsInternal options, out IntPtr outActiveSessionInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ActiveSession_GetRegisteredPlayerByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_ActiveSession_GetRegisteredPlayerByIndex(IntPtr handle, ref Sessions.ActiveSessionGetRegisteredPlayerByIndexOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ActiveSession_GetRegisteredPlayerCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_ActiveSession_GetRegisteredPlayerCount(IntPtr handle, ref Sessions.ActiveSessionGetRegisteredPlayerCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ActiveSession_Info_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_ActiveSession_Info_Release(IntPtr activeSessionInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ActiveSession_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_ActiveSession_Release(IntPtr activeSessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_AddExternalIntegrityCatalog", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_AddExternalIntegrityCatalog(IntPtr handle, ref AntiCheatClient.AddExternalIntegrityCatalogOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_AddNotifyClientIntegrityViolated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyClientIntegrityViolated(IntPtr handle, ref AntiCheatClient.AddNotifyClientIntegrityViolatedOptionsInternal options, IntPtr clientData, AntiCheatClient.OnClientIntegrityViolatedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_AddNotifyMessageToPeer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyMessageToPeer(IntPtr handle, ref AntiCheatClient.AddNotifyMessageToPeerOptionsInternal options, IntPtr clientData, AntiCheatClient.OnMessageToPeerCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_AddNotifyMessageToServer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyMessageToServer(IntPtr handle, ref AntiCheatClient.AddNotifyMessageToServerOptionsInternal options, IntPtr clientData, AntiCheatClient.OnMessageToServerCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_AddNotifyPeerActionRequired", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyPeerActionRequired(IntPtr handle, ref AntiCheatClient.AddNotifyPeerActionRequiredOptionsInternal options, IntPtr clientData, AntiCheatClient.OnPeerActionRequiredCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(IntPtr handle, ref AntiCheatClient.AddNotifyPeerAuthStatusChangedOptionsInternal options, IntPtr clientData, AntiCheatClient.OnPeerAuthStatusChangedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_BeginSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_BeginSession(IntPtr handle, ref AntiCheatClient.BeginSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_EndSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_EndSession(IntPtr handle, ref AntiCheatClient.EndSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_GetProtectMessageOutputLength", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_GetProtectMessageOutputLength(IntPtr handle, ref AntiCheatClient.GetProtectMessageOutputLengthOptionsInternal options, out uint outBufferSizeBytes);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_PollStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_PollStatus(IntPtr handle, ref AntiCheatClient.PollStatusOptionsInternal options, out AntiCheatClient.AntiCheatClientViolationType outViolationType, IntPtr outMessage);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_ProtectMessage", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_ProtectMessage(IntPtr handle, ref AntiCheatClient.ProtectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_ReceiveMessageFromPeer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_ReceiveMessageFromPeer(IntPtr handle, ref AntiCheatClient.ReceiveMessageFromPeerOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_ReceiveMessageFromServer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_ReceiveMessageFromServer(IntPtr handle, ref AntiCheatClient.ReceiveMessageFromServerOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_RegisterPeer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_RegisterPeer(IntPtr handle, ref AntiCheatClient.RegisterPeerOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_RemoveNotifyMessageToPeer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyMessageToPeer(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_RemoveNotifyMessageToServer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyMessageToServer(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_RemoveNotifyPeerActionRequired", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_Reserved01", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_Reserved01(IntPtr handle, ref AntiCheatClient.Reserved01OptionsInternal options, out int outValue);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_UnprotectMessage", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_UnprotectMessage(IntPtr handle, ref AntiCheatClient.UnprotectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatClient_UnregisterPeer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatClient_UnregisterPeer(IntPtr handle, ref AntiCheatClient.UnregisterPeerOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_AddNotifyClientActionRequired", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatServer_AddNotifyClientActionRequired(IntPtr handle, ref AntiCheatServer.AddNotifyClientActionRequiredOptionsInternal options, IntPtr clientData, AntiCheatServer.OnClientActionRequiredCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(IntPtr handle, ref AntiCheatServer.AddNotifyClientAuthStatusChangedOptionsInternal options, IntPtr clientData, AntiCheatServer.OnClientAuthStatusChangedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_AddNotifyMessageToClient", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_AntiCheatServer_AddNotifyMessageToClient(IntPtr handle, ref AntiCheatServer.AddNotifyMessageToClientOptionsInternal options, IntPtr clientData, AntiCheatServer.OnMessageToClientCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_BeginSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_BeginSession(IntPtr handle, ref AntiCheatServer.BeginSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_EndSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_EndSession(IntPtr handle, ref AntiCheatServer.EndSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_GetProtectMessageOutputLength", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_GetProtectMessageOutputLength(IntPtr handle, ref AntiCheatServer.GetProtectMessageOutputLengthOptionsInternal options, out uint outBufferSizeBytes);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogEvent", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogEvent(IntPtr handle, ref AntiCheatCommon.LogEventOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogGameRoundEnd", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogGameRoundEnd(IntPtr handle, ref AntiCheatCommon.LogGameRoundEndOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogGameRoundStart", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogGameRoundStart(IntPtr handle, ref AntiCheatCommon.LogGameRoundStartOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerDespawn", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerDespawn(IntPtr handle, ref AntiCheatCommon.LogPlayerDespawnOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerRevive", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerRevive(IntPtr handle, ref AntiCheatCommon.LogPlayerReviveOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerSpawn", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerSpawn(IntPtr handle, ref AntiCheatCommon.LogPlayerSpawnOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerTakeDamage", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerTakeDamage(IntPtr handle, ref AntiCheatCommon.LogPlayerTakeDamageOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerTick", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerTick(IntPtr handle, ref AntiCheatCommon.LogPlayerTickOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerUseAbility", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerUseAbility(IntPtr handle, ref AntiCheatCommon.LogPlayerUseAbilityOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_LogPlayerUseWeapon", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerUseWeapon(IntPtr handle, ref AntiCheatCommon.LogPlayerUseWeaponOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_ProtectMessage", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_ProtectMessage(IntPtr handle, ref AntiCheatServer.ProtectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_ReceiveMessageFromClient", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_ReceiveMessageFromClient(IntPtr handle, ref AntiCheatServer.ReceiveMessageFromClientOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_RegisterClient", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_RegisterClient(IntPtr handle, ref AntiCheatServer.RegisterClientOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_RegisterEvent", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_RegisterEvent(IntPtr handle, ref AntiCheatCommon.RegisterEventOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_RemoveNotifyClientActionRequired", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatServer_RemoveNotifyClientActionRequired(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_RemoveNotifyMessageToClient", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_AntiCheatServer_RemoveNotifyMessageToClient(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_SetClientDetails", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_SetClientDetails(IntPtr handle, ref AntiCheatCommon.SetClientDetailsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_SetClientNetworkState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_SetClientNetworkState(IntPtr handle, ref AntiCheatServer.SetClientNetworkStateOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_SetGameSessionId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_SetGameSessionId(IntPtr handle, ref AntiCheatCommon.SetGameSessionIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_UnprotectMessage", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_UnprotectMessage(IntPtr handle, ref AntiCheatServer.UnprotectMessageOptionsInternal options, IntPtr outBuffer, out uint outBytesWritten);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_AntiCheatServer_UnregisterClient", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_AntiCheatServer_UnregisterClient(IntPtr handle, ref AntiCheatServer.UnregisterClientOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_AddNotifyLoginStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Auth_AddNotifyLoginStatusChanged(IntPtr handle, ref Auth.AddNotifyLoginStatusChangedOptionsInternal options, IntPtr clientData, Auth.OnLoginStatusChangedCallbackInternal notification);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_CopyIdToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Auth_CopyIdToken(IntPtr handle, ref Auth.CopyIdTokenOptionsInternal options, out IntPtr outIdToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_CopyUserAuthToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Auth_CopyUserAuthToken(IntPtr handle, ref Auth.CopyUserAuthTokenOptionsInternal options, IntPtr localUserId, out IntPtr outUserAuthToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_DeletePersistentAuth", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_DeletePersistentAuth(IntPtr handle, ref Auth.DeletePersistentAuthOptionsInternal options, IntPtr clientData, Auth.OnDeletePersistentAuthCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_GetLoggedInAccountByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Auth_GetLoggedInAccountByIndex(IntPtr handle, int index);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_GetLoggedInAccountsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_Auth_GetLoggedInAccountsCount(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_GetLoginStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern LoginStatus EOS_Auth_GetLoginStatus(IntPtr handle, IntPtr localUserId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_GetMergedAccountByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Auth_GetMergedAccountByIndex(IntPtr handle, IntPtr localUserId, uint index);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_GetMergedAccountsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Auth_GetMergedAccountsCount(IntPtr handle, IntPtr localUserId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_GetSelectedAccountId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Auth_GetSelectedAccountId(IntPtr handle, IntPtr localUserId, out IntPtr outSelectedAccountId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_IdToken_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_IdToken_Release(IntPtr idToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_LinkAccount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_LinkAccount(IntPtr handle, ref Auth.LinkAccountOptionsInternal options, IntPtr clientData, Auth.OnLinkAccountCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_Login", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_Login(IntPtr handle, ref Auth.LoginOptionsInternal options, IntPtr clientData, Auth.OnLoginCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_Logout", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_Logout(IntPtr handle, ref Auth.LogoutOptionsInternal options, IntPtr clientData, Auth.OnLogoutCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_QueryIdToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_QueryIdToken(IntPtr handle, ref Auth.QueryIdTokenOptionsInternal options, IntPtr clientData, Auth.OnQueryIdTokenCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_RemoveNotifyLoginStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_RemoveNotifyLoginStatusChanged(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_Token_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_Token_Release(IntPtr authToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_VerifyIdToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_VerifyIdToken(IntPtr handle, ref Auth.VerifyIdTokenOptionsInternal options, IntPtr clientData, Auth.OnVerifyIdTokenCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Auth_VerifyUserAuth", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Auth_VerifyUserAuth(IntPtr handle, ref Auth.VerifyUserAuthOptionsInternal options, IntPtr clientData, Auth.OnVerifyUserAuthCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ByteArray_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ByteArray_ToString(IntPtr byteArray, uint length, IntPtr outBuffer, ref uint inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_AddNotifyAuthExpiration", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Connect_AddNotifyAuthExpiration(IntPtr handle, ref Connect.AddNotifyAuthExpirationOptionsInternal options, IntPtr clientData, Connect.OnAuthExpirationCallbackInternal notification);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_AddNotifyLoginStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Connect_AddNotifyLoginStatusChanged(IntPtr handle, ref Connect.AddNotifyLoginStatusChangedOptionsInternal options, IntPtr clientData, Connect.OnLoginStatusChangedCallbackInternal notification);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CopyIdToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Connect_CopyIdToken(IntPtr handle, ref Connect.CopyIdTokenOptionsInternal options, out IntPtr outIdToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CopyProductUserExternalAccountByAccountId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Connect_CopyProductUserExternalAccountByAccountId(IntPtr handle, ref Connect.CopyProductUserExternalAccountByAccountIdOptionsInternal options, out IntPtr outExternalAccountInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CopyProductUserExternalAccountByAccountType", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Connect_CopyProductUserExternalAccountByAccountType(IntPtr handle, ref Connect.CopyProductUserExternalAccountByAccountTypeOptionsInternal options, out IntPtr outExternalAccountInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CopyProductUserExternalAccountByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Connect_CopyProductUserExternalAccountByIndex(IntPtr handle, ref Connect.CopyProductUserExternalAccountByIndexOptionsInternal options, out IntPtr outExternalAccountInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CopyProductUserInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Connect_CopyProductUserInfo(IntPtr handle, ref Connect.CopyProductUserInfoOptionsInternal options, out IntPtr outExternalAccountInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CreateDeviceId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_CreateDeviceId(IntPtr handle, ref Connect.CreateDeviceIdOptionsInternal options, IntPtr clientData, Connect.OnCreateDeviceIdCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_CreateUser", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_CreateUser(IntPtr handle, ref Connect.CreateUserOptionsInternal options, IntPtr clientData, Connect.OnCreateUserCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_DeleteDeviceId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_DeleteDeviceId(IntPtr handle, ref Connect.DeleteDeviceIdOptionsInternal options, IntPtr clientData, Connect.OnDeleteDeviceIdCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_ExternalAccountInfo_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_ExternalAccountInfo_Release(IntPtr externalAccountInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_GetExternalAccountMapping", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Connect_GetExternalAccountMapping(IntPtr handle, ref Connect.GetExternalAccountMappingsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_GetLoggedInUserByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Connect_GetLoggedInUserByIndex(IntPtr handle, int index);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_GetLoggedInUsersCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_Connect_GetLoggedInUsersCount(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_GetLoginStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern LoginStatus EOS_Connect_GetLoginStatus(IntPtr handle, IntPtr localUserId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_GetProductUserExternalAccountCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Connect_GetProductUserExternalAccountCount(IntPtr handle, ref Connect.GetProductUserExternalAccountCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_GetProductUserIdMapping", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Connect_GetProductUserIdMapping(IntPtr handle, ref Connect.GetProductUserIdMappingOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_IdToken_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_IdToken_Release(IntPtr idToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_LinkAccount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_LinkAccount(IntPtr handle, ref Connect.LinkAccountOptionsInternal options, IntPtr clientData, Connect.OnLinkAccountCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_Login", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_Login(IntPtr handle, ref Connect.LoginOptionsInternal options, IntPtr clientData, Connect.OnLoginCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_Logout", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_Logout(IntPtr handle, ref Connect.LogoutOptionsInternal options, IntPtr clientData, Connect.OnLogoutCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_QueryExternalAccountMappings", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_QueryExternalAccountMappings(IntPtr handle, ref Connect.QueryExternalAccountMappingsOptionsInternal options, IntPtr clientData, Connect.OnQueryExternalAccountMappingsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_QueryProductUserIdMappings", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_QueryProductUserIdMappings(IntPtr handle, ref Connect.QueryProductUserIdMappingsOptionsInternal options, IntPtr clientData, Connect.OnQueryProductUserIdMappingsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_RemoveNotifyAuthExpiration", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_RemoveNotifyAuthExpiration(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_RemoveNotifyLoginStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_RemoveNotifyLoginStatusChanged(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_TransferDeviceIdAccount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_TransferDeviceIdAccount(IntPtr handle, ref Connect.TransferDeviceIdAccountOptionsInternal options, IntPtr clientData, Connect.OnTransferDeviceIdAccountCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_UnlinkAccount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_UnlinkAccount(IntPtr handle, ref Connect.UnlinkAccountOptionsInternal options, IntPtr clientData, Connect.OnUnlinkAccountCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Connect_VerifyIdToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Connect_VerifyIdToken(IntPtr handle, ref Connect.VerifyIdTokenOptionsInternal options, IntPtr clientData, Connect.OnVerifyIdTokenCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ContinuanceToken_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ContinuanceToken_ToString(IntPtr continuanceToken, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AcceptRequestToJoin", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_AcceptRequestToJoin(IntPtr handle, ref CustomInvites.AcceptRequestToJoinOptionsInternal options, IntPtr clientData, CustomInvites.OnAcceptRequestToJoinCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyCustomInviteAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyCustomInviteAccepted(IntPtr handle, ref CustomInvites.AddNotifyCustomInviteAcceptedOptionsInternal options, IntPtr clientData, CustomInvites.OnCustomInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyCustomInviteReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyCustomInviteReceived(IntPtr handle, ref CustomInvites.AddNotifyCustomInviteReceivedOptionsInternal options, IntPtr clientData, CustomInvites.OnCustomInviteReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyCustomInviteRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyCustomInviteRejected(IntPtr handle, ref CustomInvites.AddNotifyCustomInviteRejectedOptionsInternal options, IntPtr clientData, CustomInvites.OnCustomInviteRejectedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyRequestToJoinAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinAccepted(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinAcceptedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyRequestToJoinReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinReceived(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinReceivedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyRequestToJoinRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinRejected(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinRejectedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinRejectedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived(IntPtr handle, ref CustomInvites.AddNotifyRequestToJoinResponseReceivedOptionsInternal options, IntPtr clientData, CustomInvites.OnRequestToJoinResponseReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested(IntPtr handle, ref CustomInvites.AddNotifySendCustomNativeInviteRequestedOptionsInternal options, IntPtr clientData, CustomInvites.OnSendCustomNativeInviteRequestedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_FinalizeInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_CustomInvites_FinalizeInvite(IntPtr handle, ref CustomInvites.FinalizeInviteOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RejectRequestToJoin", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RejectRequestToJoin(IntPtr handle, ref CustomInvites.RejectRequestToJoinOptionsInternal options, IntPtr clientData, CustomInvites.OnRejectRequestToJoinCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyCustomInviteAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyCustomInviteAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyCustomInviteReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyCustomInviteReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyCustomInviteRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyCustomInviteRejected(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyRequestToJoinReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyRequestToJoinRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinRejected(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_SendCustomInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_SendCustomInvite(IntPtr handle, ref CustomInvites.SendCustomInviteOptionsInternal options, IntPtr clientData, CustomInvites.OnSendCustomInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_SendRequestToJoin", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_CustomInvites_SendRequestToJoin(IntPtr handle, ref CustomInvites.SendRequestToJoinOptionsInternal options, IntPtr clientData, CustomInvites.OnSendRequestToJoinCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_CustomInvites_SetCustomInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_CustomInvites_SetCustomInvite(IntPtr handle, ref CustomInvites.SetCustomInviteOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_EApplicationStatus_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_EApplicationStatus_ToString(Platform.ApplicationStatus applicationStatus);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ENetworkStatus_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_ENetworkStatus_ToString(Platform.NetworkStatus networkStatus);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_EResult_IsOperationComplete", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_EResult_IsOperationComplete(Result result);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_EResult_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_EResult_ToString(Result result);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CatalogItem_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_CatalogItem_Release(IntPtr catalogItem);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CatalogOffer_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_CatalogOffer_Release(IntPtr catalogOffer);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CatalogRelease_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_CatalogRelease_Release(IntPtr catalogRelease);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_Checkout", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_Checkout(IntPtr handle, ref Ecom.CheckoutOptionsInternal options, IntPtr clientData, Ecom.OnCheckoutCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyEntitlementById", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyEntitlementById(IntPtr handle, ref Ecom.CopyEntitlementByIdOptionsInternal options, out IntPtr outEntitlement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyEntitlementByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyEntitlementByIndex(IntPtr handle, ref Ecom.CopyEntitlementByIndexOptionsInternal options, out IntPtr outEntitlement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyEntitlementByNameAndIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyEntitlementByNameAndIndex(IntPtr handle, ref Ecom.CopyEntitlementByNameAndIndexOptionsInternal options, out IntPtr outEntitlement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyItemById", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyItemById(IntPtr handle, ref Ecom.CopyItemByIdOptionsInternal options, out IntPtr outItem);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyItemImageInfoByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyItemImageInfoByIndex(IntPtr handle, ref Ecom.CopyItemImageInfoByIndexOptionsInternal options, out IntPtr outImageInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyItemReleaseByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyItemReleaseByIndex(IntPtr handle, ref Ecom.CopyItemReleaseByIndexOptionsInternal options, out IntPtr outRelease);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyLastRedeemedEntitlementByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyLastRedeemedEntitlementByIndex(IntPtr handle, ref Ecom.CopyLastRedeemedEntitlementByIndexOptionsInternal options, IntPtr outRedeemedEntitlementId, ref int inOutRedeemedEntitlementIdLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyOfferById", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyOfferById(IntPtr handle, ref Ecom.CopyOfferByIdOptionsInternal options, out IntPtr outOffer);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyOfferByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyOfferByIndex(IntPtr handle, ref Ecom.CopyOfferByIndexOptionsInternal options, out IntPtr outOffer);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyOfferImageInfoByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyOfferImageInfoByIndex(IntPtr handle, ref Ecom.CopyOfferImageInfoByIndexOptionsInternal options, out IntPtr outImageInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyOfferItemByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyOfferItemByIndex(IntPtr handle, ref Ecom.CopyOfferItemByIndexOptionsInternal options, out IntPtr outItem);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyTransactionById", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyTransactionById(IntPtr handle, ref Ecom.CopyTransactionByIdOptionsInternal options, out IntPtr outTransaction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_CopyTransactionByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_CopyTransactionByIndex(IntPtr handle, ref Ecom.CopyTransactionByIndexOptionsInternal options, out IntPtr outTransaction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_Entitlement_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_Entitlement_Release(IntPtr entitlement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetEntitlementsByNameCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetEntitlementsByNameCount(IntPtr handle, ref Ecom.GetEntitlementsByNameCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetEntitlementsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetEntitlementsCount(IntPtr handle, ref Ecom.GetEntitlementsCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetItemImageInfoCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetItemImageInfoCount(IntPtr handle, ref Ecom.GetItemImageInfoCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetItemReleaseCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetItemReleaseCount(IntPtr handle, ref Ecom.GetItemReleaseCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetLastRedeemedEntitlementsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetLastRedeemedEntitlementsCount(IntPtr handle, ref Ecom.GetLastRedeemedEntitlementsCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetOfferCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetOfferCount(IntPtr handle, ref Ecom.GetOfferCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetOfferImageInfoCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetOfferImageInfoCount(IntPtr handle, ref Ecom.GetOfferImageInfoCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetOfferItemCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetOfferItemCount(IntPtr handle, ref Ecom.GetOfferItemCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_GetTransactionCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_GetTransactionCount(IntPtr handle, ref Ecom.GetTransactionCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_KeyImageInfo_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_KeyImageInfo_Release(IntPtr keyImageInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_QueryEntitlementToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_QueryEntitlementToken(IntPtr handle, ref Ecom.QueryEntitlementTokenOptionsInternal options, IntPtr clientData, Ecom.OnQueryEntitlementTokenCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_QueryEntitlements", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_QueryEntitlements(IntPtr handle, ref Ecom.QueryEntitlementsOptionsInternal options, IntPtr clientData, Ecom.OnQueryEntitlementsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_QueryOffers", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_QueryOffers(IntPtr handle, ref Ecom.QueryOffersOptionsInternal options, IntPtr clientData, Ecom.OnQueryOffersCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_QueryOwnership", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_QueryOwnership(IntPtr handle, ref Ecom.QueryOwnershipOptionsInternal options, IntPtr clientData, Ecom.OnQueryOwnershipCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_QueryOwnershipBySandboxIds", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_QueryOwnershipBySandboxIds(IntPtr handle, ref Ecom.QueryOwnershipBySandboxIdsOptionsInternal options, IntPtr clientData, Ecom.OnQueryOwnershipBySandboxIdsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_QueryOwnershipToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_QueryOwnershipToken(IntPtr handle, ref Ecom.QueryOwnershipTokenOptionsInternal options, IntPtr clientData, Ecom.OnQueryOwnershipTokenCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_RedeemEntitlements", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_RedeemEntitlements(IntPtr handle, ref Ecom.RedeemEntitlementsOptionsInternal options, IntPtr clientData, Ecom.OnRedeemEntitlementsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_Transaction_CopyEntitlementByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_Transaction_CopyEntitlementByIndex(IntPtr handle, ref Ecom.TransactionCopyEntitlementByIndexOptionsInternal options, out IntPtr outEntitlement);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_Transaction_GetEntitlementsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Ecom_Transaction_GetEntitlementsCount(IntPtr handle, ref Ecom.TransactionGetEntitlementsCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_Transaction_GetTransactionId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Ecom_Transaction_GetTransactionId(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Ecom_Transaction_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Ecom_Transaction_Release(IntPtr transaction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_EpicAccountId_FromString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_EpicAccountId_FromString(IntPtr accountIdString);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_EpicAccountId_IsValid", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_EpicAccountId_IsValid(IntPtr accountId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_EpicAccountId_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_EpicAccountId_ToString(IntPtr accountId, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_AcceptInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Friends_AcceptInvite(IntPtr handle, ref Friends.AcceptInviteOptionsInternal options, IntPtr clientData, Friends.OnAcceptInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_AddNotifyBlockedUsersUpdate", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Friends_AddNotifyBlockedUsersUpdate(IntPtr handle, ref Friends.AddNotifyBlockedUsersUpdateOptionsInternal options, IntPtr clientData, Friends.OnBlockedUsersUpdateCallbackInternal blockedUsersUpdateHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_AddNotifyFriendsUpdate", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Friends_AddNotifyFriendsUpdate(IntPtr handle, ref Friends.AddNotifyFriendsUpdateOptionsInternal options, IntPtr clientData, Friends.OnFriendsUpdateCallbackInternal friendsUpdateHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_GetBlockedUserAtIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Friends_GetBlockedUserAtIndex(IntPtr handle, ref Friends.GetBlockedUserAtIndexOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_GetBlockedUsersCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_Friends_GetBlockedUsersCount(IntPtr handle, ref Friends.GetBlockedUsersCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_GetFriendAtIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Friends_GetFriendAtIndex(IntPtr handle, ref Friends.GetFriendAtIndexOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_GetFriendsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_Friends_GetFriendsCount(IntPtr handle, ref Friends.GetFriendsCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_GetStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Friends.FriendsStatus EOS_Friends_GetStatus(IntPtr handle, ref Friends.GetStatusOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_QueryFriends", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Friends_QueryFriends(IntPtr handle, ref Friends.QueryFriendsOptionsInternal options, IntPtr clientData, Friends.OnQueryFriendsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_RejectInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Friends_RejectInvite(IntPtr handle, ref Friends.RejectInviteOptionsInternal options, IntPtr clientData, Friends.OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_RemoveNotifyBlockedUsersUpdate", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Friends_RemoveNotifyBlockedUsersUpdate(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_RemoveNotifyFriendsUpdate", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Friends_RemoveNotifyFriendsUpdate(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Friends_SendInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Friends_SendInvite(IntPtr handle, ref Friends.SendInviteOptionsInternal options, IntPtr clientData, Friends.OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_GetVersion", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_GetVersion();

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Initialize", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Initialize(ref Platform.InitializeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatformOptionsContainer_Add", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_IntegratedPlatformOptionsContainer_Add(IntPtr handle, ref IntegratedPlatform.IntegratedPlatformOptionsContainerAddOptionsInternal inOptions);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatformOptionsContainer_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_IntegratedPlatformOptionsContainer_Release(IntPtr integratedPlatformOptionsContainerHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged(IntPtr handle, ref IntegratedPlatform.AddNotifyUserLoginStatusChangedOptionsInternal options, IntPtr clientData, IntegratedPlatform.OnUserLoginStatusChangedCallbackInternal callbackFunction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_ClearUserPreLogoutCallback", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_IntegratedPlatform_ClearUserPreLogoutCallback(IntPtr handle, ref IntegratedPlatform.ClearUserPreLogoutCallbackOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer(ref IntegratedPlatform.CreateIntegratedPlatformOptionsContainerOptionsInternal options, out IntPtr outIntegratedPlatformOptionsContainerHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_FinalizeDeferredUserLogout", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_IntegratedPlatform_FinalizeDeferredUserLogout(IntPtr handle, ref IntegratedPlatform.FinalizeDeferredUserLogoutOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_SetUserLoginStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_IntegratedPlatform_SetUserLoginStatus(IntPtr handle, ref IntegratedPlatform.SetUserLoginStatusOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_IntegratedPlatform_SetUserPreLogoutCallback", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_IntegratedPlatform_SetUserPreLogoutCallback(IntPtr handle, ref IntegratedPlatform.SetUserPreLogoutCallbackOptionsInternal options, IntPtr clientData, IntegratedPlatform.OnUserPreLogoutCallbackInternal callbackFunction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_AddNotifyPermissionsUpdateReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_KWS_AddNotifyPermissionsUpdateReceived(IntPtr handle, ref KWS.AddNotifyPermissionsUpdateReceivedOptionsInternal options, IntPtr clientData, KWS.OnPermissionsUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_CopyPermissionByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_KWS_CopyPermissionByIndex(IntPtr handle, ref KWS.CopyPermissionByIndexOptionsInternal options, out IntPtr outPermission);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_CreateUser", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_CreateUser(IntPtr handle, ref KWS.CreateUserOptionsInternal options, IntPtr clientData, KWS.OnCreateUserCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_GetPermissionByKey", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_KWS_GetPermissionByKey(IntPtr handle, ref KWS.GetPermissionByKeyOptionsInternal options, out KWS.KWSPermissionStatus outPermission);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_GetPermissionsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_KWS_GetPermissionsCount(IntPtr handle, ref KWS.GetPermissionsCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_PermissionStatus_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_PermissionStatus_Release(IntPtr permissionStatus);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_QueryAgeGate", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_QueryAgeGate(IntPtr handle, ref KWS.QueryAgeGateOptionsInternal options, IntPtr clientData, KWS.OnQueryAgeGateCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_QueryPermissions", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_QueryPermissions(IntPtr handle, ref KWS.QueryPermissionsOptionsInternal options, IntPtr clientData, KWS.OnQueryPermissionsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_RemoveNotifyPermissionsUpdateReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_RemoveNotifyPermissionsUpdateReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_RequestPermissions", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_RequestPermissions(IntPtr handle, ref KWS.RequestPermissionsOptionsInternal options, IntPtr clientData, KWS.OnRequestPermissionsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_KWS_UpdateParentEmail", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_KWS_UpdateParentEmail(IntPtr handle, ref KWS.UpdateParentEmailOptionsInternal options, IntPtr clientData, KWS.OnUpdateParentEmailCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_CopyLeaderboardDefinitionByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(IntPtr handle, ref Leaderboards.CopyLeaderboardDefinitionByIndexOptionsInternal options, out IntPtr outLeaderboardDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(IntPtr handle, ref Leaderboards.CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal options, out IntPtr outLeaderboardDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_CopyLeaderboardRecordByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardRecordByIndex(IntPtr handle, ref Leaderboards.CopyLeaderboardRecordByIndexOptionsInternal options, out IntPtr outLeaderboardRecord);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_CopyLeaderboardRecordByUserId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardRecordByUserId(IntPtr handle, ref Leaderboards.CopyLeaderboardRecordByUserIdOptionsInternal options, out IntPtr outLeaderboardRecord);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_CopyLeaderboardUserScoreByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(IntPtr handle, ref Leaderboards.CopyLeaderboardUserScoreByIndexOptionsInternal options, out IntPtr outLeaderboardUserScore);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_CopyLeaderboardUserScoreByUserId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(IntPtr handle, ref Leaderboards.CopyLeaderboardUserScoreByUserIdOptionsInternal options, out IntPtr outLeaderboardUserScore);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_Definition_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Leaderboards_Definition_Release(IntPtr leaderboardDefinition);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_GetLeaderboardDefinitionCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Leaderboards_GetLeaderboardDefinitionCount(IntPtr handle, ref Leaderboards.GetLeaderboardDefinitionCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_GetLeaderboardRecordCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Leaderboards_GetLeaderboardRecordCount(IntPtr handle, ref Leaderboards.GetLeaderboardRecordCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_GetLeaderboardUserScoreCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Leaderboards_GetLeaderboardUserScoreCount(IntPtr handle, ref Leaderboards.GetLeaderboardUserScoreCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_LeaderboardRecord_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Leaderboards_LeaderboardRecord_Release(IntPtr leaderboardRecord);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_LeaderboardUserScore_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Leaderboards_LeaderboardUserScore_Release(IntPtr leaderboardUserScore);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_QueryLeaderboardDefinitions", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Leaderboards_QueryLeaderboardDefinitions(IntPtr handle, ref Leaderboards.QueryLeaderboardDefinitionsOptionsInternal options, IntPtr clientData, Leaderboards.OnQueryLeaderboardDefinitionsCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_QueryLeaderboardRanks", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Leaderboards_QueryLeaderboardRanks(IntPtr handle, ref Leaderboards.QueryLeaderboardRanksOptionsInternal options, IntPtr clientData, Leaderboards.OnQueryLeaderboardRanksCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Leaderboards_QueryLeaderboardUserScores", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Leaderboards_QueryLeaderboardUserScores(IntPtr handle, ref Leaderboards.QueryLeaderboardUserScoresOptionsInternal options, IntPtr clientData, Leaderboards.OnQueryLeaderboardUserScoresCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_CopyAttributeByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyDetails_CopyAttributeByIndex(IntPtr handle, ref Lobby.LobbyDetailsCopyAttributeByIndexOptionsInternal options, out IntPtr outAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_CopyAttributeByKey", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyDetails_CopyAttributeByKey(IntPtr handle, ref Lobby.LobbyDetailsCopyAttributeByKeyOptionsInternal options, out IntPtr outAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_CopyInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyDetails_CopyInfo(IntPtr handle, ref Lobby.LobbyDetailsCopyInfoOptionsInternal options, out IntPtr outLobbyDetailsInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_CopyMemberAttributeByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyDetails_CopyMemberAttributeByIndex(IntPtr handle, ref Lobby.LobbyDetailsCopyMemberAttributeByIndexOptionsInternal options, out IntPtr outAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_CopyMemberAttributeByKey", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyDetails_CopyMemberAttributeByKey(IntPtr handle, ref Lobby.LobbyDetailsCopyMemberAttributeByKeyOptionsInternal options, out IntPtr outAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_CopyMemberInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyDetails_CopyMemberInfo(IntPtr handle, ref Lobby.LobbyDetailsCopyMemberInfoOptionsInternal options, out IntPtr outLobbyDetailsMemberInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_GetAttributeCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_LobbyDetails_GetAttributeCount(IntPtr handle, ref Lobby.LobbyDetailsGetAttributeCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_GetLobbyOwner", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_LobbyDetails_GetLobbyOwner(IntPtr handle, ref Lobby.LobbyDetailsGetLobbyOwnerOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_GetMemberAttributeCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_LobbyDetails_GetMemberAttributeCount(IntPtr handle, ref Lobby.LobbyDetailsGetMemberAttributeCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_GetMemberByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_LobbyDetails_GetMemberByIndex(IntPtr handle, ref Lobby.LobbyDetailsGetMemberByIndexOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_GetMemberCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_LobbyDetails_GetMemberCount(IntPtr handle, ref Lobby.LobbyDetailsGetMemberCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_Info_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_LobbyDetails_Info_Release(IntPtr lobbyDetailsInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_MemberInfo_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_LobbyDetails_MemberInfo_Release(IntPtr lobbyDetailsMemberInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyDetails_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_LobbyDetails_Release(IntPtr lobbyHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_AddAttribute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_AddAttribute(IntPtr handle, ref Lobby.LobbyModificationAddAttributeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_AddMemberAttribute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_AddMemberAttribute(IntPtr handle, ref Lobby.LobbyModificationAddMemberAttributeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_LobbyModification_Release(IntPtr lobbyModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_RemoveAttribute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_RemoveAttribute(IntPtr handle, ref Lobby.LobbyModificationRemoveAttributeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_RemoveMemberAttribute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_RemoveMemberAttribute(IntPtr handle, ref Lobby.LobbyModificationRemoveMemberAttributeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_SetAllowedPlatformIds", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_SetAllowedPlatformIds(IntPtr handle, ref Lobby.LobbyModificationSetAllowedPlatformIdsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_SetBucketId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_SetBucketId(IntPtr handle, ref Lobby.LobbyModificationSetBucketIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_SetInvitesAllowed", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_SetInvitesAllowed(IntPtr handle, ref Lobby.LobbyModificationSetInvitesAllowedOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_SetMaxMembers", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_SetMaxMembers(IntPtr handle, ref Lobby.LobbyModificationSetMaxMembersOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbyModification_SetPermissionLevel", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbyModification_SetPermissionLevel(IntPtr handle, ref Lobby.LobbyModificationSetPermissionLevelOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_CopySearchResultByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbySearch_CopySearchResultByIndex(IntPtr handle, ref Lobby.LobbySearchCopySearchResultByIndexOptionsInternal options, out IntPtr outLobbyDetailsHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_Find", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_LobbySearch_Find(IntPtr handle, ref Lobby.LobbySearchFindOptionsInternal options, IntPtr clientData, Lobby.LobbySearchOnFindCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_GetSearchResultCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_LobbySearch_GetSearchResultCount(IntPtr handle, ref Lobby.LobbySearchGetSearchResultCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_LobbySearch_Release(IntPtr lobbySearchHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_RemoveParameter", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbySearch_RemoveParameter(IntPtr handle, ref Lobby.LobbySearchRemoveParameterOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_SetLobbyId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbySearch_SetLobbyId(IntPtr handle, ref Lobby.LobbySearchSetLobbyIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_SetMaxResults", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbySearch_SetMaxResults(IntPtr handle, ref Lobby.LobbySearchSetMaxResultsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_SetParameter", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbySearch_SetParameter(IntPtr handle, ref Lobby.LobbySearchSetParameterOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_LobbySearch_SetTargetUserId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_LobbySearch_SetTargetUserId(IntPtr handle, ref Lobby.LobbySearchSetTargetUserIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyJoinLobbyAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyJoinLobbyAccepted(IntPtr handle, ref Lobby.AddNotifyJoinLobbyAcceptedOptionsInternal options, IntPtr clientData, Lobby.OnJoinLobbyAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLeaveLobbyRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLeaveLobbyRequested(IntPtr handle, ref Lobby.AddNotifyLeaveLobbyRequestedOptionsInternal options, IntPtr clientData, Lobby.OnLeaveLobbyRequestedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLobbyInviteAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteAccepted(IntPtr handle, ref Lobby.AddNotifyLobbyInviteAcceptedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLobbyInviteReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteReceived(IntPtr handle, ref Lobby.AddNotifyLobbyInviteReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyInviteReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLobbyInviteRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteRejected(IntPtr handle, ref Lobby.AddNotifyLobbyInviteRejectedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyInviteRejectedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLobbyMemberStatusReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyMemberStatusReceived(IntPtr handle, ref Lobby.AddNotifyLobbyMemberStatusReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyMemberStatusReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLobbyMemberUpdateReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(IntPtr handle, ref Lobby.AddNotifyLobbyMemberUpdateReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyMemberUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyLobbyUpdateReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyUpdateReceived(IntPtr handle, ref Lobby.AddNotifyLobbyUpdateReceivedOptionsInternal options, IntPtr clientData, Lobby.OnLobbyUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifyRTCRoomConnectionChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifyRTCRoomConnectionChanged(IntPtr handle, ref Lobby.AddNotifyRTCRoomConnectionChangedOptionsInternal options, IntPtr clientData, Lobby.OnRTCRoomConnectionChangedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_AddNotifySendLobbyNativeInviteRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Lobby_AddNotifySendLobbyNativeInviteRequested(IntPtr handle, ref Lobby.AddNotifySendLobbyNativeInviteRequestedOptionsInternal options, IntPtr clientData, Lobby.OnSendLobbyNativeInviteRequestedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_Attribute_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_Attribute_Release(IntPtr lobbyAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_CopyLobbyDetailsHandle", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_CopyLobbyDetailsHandle(IntPtr handle, ref Lobby.CopyLobbyDetailsHandleOptionsInternal options, out IntPtr outLobbyDetailsHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_CopyLobbyDetailsHandleByInviteId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_CopyLobbyDetailsHandleByInviteId(IntPtr handle, ref Lobby.CopyLobbyDetailsHandleByInviteIdOptionsInternal options, out IntPtr outLobbyDetailsHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_CopyLobbyDetailsHandleByUiEventId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(IntPtr handle, ref Lobby.CopyLobbyDetailsHandleByUiEventIdOptionsInternal options, out IntPtr outLobbyDetailsHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_CreateLobby", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_CreateLobby(IntPtr handle, ref Lobby.CreateLobbyOptionsInternal options, IntPtr clientData, Lobby.OnCreateLobbyCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_CreateLobbySearch", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_CreateLobbySearch(IntPtr handle, ref Lobby.CreateLobbySearchOptionsInternal options, out IntPtr outLobbySearchHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_DestroyLobby", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_DestroyLobby(IntPtr handle, ref Lobby.DestroyLobbyOptionsInternal options, IntPtr clientData, Lobby.OnDestroyLobbyCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_GetConnectString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_GetConnectString(IntPtr handle, ref Lobby.GetConnectStringOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_GetInviteCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Lobby_GetInviteCount(IntPtr handle, ref Lobby.GetInviteCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_GetInviteIdByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_GetInviteIdByIndex(IntPtr handle, ref Lobby.GetInviteIdByIndexOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_GetRTCRoomName", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_GetRTCRoomName(IntPtr handle, ref Lobby.GetRTCRoomNameOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_HardMuteMember", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_HardMuteMember(IntPtr handle, ref Lobby.HardMuteMemberOptionsInternal options, IntPtr clientData, Lobby.OnHardMuteMemberCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_IsRTCRoomConnected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_IsRTCRoomConnected(IntPtr handle, ref Lobby.IsRTCRoomConnectedOptionsInternal options, out int outIsConnected);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_JoinLobby", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_JoinLobby(IntPtr handle, ref Lobby.JoinLobbyOptionsInternal options, IntPtr clientData, Lobby.OnJoinLobbyCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_JoinLobbyById", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_JoinLobbyById(IntPtr handle, ref Lobby.JoinLobbyByIdOptionsInternal options, IntPtr clientData, Lobby.OnJoinLobbyByIdCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_JoinRTCRoom", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_JoinRTCRoom(IntPtr handle, ref Lobby.JoinRTCRoomOptionsInternal options, IntPtr clientData, Lobby.OnJoinRTCRoomCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_KickMember", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_KickMember(IntPtr handle, ref Lobby.KickMemberOptionsInternal options, IntPtr clientData, Lobby.OnKickMemberCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_LeaveLobby", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_LeaveLobby(IntPtr handle, ref Lobby.LeaveLobbyOptionsInternal options, IntPtr clientData, Lobby.OnLeaveLobbyCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_LeaveRTCRoom", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_LeaveRTCRoom(IntPtr handle, ref Lobby.LeaveRTCRoomOptionsInternal options, IntPtr clientData, Lobby.OnLeaveRTCRoomCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_ParseConnectString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_ParseConnectString(IntPtr handle, ref Lobby.ParseConnectStringOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_PromoteMember", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_PromoteMember(IntPtr handle, ref Lobby.PromoteMemberOptionsInternal options, IntPtr clientData, Lobby.OnPromoteMemberCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_QueryInvites", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_QueryInvites(IntPtr handle, ref Lobby.QueryInvitesOptionsInternal options, IntPtr clientData, Lobby.OnQueryInvitesCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RejectInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RejectInvite(IntPtr handle, ref Lobby.RejectInviteOptionsInternal options, IntPtr clientData, Lobby.OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyJoinLobbyAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyJoinLobbyAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLeaveLobbyRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLeaveLobbyRequested(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLobbyInviteAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLobbyInviteReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLobbyInviteRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteRejected(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyLobbyUpdateReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyUpdateReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_SendInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_SendInvite(IntPtr handle, ref Lobby.SendInviteOptionsInternal options, IntPtr clientData, Lobby.OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_UpdateLobby", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Lobby_UpdateLobby(IntPtr handle, ref Lobby.UpdateLobbyOptionsInternal options, IntPtr clientData, Lobby.OnUpdateLobbyCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Lobby_UpdateLobbyModification", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Lobby_UpdateLobbyModification(IntPtr handle, ref Lobby.UpdateLobbyModificationOptionsInternal options, out IntPtr outLobbyModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Logging_SetCallback", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Logging_SetCallback(Logging.LogMessageFuncInternal callback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Logging_SetLogLevel", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Logging_SetLogLevel(Logging.LogCategory logCategory, Logging.LogLevel logLevel);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Metrics_BeginPlayerSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Metrics_BeginPlayerSession(IntPtr handle, ref Metrics.BeginPlayerSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Metrics_EndPlayerSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Metrics_EndPlayerSession(IntPtr handle, ref Metrics.EndPlayerSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Mods_CopyModInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Mods_CopyModInfo(IntPtr handle, ref Mods.CopyModInfoOptionsInternal options, out IntPtr outEnumeratedMods);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Mods_EnumerateMods", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Mods_EnumerateMods(IntPtr handle, ref Mods.EnumerateModsOptionsInternal options, IntPtr clientData, Mods.OnEnumerateModsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Mods_InstallMod", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Mods_InstallMod(IntPtr handle, ref Mods.InstallModOptionsInternal options, IntPtr clientData, Mods.OnInstallModCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Mods_ModInfo_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Mods_ModInfo_Release(IntPtr modInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Mods_UninstallMod", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Mods_UninstallMod(IntPtr handle, ref Mods.UninstallModOptionsInternal options, IntPtr clientData, Mods.OnUninstallModCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Mods_UpdateMod", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Mods_UpdateMod(IntPtr handle, ref Mods.UpdateModOptionsInternal options, IntPtr clientData, Mods.OnUpdateModCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_AcceptConnection", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_AcceptConnection(IntPtr handle, ref P2P.AcceptConnectionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_AddNotifyIncomingPacketQueueFull", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_P2P_AddNotifyIncomingPacketQueueFull(IntPtr handle, ref P2P.AddNotifyIncomingPacketQueueFullOptionsInternal options, IntPtr clientData, P2P.OnIncomingPacketQueueFullCallbackInternal incomingPacketQueueFullHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_AddNotifyPeerConnectionClosed", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_P2P_AddNotifyPeerConnectionClosed(IntPtr handle, ref P2P.AddNotifyPeerConnectionClosedOptionsInternal options, IntPtr clientData, P2P.OnRemoteConnectionClosedCallbackInternal connectionClosedHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_AddNotifyPeerConnectionEstablished", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_P2P_AddNotifyPeerConnectionEstablished(IntPtr handle, ref P2P.AddNotifyPeerConnectionEstablishedOptionsInternal options, IntPtr clientData, P2P.OnPeerConnectionEstablishedCallbackInternal connectionEstablishedHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_AddNotifyPeerConnectionInterrupted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_P2P_AddNotifyPeerConnectionInterrupted(IntPtr handle, ref P2P.AddNotifyPeerConnectionInterruptedOptionsInternal options, IntPtr clientData, P2P.OnPeerConnectionInterruptedCallbackInternal connectionInterruptedHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_AddNotifyPeerConnectionRequest", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_P2P_AddNotifyPeerConnectionRequest(IntPtr handle, ref P2P.AddNotifyPeerConnectionRequestOptionsInternal options, IntPtr clientData, P2P.OnIncomingConnectionRequestCallbackInternal connectionRequestHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_ClearPacketQueue", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_ClearPacketQueue(IntPtr handle, ref P2P.ClearPacketQueueOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_CloseConnection", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_CloseConnection(IntPtr handle, ref P2P.CloseConnectionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_CloseConnections", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_CloseConnections(IntPtr handle, ref P2P.CloseConnectionsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_GetNATType", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_GetNATType(IntPtr handle, ref P2P.GetNATTypeOptionsInternal options, out P2P.NATType outNATType);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_GetNextReceivedPacketSize", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_GetNextReceivedPacketSize(IntPtr handle, ref P2P.GetNextReceivedPacketSizeOptionsInternal options, out uint outPacketSizeBytes);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_GetPacketQueueInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_GetPacketQueueInfo(IntPtr handle, ref P2P.GetPacketQueueInfoOptionsInternal options, out P2P.PacketQueueInfoInternal outPacketQueueInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_GetPortRange", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_GetPortRange(IntPtr handle, ref P2P.GetPortRangeOptionsInternal options, out ushort outPort, out ushort outNumAdditionalPortsToTry);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_GetRelayControl", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_GetRelayControl(IntPtr handle, ref P2P.GetRelayControlOptionsInternal options, out P2P.RelayControl outRelayControl);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_QueryNATType", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_P2P_QueryNATType(IntPtr handle, ref P2P.QueryNATTypeOptionsInternal options, IntPtr clientData, P2P.OnQueryNATTypeCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_ReceivePacket", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_ReceivePacket(IntPtr handle, ref P2P.ReceivePacketOptionsInternal options, out IntPtr outPeerId, IntPtr outSocketId, out byte outChannel, IntPtr outData, out uint outBytesWritten);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_RemoveNotifyIncomingPacketQueueFull", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_P2P_RemoveNotifyIncomingPacketQueueFull(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_RemoveNotifyPeerConnectionClosed", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_P2P_RemoveNotifyPeerConnectionClosed(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_RemoveNotifyPeerConnectionEstablished", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_P2P_RemoveNotifyPeerConnectionEstablished(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_RemoveNotifyPeerConnectionInterrupted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_P2P_RemoveNotifyPeerConnectionInterrupted(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_RemoveNotifyPeerConnectionRequest", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_P2P_RemoveNotifyPeerConnectionRequest(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_SendPacket", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_SendPacket(IntPtr handle, ref P2P.SendPacketOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_SetPacketQueueSize", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_SetPacketQueueSize(IntPtr handle, ref P2P.SetPacketQueueSizeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_SetPortRange", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_SetPortRange(IntPtr handle, ref P2P.SetPortRangeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_P2P_SetRelayControl", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_P2P_SetRelayControl(IntPtr handle, ref P2P.SetRelayControlOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_CheckForLauncherAndRestart", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_CheckForLauncherAndRestart(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_Create", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_Create(ref Platform.OptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetAchievementsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetAchievementsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetActiveCountryCode", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_GetActiveCountryCode(IntPtr handle, IntPtr localUserId, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetActiveLocaleCode", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_GetActiveLocaleCode(IntPtr handle, IntPtr localUserId, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetAntiCheatClientInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetAntiCheatClientInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetAntiCheatServerInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetAntiCheatServerInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetApplicationStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Platform.ApplicationStatus EOS_Platform_GetApplicationStatus(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetAuthInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetAuthInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetConnectInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetConnectInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetCustomInvitesInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetCustomInvitesInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetDesktopCrossplayStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_GetDesktopCrossplayStatus(IntPtr handle, ref Platform.GetDesktopCrossplayStatusOptionsInternal options, out Platform.DesktopCrossplayStatusInfoInternal outDesktopCrossplayStatusInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetEcomInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetEcomInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetFriendsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetFriendsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetIntegratedPlatformInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetIntegratedPlatformInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetKWSInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetKWSInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetLeaderboardsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetLeaderboardsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetLobbyInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetLobbyInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetMetricsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetMetricsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetModsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetModsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetNetworkStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Platform.NetworkStatus EOS_Platform_GetNetworkStatus(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetOverrideCountryCode", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_GetOverrideCountryCode(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetOverrideLocaleCode", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_GetOverrideLocaleCode(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetP2PInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetP2PInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetPlayerDataStorageInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetPlayerDataStorageInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetPresenceInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetPresenceInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetProgressionSnapshotInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetProgressionSnapshotInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetRTCAdminInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetRTCAdminInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetRTCInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetRTCInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetReportsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetReportsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetSanctionsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetSanctionsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetSessionsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetSessionsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetStatsInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetStatsInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetTitleStorageInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetTitleStorageInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetUIInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetUIInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_GetUserInfoInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_Platform_GetUserInfoInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Platform_Release(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_SetApplicationStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_SetApplicationStatus(IntPtr handle, Platform.ApplicationStatus newStatus);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_SetNetworkStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_SetNetworkStatus(IntPtr handle, Platform.NetworkStatus newStatus);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_SetOverrideCountryCode", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_SetOverrideCountryCode(IntPtr handle, IntPtr newCountryCode);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_SetOverrideLocaleCode", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Platform_SetOverrideLocaleCode(IntPtr handle, IntPtr newLocaleCode);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Platform_Tick", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Platform_Tick(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorageFileTransferRequest_CancelRequest", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorageFileTransferRequest_CancelRequest(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorageFileTransferRequest_GetFilename", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorageFileTransferRequest_GetFilename(IntPtr handle, uint filenameStringBufferSizeBytes, IntPtr outStringBuffer, out int outStringLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorageFileTransferRequest_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PlayerDataStorageFileTransferRequest_Release(IntPtr playerDataStorageFileTransferHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_CopyFileMetadataAtIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorage_CopyFileMetadataAtIndex(IntPtr handle, ref PlayerDataStorage.CopyFileMetadataAtIndexOptionsInternal copyFileMetadataOptions, out IntPtr outMetadata);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_CopyFileMetadataByFilename", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorage_CopyFileMetadataByFilename(IntPtr handle, ref PlayerDataStorage.CopyFileMetadataByFilenameOptionsInternal copyFileMetadataOptions, out IntPtr outMetadata);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_DeleteCache", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorage_DeleteCache(IntPtr handle, ref PlayerDataStorage.DeleteCacheOptionsInternal options, IntPtr clientData, PlayerDataStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_DeleteFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PlayerDataStorage_DeleteFile(IntPtr handle, ref PlayerDataStorage.DeleteFileOptionsInternal deleteOptions, IntPtr clientData, PlayerDataStorage.OnDeleteFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_DuplicateFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PlayerDataStorage_DuplicateFile(IntPtr handle, ref PlayerDataStorage.DuplicateFileOptionsInternal duplicateOptions, IntPtr clientData, PlayerDataStorage.OnDuplicateFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_FileMetadata_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PlayerDataStorage_FileMetadata_Release(IntPtr fileMetadata);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_GetFileMetadataCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PlayerDataStorage_GetFileMetadataCount(IntPtr handle, ref PlayerDataStorage.GetFileMetadataCountOptionsInternal getFileMetadataCountOptions, out int outFileMetadataCount);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_QueryFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PlayerDataStorage_QueryFile(IntPtr handle, ref PlayerDataStorage.QueryFileOptionsInternal queryFileOptions, IntPtr clientData, PlayerDataStorage.OnQueryFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_QueryFileList", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PlayerDataStorage_QueryFileList(IntPtr handle, ref PlayerDataStorage.QueryFileListOptionsInternal queryFileListOptions, IntPtr clientData, PlayerDataStorage.OnQueryFileListCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_ReadFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_PlayerDataStorage_ReadFile(IntPtr handle, ref PlayerDataStorage.ReadFileOptionsInternal readOptions, IntPtr clientData, PlayerDataStorage.OnReadFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PlayerDataStorage_WriteFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_PlayerDataStorage_WriteFile(IntPtr handle, ref PlayerDataStorage.WriteFileOptionsInternal writeOptions, IntPtr clientData, PlayerDataStorage.OnWriteFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PresenceModification_DeleteData", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PresenceModification_DeleteData(IntPtr handle, ref Presence.PresenceModificationDeleteDataOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PresenceModification_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_PresenceModification_Release(IntPtr presenceModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PresenceModification_SetData", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PresenceModification_SetData(IntPtr handle, ref Presence.PresenceModificationSetDataOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PresenceModification_SetJoinInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PresenceModification_SetJoinInfo(IntPtr handle, ref Presence.PresenceModificationSetJoinInfoOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PresenceModification_SetRawRichText", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PresenceModification_SetRawRichText(IntPtr handle, ref Presence.PresenceModificationSetRawRichTextOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_PresenceModification_SetStatus", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_PresenceModification_SetStatus(IntPtr handle, ref Presence.PresenceModificationSetStatusOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_AddNotifyJoinGameAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Presence_AddNotifyJoinGameAccepted(IntPtr handle, ref Presence.AddNotifyJoinGameAcceptedOptionsInternal options, IntPtr clientData, Presence.OnJoinGameAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_AddNotifyOnPresenceChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Presence_AddNotifyOnPresenceChanged(IntPtr handle, ref Presence.AddNotifyOnPresenceChangedOptionsInternal options, IntPtr clientData, Presence.OnPresenceChangedCallbackInternal notificationHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_CopyPresence", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Presence_CopyPresence(IntPtr handle, ref Presence.CopyPresenceOptionsInternal options, out IntPtr outPresence);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_CreatePresenceModification", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Presence_CreatePresenceModification(IntPtr handle, ref Presence.CreatePresenceModificationOptionsInternal options, out IntPtr outPresenceModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_GetJoinInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Presence_GetJoinInfo(IntPtr handle, ref Presence.GetJoinInfoOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_HasPresence", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_Presence_HasPresence(IntPtr handle, ref Presence.HasPresenceOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_Info_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Presence_Info_Release(IntPtr presenceInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_QueryPresence", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Presence_QueryPresence(IntPtr handle, ref Presence.QueryPresenceOptionsInternal options, IntPtr clientData, Presence.OnQueryPresenceCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_RemoveNotifyJoinGameAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Presence_RemoveNotifyJoinGameAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_RemoveNotifyOnPresenceChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Presence_RemoveNotifyOnPresenceChanged(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Presence_SetPresence", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Presence_SetPresence(IntPtr handle, ref Presence.SetPresenceOptionsInternal options, IntPtr clientData, Presence.SetPresenceCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProductUserId_FromString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_ProductUserId_FromString(IntPtr productUserIdString);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProductUserId_IsValid", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_ProductUserId_IsValid(IntPtr accountId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProductUserId_ToString", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ProductUserId_ToString(IntPtr accountId, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProgressionSnapshot_AddProgression", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ProgressionSnapshot_AddProgression(IntPtr handle, ref ProgressionSnapshot.AddProgressionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProgressionSnapshot_BeginSnapshot", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ProgressionSnapshot_BeginSnapshot(IntPtr handle, ref ProgressionSnapshot.BeginSnapshotOptionsInternal options, out uint outSnapshotId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProgressionSnapshot_DeleteSnapshot", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_ProgressionSnapshot_DeleteSnapshot(IntPtr handle, ref ProgressionSnapshot.DeleteSnapshotOptionsInternal options, IntPtr clientData, ProgressionSnapshot.OnDeleteSnapshotCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProgressionSnapshot_EndSnapshot", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_ProgressionSnapshot_EndSnapshot(IntPtr handle, ref ProgressionSnapshot.EndSnapshotOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_ProgressionSnapshot_SubmitSnapshot", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_ProgressionSnapshot_SubmitSnapshot(IntPtr handle, ref ProgressionSnapshot.SubmitSnapshotOptionsInternal options, IntPtr clientData, ProgressionSnapshot.OnSubmitSnapshotCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAdmin_CopyUserTokenByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAdmin_CopyUserTokenByIndex(IntPtr handle, ref RTCAdmin.CopyUserTokenByIndexOptionsInternal options, out IntPtr outUserToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAdmin_CopyUserTokenByUserId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAdmin_CopyUserTokenByUserId(IntPtr handle, ref RTCAdmin.CopyUserTokenByUserIdOptionsInternal options, out IntPtr outUserToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAdmin_Kick", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAdmin_Kick(IntPtr handle, ref RTCAdmin.KickOptionsInternal options, IntPtr clientData, RTCAdmin.OnKickCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAdmin_QueryJoinRoomToken", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAdmin_QueryJoinRoomToken(IntPtr handle, ref RTCAdmin.QueryJoinRoomTokenOptionsInternal options, IntPtr clientData, RTCAdmin.OnQueryJoinRoomTokenCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAdmin_SetParticipantHardMute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAdmin_SetParticipantHardMute(IntPtr handle, ref RTCAdmin.SetParticipantHardMuteOptionsInternal options, IntPtr clientData, RTCAdmin.OnSetParticipantHardMuteCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAdmin_UserToken_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAdmin_UserToken_Release(IntPtr userToken);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_AddNotifyAudioBeforeRender", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioBeforeRender(IntPtr handle, ref RTCAudio.AddNotifyAudioBeforeRenderOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioBeforeRenderCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_AddNotifyAudioBeforeSend", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioBeforeSend(IntPtr handle, ref RTCAudio.AddNotifyAudioBeforeSendOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioBeforeSendCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_AddNotifyAudioDevicesChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioDevicesChanged(IntPtr handle, ref RTCAudio.AddNotifyAudioDevicesChangedOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioDevicesChangedCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_AddNotifyAudioInputState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioInputState(IntPtr handle, ref RTCAudio.AddNotifyAudioInputStateOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioInputStateCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_AddNotifyAudioOutputState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioOutputState(IntPtr handle, ref RTCAudio.AddNotifyAudioOutputStateOptionsInternal options, IntPtr clientData, RTCAudio.OnAudioOutputStateCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_AddNotifyParticipantUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCAudio_AddNotifyParticipantUpdated(IntPtr handle, ref RTCAudio.AddNotifyParticipantUpdatedOptionsInternal options, IntPtr clientData, RTCAudio.OnParticipantUpdatedCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_CopyInputDeviceInformationByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_CopyInputDeviceInformationByIndex(IntPtr handle, ref RTCAudio.CopyInputDeviceInformationByIndexOptionsInternal options, out IntPtr outInputDeviceInformation);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_CopyOutputDeviceInformationByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_CopyOutputDeviceInformationByIndex(IntPtr handle, ref RTCAudio.CopyOutputDeviceInformationByIndexOptionsInternal options, out IntPtr outOutputDeviceInformation);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_GetAudioInputDeviceByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_RTCAudio_GetAudioInputDeviceByIndex(IntPtr handle, ref RTCAudio.GetAudioInputDeviceByIndexOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_GetAudioInputDevicesCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_RTCAudio_GetAudioInputDevicesCount(IntPtr handle, ref RTCAudio.GetAudioInputDevicesCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_GetAudioOutputDeviceByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_RTCAudio_GetAudioOutputDeviceByIndex(IntPtr handle, ref RTCAudio.GetAudioOutputDeviceByIndexOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_GetAudioOutputDevicesCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_RTCAudio_GetAudioOutputDevicesCount(IntPtr handle, ref RTCAudio.GetAudioOutputDevicesCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_GetInputDevicesCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_RTCAudio_GetInputDevicesCount(IntPtr handle, ref RTCAudio.GetInputDevicesCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_GetOutputDevicesCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_RTCAudio_GetOutputDevicesCount(IntPtr handle, ref RTCAudio.GetOutputDevicesCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_InputDeviceInformation_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_InputDeviceInformation_Release(IntPtr deviceInformation);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_OutputDeviceInformation_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_OutputDeviceInformation_Release(IntPtr deviceInformation);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_QueryInputDevicesInformation", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_QueryInputDevicesInformation(IntPtr handle, ref RTCAudio.QueryInputDevicesInformationOptionsInternal options, IntPtr clientData, RTCAudio.OnQueryInputDevicesInformationCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_QueryOutputDevicesInformation", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_QueryOutputDevicesInformation(IntPtr handle, ref RTCAudio.QueryOutputDevicesInformationOptionsInternal options, IntPtr clientData, RTCAudio.OnQueryOutputDevicesInformationCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RegisterPlatformAudioUser", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_RegisterPlatformAudioUser(IntPtr handle, ref RTCAudio.RegisterPlatformAudioUserOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RegisterPlatformUser", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RegisterPlatformUser(IntPtr handle, ref RTCAudio.RegisterPlatformUserOptionsInternal options, IntPtr clientData, RTCAudio.OnRegisterPlatformUserCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RemoveNotifyAudioBeforeRender", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioBeforeRender(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RemoveNotifyAudioBeforeSend", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioBeforeSend(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RemoveNotifyAudioDevicesChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioDevicesChanged(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RemoveNotifyAudioInputState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioInputState(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RemoveNotifyAudioOutputState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioOutputState(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_RemoveNotifyParticipantUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_RemoveNotifyParticipantUpdated(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_SendAudio", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_SendAudio(IntPtr handle, ref RTCAudio.SendAudioOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_SetAudioInputSettings", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_SetAudioInputSettings(IntPtr handle, ref RTCAudio.SetAudioInputSettingsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_SetAudioOutputSettings", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_SetAudioOutputSettings(IntPtr handle, ref RTCAudio.SetAudioOutputSettingsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_SetInputDeviceSettings", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_SetInputDeviceSettings(IntPtr handle, ref RTCAudio.SetInputDeviceSettingsOptionsInternal options, IntPtr clientData, RTCAudio.OnSetInputDeviceSettingsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_SetOutputDeviceSettings", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_SetOutputDeviceSettings(IntPtr handle, ref RTCAudio.SetOutputDeviceSettingsOptionsInternal options, IntPtr clientData, RTCAudio.OnSetOutputDeviceSettingsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UnregisterPlatformAudioUser", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCAudio_UnregisterPlatformAudioUser(IntPtr handle, ref RTCAudio.UnregisterPlatformAudioUserOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UnregisterPlatformUser", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_UnregisterPlatformUser(IntPtr handle, ref RTCAudio.UnregisterPlatformUserOptionsInternal options, IntPtr clientData, RTCAudio.OnUnregisterPlatformUserCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UpdateParticipantVolume", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_UpdateParticipantVolume(IntPtr handle, ref RTCAudio.UpdateParticipantVolumeOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateParticipantVolumeCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UpdateReceiving", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_UpdateReceiving(IntPtr handle, ref RTCAudio.UpdateReceivingOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateReceivingCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UpdateReceivingVolume", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_UpdateReceivingVolume(IntPtr handle, ref RTCAudio.UpdateReceivingVolumeOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateReceivingVolumeCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UpdateSending", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_UpdateSending(IntPtr handle, ref RTCAudio.UpdateSendingOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateSendingCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCAudio_UpdateSendingVolume", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCAudio_UpdateSendingVolume(IntPtr handle, ref RTCAudio.UpdateSendingVolumeOptionsInternal options, IntPtr clientData, RTCAudio.OnUpdateSendingVolumeCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_AddNotifyDataReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCData_AddNotifyDataReceived(IntPtr handle, ref RTCData.AddNotifyDataReceivedOptionsInternal options, IntPtr clientData, RTCData.OnDataReceivedCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_AddNotifyParticipantUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTCData_AddNotifyParticipantUpdated(IntPtr handle, ref RTCData.AddNotifyParticipantUpdatedOptionsInternal options, IntPtr clientData, RTCData.OnParticipantUpdatedCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_RemoveNotifyDataReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCData_RemoveNotifyDataReceived(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_RemoveNotifyParticipantUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCData_RemoveNotifyParticipantUpdated(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_SendData", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTCData_SendData(IntPtr handle, ref RTCData.SendDataOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_UpdateReceiving", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCData_UpdateReceiving(IntPtr handle, ref RTCData.UpdateReceivingOptionsInternal options, IntPtr clientData, RTCData.OnUpdateReceivingCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTCData_UpdateSending", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTCData_UpdateSending(IntPtr handle, ref RTCData.UpdateSendingOptionsInternal options, IntPtr clientData, RTCData.OnUpdateSendingCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_AddNotifyDisconnected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTC_AddNotifyDisconnected(IntPtr handle, ref RTC.AddNotifyDisconnectedOptionsInternal options, IntPtr clientData, RTC.OnDisconnectedCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_AddNotifyParticipantStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTC_AddNotifyParticipantStatusChanged(IntPtr handle, ref RTC.AddNotifyParticipantStatusChangedOptionsInternal options, IntPtr clientData, RTC.OnParticipantStatusChangedCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_AddNotifyRoomStatisticsUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_RTC_AddNotifyRoomStatisticsUpdated(IntPtr handle, ref RTC.AddNotifyRoomStatisticsUpdatedOptionsInternal options, IntPtr clientData, RTC.OnRoomStatisticsUpdatedCallbackInternal statisticsUpdateHandler);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_BlockParticipant", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTC_BlockParticipant(IntPtr handle, ref RTC.BlockParticipantOptionsInternal options, IntPtr clientData, RTC.OnBlockParticipantCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_GetAudioInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_RTC_GetAudioInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_GetDataInterface", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_RTC_GetDataInterface(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_JoinRoom", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTC_JoinRoom(IntPtr handle, ref RTC.JoinRoomOptionsInternal options, IntPtr clientData, RTC.OnJoinRoomCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_LeaveRoom", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTC_LeaveRoom(IntPtr handle, ref RTC.LeaveRoomOptionsInternal options, IntPtr clientData, RTC.OnLeaveRoomCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_RemoveNotifyDisconnected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTC_RemoveNotifyDisconnected(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_RemoveNotifyParticipantStatusChanged", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTC_RemoveNotifyParticipantStatusChanged(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_RemoveNotifyRoomStatisticsUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_RTC_RemoveNotifyRoomStatisticsUpdated(IntPtr handle, ulong notificationId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_SetRoomSetting", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTC_SetRoomSetting(IntPtr handle, ref RTC.SetRoomSettingOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_RTC_SetSetting", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_RTC_SetSetting(IntPtr handle, ref RTC.SetSettingOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Reports_SendPlayerBehaviorReport", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Reports_SendPlayerBehaviorReport(IntPtr handle, ref Reports.SendPlayerBehaviorReportOptionsInternal options, IntPtr clientData, Reports.OnSendPlayerBehaviorReportCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sanctions_CopyPlayerSanctionByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sanctions_CopyPlayerSanctionByIndex(IntPtr handle, ref Sanctions.CopyPlayerSanctionByIndexOptionsInternal options, out IntPtr outSanction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sanctions_CreatePlayerSanctionAppeal", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sanctions_CreatePlayerSanctionAppeal(IntPtr handle, ref Sanctions.CreatePlayerSanctionAppealOptionsInternal options, IntPtr clientData, Sanctions.CreatePlayerSanctionAppealCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sanctions_GetPlayerSanctionCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Sanctions_GetPlayerSanctionCount(IntPtr handle, ref Sanctions.GetPlayerSanctionCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sanctions_PlayerSanction_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sanctions_PlayerSanction_Release(IntPtr sanction);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sanctions_QueryActivePlayerSanctions", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sanctions_QueryActivePlayerSanctions(IntPtr handle, ref Sanctions.QueryActivePlayerSanctionsOptionsInternal options, IntPtr clientData, Sanctions.OnQueryActivePlayerSanctionsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_Attribute_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_SessionDetails_Attribute_Release(IntPtr sessionAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_CopyInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionDetails_CopyInfo(IntPtr handle, ref Sessions.SessionDetailsCopyInfoOptionsInternal options, out IntPtr outSessionInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_CopySessionAttributeByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionDetails_CopySessionAttributeByIndex(IntPtr handle, ref Sessions.SessionDetailsCopySessionAttributeByIndexOptionsInternal options, out IntPtr outSessionAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_CopySessionAttributeByKey", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionDetails_CopySessionAttributeByKey(IntPtr handle, ref Sessions.SessionDetailsCopySessionAttributeByKeyOptionsInternal options, out IntPtr outSessionAttribute);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_GetSessionAttributeCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_SessionDetails_GetSessionAttributeCount(IntPtr handle, ref Sessions.SessionDetailsGetSessionAttributeCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_Info_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_SessionDetails_Info_Release(IntPtr sessionInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionDetails_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_SessionDetails_Release(IntPtr sessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_AddAttribute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_AddAttribute(IntPtr handle, ref Sessions.SessionModificationAddAttributeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_SessionModification_Release(IntPtr sessionModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_RemoveAttribute", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_RemoveAttribute(IntPtr handle, ref Sessions.SessionModificationRemoveAttributeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetAllowedPlatformIds", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetAllowedPlatformIds(IntPtr handle, ref Sessions.SessionModificationSetAllowedPlatformIdsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetBucketId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetBucketId(IntPtr handle, ref Sessions.SessionModificationSetBucketIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetHostAddress", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetHostAddress(IntPtr handle, ref Sessions.SessionModificationSetHostAddressOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetInvitesAllowed", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetInvitesAllowed(IntPtr handle, ref Sessions.SessionModificationSetInvitesAllowedOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetJoinInProgressAllowed", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetJoinInProgressAllowed(IntPtr handle, ref Sessions.SessionModificationSetJoinInProgressAllowedOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetMaxPlayers", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetMaxPlayers(IntPtr handle, ref Sessions.SessionModificationSetMaxPlayersOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionModification_SetPermissionLevel", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionModification_SetPermissionLevel(IntPtr handle, ref Sessions.SessionModificationSetPermissionLevelOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_CopySearchResultByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionSearch_CopySearchResultByIndex(IntPtr handle, ref Sessions.SessionSearchCopySearchResultByIndexOptionsInternal options, out IntPtr outSessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_Find", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_SessionSearch_Find(IntPtr handle, ref Sessions.SessionSearchFindOptionsInternal options, IntPtr clientData, Sessions.SessionSearchOnFindCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_GetSearchResultCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_SessionSearch_GetSearchResultCount(IntPtr handle, ref Sessions.SessionSearchGetSearchResultCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_SessionSearch_Release(IntPtr sessionSearchHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_RemoveParameter", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionSearch_RemoveParameter(IntPtr handle, ref Sessions.SessionSearchRemoveParameterOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_SetMaxResults", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionSearch_SetMaxResults(IntPtr handle, ref Sessions.SessionSearchSetMaxResultsOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_SetParameter", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionSearch_SetParameter(IntPtr handle, ref Sessions.SessionSearchSetParameterOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_SetSessionId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionSearch_SetSessionId(IntPtr handle, ref Sessions.SessionSearchSetSessionIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_SessionSearch_SetTargetUserId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_SessionSearch_SetTargetUserId(IntPtr handle, ref Sessions.SessionSearchSetTargetUserIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_AddNotifyJoinSessionAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Sessions_AddNotifyJoinSessionAccepted(IntPtr handle, ref Sessions.AddNotifyJoinSessionAcceptedOptionsInternal options, IntPtr clientData, Sessions.OnJoinSessionAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_AddNotifyLeaveSessionRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Sessions_AddNotifyLeaveSessionRequested(IntPtr handle, ref Sessions.AddNotifyLeaveSessionRequestedOptionsInternal options, IntPtr clientData, Sessions.OnLeaveSessionRequestedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_AddNotifySendSessionNativeInviteRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Sessions_AddNotifySendSessionNativeInviteRequested(IntPtr handle, ref Sessions.AddNotifySendSessionNativeInviteRequestedOptionsInternal options, IntPtr clientData, Sessions.OnSendSessionNativeInviteRequestedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_AddNotifySessionInviteAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Sessions_AddNotifySessionInviteAccepted(IntPtr handle, ref Sessions.AddNotifySessionInviteAcceptedOptionsInternal options, IntPtr clientData, Sessions.OnSessionInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_AddNotifySessionInviteReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Sessions_AddNotifySessionInviteReceived(IntPtr handle, ref Sessions.AddNotifySessionInviteReceivedOptionsInternal options, IntPtr clientData, Sessions.OnSessionInviteReceivedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_AddNotifySessionInviteRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_Sessions_AddNotifySessionInviteRejected(IntPtr handle, ref Sessions.AddNotifySessionInviteRejectedOptionsInternal options, IntPtr clientData, Sessions.OnSessionInviteRejectedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_CopyActiveSessionHandle", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_CopyActiveSessionHandle(IntPtr handle, ref Sessions.CopyActiveSessionHandleOptionsInternal options, out IntPtr outSessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_CopySessionHandleByInviteId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_CopySessionHandleByInviteId(IntPtr handle, ref Sessions.CopySessionHandleByInviteIdOptionsInternal options, out IntPtr outSessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_CopySessionHandleByUiEventId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_CopySessionHandleByUiEventId(IntPtr handle, ref Sessions.CopySessionHandleByUiEventIdOptionsInternal options, out IntPtr outSessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_CopySessionHandleForPresence", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_CopySessionHandleForPresence(IntPtr handle, ref Sessions.CopySessionHandleForPresenceOptionsInternal options, out IntPtr outSessionHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_CreateSessionModification", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_CreateSessionModification(IntPtr handle, ref Sessions.CreateSessionModificationOptionsInternal options, out IntPtr outSessionModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_CreateSessionSearch", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_CreateSessionSearch(IntPtr handle, ref Sessions.CreateSessionSearchOptionsInternal options, out IntPtr outSessionSearchHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_DestroySession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_DestroySession(IntPtr handle, ref Sessions.DestroySessionOptionsInternal options, IntPtr clientData, Sessions.OnDestroySessionCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_DumpSessionState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_DumpSessionState(IntPtr handle, ref Sessions.DumpSessionStateOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_EndSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_EndSession(IntPtr handle, ref Sessions.EndSessionOptionsInternal options, IntPtr clientData, Sessions.OnEndSessionCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_GetInviteCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Sessions_GetInviteCount(IntPtr handle, ref Sessions.GetInviteCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_GetInviteIdByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_GetInviteIdByIndex(IntPtr handle, ref Sessions.GetInviteIdByIndexOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_IsUserInSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_IsUserInSession(IntPtr handle, ref Sessions.IsUserInSessionOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_JoinSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_JoinSession(IntPtr handle, ref Sessions.JoinSessionOptionsInternal options, IntPtr clientData, Sessions.OnJoinSessionCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_QueryInvites", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_QueryInvites(IntPtr handle, ref Sessions.QueryInvitesOptionsInternal options, IntPtr clientData, Sessions.OnQueryInvitesCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RegisterPlayers", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RegisterPlayers(IntPtr handle, ref Sessions.RegisterPlayersOptionsInternal options, IntPtr clientData, Sessions.OnRegisterPlayersCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RejectInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RejectInvite(IntPtr handle, ref Sessions.RejectInviteOptionsInternal options, IntPtr clientData, Sessions.OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RemoveNotifyJoinSessionAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RemoveNotifyJoinSessionAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RemoveNotifyLeaveSessionRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RemoveNotifyLeaveSessionRequested(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RemoveNotifySessionInviteAccepted", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RemoveNotifySessionInviteAccepted(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RemoveNotifySessionInviteReceived", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RemoveNotifySessionInviteReceived(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_RemoveNotifySessionInviteRejected", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_RemoveNotifySessionInviteRejected(IntPtr handle, ulong inId);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_SendInvite", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_SendInvite(IntPtr handle, ref Sessions.SendInviteOptionsInternal options, IntPtr clientData, Sessions.OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_StartSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_StartSession(IntPtr handle, ref Sessions.StartSessionOptionsInternal options, IntPtr clientData, Sessions.OnStartSessionCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_UnregisterPlayers", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_UnregisterPlayers(IntPtr handle, ref Sessions.UnregisterPlayersOptionsInternal options, IntPtr clientData, Sessions.OnUnregisterPlayersCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_UpdateSession", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Sessions_UpdateSession(IntPtr handle, ref Sessions.UpdateSessionOptionsInternal options, IntPtr clientData, Sessions.OnUpdateSessionCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Sessions_UpdateSessionModification", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Sessions_UpdateSessionModification(IntPtr handle, ref Sessions.UpdateSessionModificationOptionsInternal options, out IntPtr outSessionModificationHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Shutdown", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Shutdown();

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Stats_CopyStatByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Stats_CopyStatByIndex(IntPtr handle, ref Stats.CopyStatByIndexOptionsInternal options, out IntPtr outStat);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Stats_CopyStatByName", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_Stats_CopyStatByName(IntPtr handle, ref Stats.CopyStatByNameOptionsInternal options, out IntPtr outStat);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Stats_GetStatsCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_Stats_GetStatsCount(IntPtr handle, ref Stats.GetStatCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Stats_IngestStat", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Stats_IngestStat(IntPtr handle, ref Stats.IngestStatOptionsInternal options, IntPtr clientData, Stats.OnIngestStatCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Stats_QueryStats", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Stats_QueryStats(IntPtr handle, ref Stats.QueryStatsOptionsInternal options, IntPtr clientData, Stats.OnQueryStatsCompleteCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_Stats_Stat_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_Stats_Stat_Release(IntPtr stat);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorageFileTransferRequest_CancelRequest", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_TitleStorageFileTransferRequest_CancelRequest(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorageFileTransferRequest_GetFileRequestState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_TitleStorageFileTransferRequest_GetFileRequestState(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorageFileTransferRequest_GetFilename", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_TitleStorageFileTransferRequest_GetFilename(IntPtr handle, uint filenameStringBufferSizeBytes, IntPtr outStringBuffer, out int outStringLength);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorageFileTransferRequest_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_TitleStorageFileTransferRequest_Release(IntPtr titleStorageFileTransferHandle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_CopyFileMetadataAtIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_TitleStorage_CopyFileMetadataAtIndex(IntPtr handle, ref TitleStorage.CopyFileMetadataAtIndexOptionsInternal options, out IntPtr outMetadata);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_CopyFileMetadataByFilename", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_TitleStorage_CopyFileMetadataByFilename(IntPtr handle, ref TitleStorage.CopyFileMetadataByFilenameOptionsInternal options, out IntPtr outMetadata);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_DeleteCache", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_TitleStorage_DeleteCache(IntPtr handle, ref TitleStorage.DeleteCacheOptionsInternal options, IntPtr clientData, TitleStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_FileMetadata_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_TitleStorage_FileMetadata_Release(IntPtr fileMetadata);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_GetFileMetadataCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_TitleStorage_GetFileMetadataCount(IntPtr handle, ref TitleStorage.GetFileMetadataCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_QueryFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_TitleStorage_QueryFile(IntPtr handle, ref TitleStorage.QueryFileOptionsInternal options, IntPtr clientData, TitleStorage.OnQueryFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_QueryFileList", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_TitleStorage_QueryFileList(IntPtr handle, ref TitleStorage.QueryFileListOptionsInternal options, IntPtr clientData, TitleStorage.OnQueryFileListCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_TitleStorage_ReadFile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern IntPtr EOS_TitleStorage_ReadFile(IntPtr handle, ref TitleStorage.ReadFileOptionsInternal options, IntPtr clientData, TitleStorage.OnReadFileCompleteCallbackInternal completionCallback);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_AcknowledgeEventId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_AcknowledgeEventId(IntPtr handle, ref UI.AcknowledgeEventIdOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_AddNotifyDisplaySettingsUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_UI_AddNotifyDisplaySettingsUpdated(IntPtr handle, ref UI.AddNotifyDisplaySettingsUpdatedOptionsInternal options, IntPtr clientData, UI.OnDisplaySettingsUpdatedCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_AddNotifyMemoryMonitor", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern ulong EOS_UI_AddNotifyMemoryMonitor(IntPtr handle, ref UI.AddNotifyMemoryMonitorOptionsInternal options, IntPtr clientData, UI.OnMemoryMonitorCallbackInternal notificationFn);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_GetFriendsExclusiveInput", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_UI_GetFriendsExclusiveInput(IntPtr handle, ref UI.GetFriendsExclusiveInputOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_GetFriendsVisible", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_UI_GetFriendsVisible(IntPtr handle, ref UI.GetFriendsVisibleOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_GetNotificationLocationPreference", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern UI.NotificationLocation EOS_UI_GetNotificationLocationPreference(IntPtr handle);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_GetToggleFriendsButton", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern UI.InputStateButtonFlags EOS_UI_GetToggleFriendsButton(IntPtr handle, ref UI.GetToggleFriendsButtonOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_GetToggleFriendsKey", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern UI.KeyCombination EOS_UI_GetToggleFriendsKey(IntPtr handle, ref UI.GetToggleFriendsKeyOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_HideFriends", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_HideFriends(IntPtr handle, ref UI.HideFriendsOptionsInternal options, IntPtr clientData, UI.OnHideFriendsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_IsSocialOverlayPaused", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_UI_IsSocialOverlayPaused(IntPtr handle, ref UI.IsSocialOverlayPausedOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_IsValidButtonCombination", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_UI_IsValidButtonCombination(IntPtr handle, UI.InputStateButtonFlags buttonCombination);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_IsValidKeyCombination", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern int EOS_UI_IsValidKeyCombination(IntPtr handle, UI.KeyCombination keyCombination);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_PauseSocialOverlay", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_PauseSocialOverlay(IntPtr handle, ref UI.PauseSocialOverlayOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_PrePresent", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_PrePresent(IntPtr handle, ref UI.PrePresentOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_RemoveNotifyDisplaySettingsUpdated", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_RemoveNotifyDisplaySettingsUpdated(IntPtr handle, ulong id);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_RemoveNotifyMemoryMonitor", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_RemoveNotifyMemoryMonitor(IntPtr handle, ulong id);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_ReportInputState", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_ReportInputState(IntPtr handle, ref UI.ReportInputStateOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_SetDisplayPreference", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_SetDisplayPreference(IntPtr handle, ref UI.SetDisplayPreferenceOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_SetToggleFriendsButton", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_SetToggleFriendsButton(IntPtr handle, ref UI.SetToggleFriendsButtonOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_SetToggleFriendsKey", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UI_SetToggleFriendsKey(IntPtr handle, ref UI.SetToggleFriendsKeyOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_ShowBlockPlayer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_ShowBlockPlayer(IntPtr handle, ref UI.ShowBlockPlayerOptionsInternal options, IntPtr clientData, UI.OnShowBlockPlayerCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_ShowFriends", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_ShowFriends(IntPtr handle, ref UI.ShowFriendsOptionsInternal options, IntPtr clientData, UI.OnShowFriendsCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_ShowNativeProfile", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_ShowNativeProfile(IntPtr handle, ref UI.ShowNativeProfileOptionsInternal options, IntPtr clientData, UI.OnShowNativeProfileCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UI_ShowReportPlayer", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UI_ShowReportPlayer(IntPtr handle, ref UI.ShowReportPlayerOptionsInternal options, IntPtr clientData, UI.OnShowReportPlayerCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_BestDisplayName_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UserInfo_BestDisplayName_Release(IntPtr bestDisplayName);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_CopyBestDisplayName", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UserInfo_CopyBestDisplayName(IntPtr handle, ref UserInfo.CopyBestDisplayNameOptionsInternal options, out IntPtr outBestDisplayName);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_CopyBestDisplayNameWithPlatform", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UserInfo_CopyBestDisplayNameWithPlatform(IntPtr handle, ref UserInfo.CopyBestDisplayNameWithPlatformOptionsInternal options, out IntPtr outBestDisplayName);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_CopyExternalUserInfoByAccountId", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountId(IntPtr handle, ref UserInfo.CopyExternalUserInfoByAccountIdOptionsInternal options, out IntPtr outExternalUserInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_CopyExternalUserInfoByAccountType", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountType(IntPtr handle, ref UserInfo.CopyExternalUserInfoByAccountTypeOptionsInternal options, out IntPtr outExternalUserInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_CopyExternalUserInfoByIndex", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UserInfo_CopyExternalUserInfoByIndex(IntPtr handle, ref UserInfo.CopyExternalUserInfoByIndexOptionsInternal options, out IntPtr outExternalUserInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_CopyUserInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern Result EOS_UserInfo_CopyUserInfo(IntPtr handle, ref UserInfo.CopyUserInfoOptionsInternal options, out IntPtr outUserInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_ExternalUserInfo_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UserInfo_ExternalUserInfo_Release(IntPtr externalUserInfo);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_GetExternalUserInfoCount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_UserInfo_GetExternalUserInfoCount(IntPtr handle, ref UserInfo.GetExternalUserInfoCountOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_GetLocalPlatformType", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern uint EOS_UserInfo_GetLocalPlatformType(IntPtr handle, ref UserInfo.GetLocalPlatformTypeOptionsInternal options);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_QueryUserInfo", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UserInfo_QueryUserInfo(IntPtr handle, ref UserInfo.QueryUserInfoOptionsInternal options, IntPtr clientData, UserInfo.OnQueryUserInfoCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_QueryUserInfoByDisplayName", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UserInfo_QueryUserInfoByDisplayName(IntPtr handle, ref UserInfo.QueryUserInfoByDisplayNameOptionsInternal options, IntPtr clientData, UserInfo.OnQueryUserInfoByDisplayNameCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_QueryUserInfoByExternalAccount", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UserInfo_QueryUserInfoByExternalAccount(IntPtr handle, ref UserInfo.QueryUserInfoByExternalAccountOptionsInternal options, IntPtr clientData, UserInfo.OnQueryUserInfoByExternalAccountCallbackInternal completionDelegate);

		[DllImport(Common.LIBRARY_NAME, EntryPoint="EOS_UserInfo_Release", CallingConvention=Common.LIBRARY_CALLING_CONVENTION)]
		internal static extern void EOS_UserInfo_Release(IntPtr userInfo);
#endif
	}
}

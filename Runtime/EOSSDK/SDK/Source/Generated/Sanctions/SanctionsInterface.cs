// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.Sanctions
{
	public sealed partial class SanctionsInterface : Handle
	{
		public SanctionsInterface()
		{
		}

		public SanctionsInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="CopyPlayerSanctionByIndex" /> API.
		/// </summary>
		public const int COPYPLAYERSANCTIONBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CreatePlayerSanctionAppeal" /> struct.
		/// </summary>
		public const int CREATEPLAYERSANCTIONAPPEAL_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetPlayerSanctionCount" /> API.
		/// </summary>
		public const int GETPLAYERSANCTIONCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="PlayerSanction" /> struct.
		/// </summary>
		public const int PLAYERSANCTION_API_LATEST = 2;
		/// <summary>
		/// The most recent version of the <see cref="QueryActivePlayerSanctions" /> API.
		/// </summary>
		public const int QUERYACTIVEPLAYERSANCTIONS_API_LATEST = 2;

		/// <summary>
		/// Copies an active player sanction.
		/// You must call QueryActivePlayerSanctions first to retrieve the data from the service backend.
		/// On success, <see cref="Release" /> must be called on OutSanction to free memory.
		/// <see cref="QueryActivePlayerSanctions" />
		/// <see cref="Release" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="outSanction">
		/// The player sanction data for the given index, if it exists and is valid
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSanction
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the player achievement is not found
		/// </returns>
		public Result CopyPlayerSanctionByIndex(ref CopyPlayerSanctionByIndexOptions options, out PlayerSanction? outSanction)
		{
			var optionsInternal = default(CopyPlayerSanctionByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outSanctionPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_Sanctions_CopyPlayerSanctionByIndex(InnerHandle, ref optionsInternal, out outSanctionPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<PlayerSanctionInternal, PlayerSanction>(outSanctionPointer, out outSanction);
			if (outSanctionPointer != IntPtr.Zero)
			{
				Bindings.EOS_Sanctions_PlayerSanction_Release(outSanctionPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Create a sanction appeal on behalf of a local user.
		/// Note that for creating the sanction appeal you'll need the sanction reference id, which is available through CopyPlayerSanctionByIndex.
		/// </summary>
		/// <param name="options">
		/// Structure containing the player sanction appeal information.
		/// </param>
		/// <param name="clientData">
		/// Optional client data provided by the user of the SDK.
		/// </param>
		/// <param name="completionDelegate">
		/// This function is called when the send operation completes.
		/// </param>
		public void CreatePlayerSanctionAppeal(ref CreatePlayerSanctionAppealOptions options, object clientData, CreatePlayerSanctionAppealCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(CreatePlayerSanctionAppealOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Sanctions_CreatePlayerSanctionAppeal(InnerHandle, ref optionsInternal, clientDataPointer, CreatePlayerSanctionAppealCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Fetch the number of player sanctions that have been retrieved for a given player.
		/// You must call QueryActivePlayerSanctions first to retrieve the data from the service backend.
		/// <see cref="QueryActivePlayerSanctions" />
		/// <see cref="CopyPlayerSanctionByIndex" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <returns>
		/// Number of available sanctions for this player.
		/// </returns>
		public uint GetPlayerSanctionCount(ref GetPlayerSanctionCountOptions options)
		{
			var optionsInternal = default(GetPlayerSanctionCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_Sanctions_GetPlayerSanctionCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Start an asynchronous query to retrieve any active sanctions for a specified user.
		/// Call <see cref="GetPlayerSanctionCount" /> and <see cref="CopyPlayerSanctionByIndex" /> to retrieve the data.
		/// <see cref="GetPlayerSanctionCount" />
		/// <see cref="CopyPlayerSanctionByIndex" />
		/// </summary>
		/// <param name="options">
		/// Structure containing the input parameters
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back to you in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// A callback that is fired when the async operation completes, either successfully or in error
		/// </param>
		public void QueryActivePlayerSanctions(ref QueryActivePlayerSanctionsOptions options, object clientData, OnQueryActivePlayerSanctionsCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryActivePlayerSanctionsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_Sanctions_QueryActivePlayerSanctions(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryActivePlayerSanctionsCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

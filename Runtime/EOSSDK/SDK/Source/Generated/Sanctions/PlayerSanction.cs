// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sanctions
{
	/// <summary>
	/// Contains information about a single player sanction.
	/// </summary>
	public struct PlayerSanction
	{
		/// <summary>
		/// The POSIX timestamp when the sanction was placed
		/// </summary>
		public long TimePlaced { get; set; }

		/// <summary>
		/// The action associated with this sanction
		/// </summary>
		public Utf8String Action { get; set; }

		/// <summary>
		/// The POSIX timestamp when the sanction will expire. If the sanction is permanent, this will be 0.
		/// </summary>
		public long TimeExpires { get; set; }

		/// <summary>
		/// A unique identifier for this specific sanction
		/// </summary>
		public Utf8String ReferenceId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct PlayerSanctionInternal : IGettable<PlayerSanction>
	{
		private int m_ApiVersion;
		private long m_TimePlaced;
		private IntPtr m_Action;
		private long m_TimeExpires;
		private IntPtr m_ReferenceId;

		public void Get(out PlayerSanction other)
		{
			other = default;
			
			other.TimePlaced = m_TimePlaced;
			Utf8String ActionPublic;
			Helper.Get(m_Action, out ActionPublic);
			other.Action = ActionPublic;
			other.TimeExpires = m_TimeExpires;
			Utf8String ReferenceIdPublic;
			Helper.Get(m_ReferenceId, out ReferenceIdPublic);
			other.ReferenceId = ReferenceIdPublic;
		}
	}
}

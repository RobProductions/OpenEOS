// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTCAudio
{
	/// <summary>
	/// This struct is used to represent an audio buffer received in callbacks from <see cref="RTCAudioInterface.AddNotifyAudioBeforeSend" /> and <see cref="RTCAudioInterface.AddNotifyAudioBeforeRender" />.
	/// </summary>
	public struct AudioBuffer
	{
		/// <summary>
		/// <see cref="IntPtr" /> to the data with the interleaved audio frames in signed 16 bits format.
		/// </summary>
		public short[] Frames { get; set; }

		/// <summary>
		/// Sample rate for the samples in the Frames buffer.
		/// </summary>
		public uint SampleRate { get; set; }

		/// <summary>
		/// Number of channels for the samples in the Frames buffer.
		/// </summary>
		public uint Channels { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct AudioBufferInternal : IGettable<AudioBuffer>, ISettable<AudioBuffer>
	{
		private int m_ApiVersion;
		private IntPtr m_Frames;
		private uint m_FramesCount;
		private uint m_SampleRate;
		private uint m_Channels;

		public void Get(out AudioBuffer other)
		{
			other = default;
			
			short[] FramesPublic;
			Helper.Get(m_Frames, out FramesPublic, m_FramesCount, false);
			other.Frames = FramesPublic;
			other.SampleRate = m_SampleRate;
			other.Channels = m_Channels;
		}

		public void Set(ref AudioBuffer other)
		{
			Dispose();

			m_ApiVersion = RTCAudioInterface.AUDIOBUFFER_API_LATEST;
			Helper.Set(other.Frames, ref m_Frames, out m_FramesCount, false);
			m_SampleRate = other.SampleRate;
			m_Channels = other.Channels;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Frames);
		}
	}
}

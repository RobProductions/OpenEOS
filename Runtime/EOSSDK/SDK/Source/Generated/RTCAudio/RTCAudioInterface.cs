// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;

namespace Epic.OnlineServices.RTCAudio
{
	public sealed partial class RTCAudioInterface : Handle
	{
		public RTCAudioInterface()
		{
		}

		public RTCAudioInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyAudioBeforeRender" /> API.
		/// </summary>
		public const int ADDNOTIFYAUDIOBEFORERENDER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyAudioBeforeSend" /> API.
		/// </summary>
		public const int ADDNOTIFYAUDIOBEFORESEND_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyAudioDevicesChanged" /> API.
		/// </summary>
		public const int ADDNOTIFYAUDIODEVICESCHANGED_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyAudioInputState" /> API.
		/// </summary>
		public const int ADDNOTIFYAUDIOINPUTSTATE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyAudioOutputState" /> API.
		/// </summary>
		public const int ADDNOTIFYAUDIOOUTPUTSTATE_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AddNotifyParticipantUpdated" /> API.
		/// </summary>
		public const int ADDNOTIFYPARTICIPANTUPDATED_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AudioBuffer" /> API
		/// </summary>
		public const int AUDIOBUFFER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AudioInputDeviceInfo" /> struct.
		/// </summary>
		public const int AUDIOINPUTDEVICEINFO_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="AudioOutputDeviceInfo" /> struct.
		/// </summary>
		public const int AUDIOOUTPUTDEVICEINFO_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CopyInputDeviceInformationByIndex" /> API.
		/// </summary>
		public const int COPYINPUTDEVICEINFORMATIONBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="CopyOutputDeviceInformationByIndex" /> API.
		/// </summary>
		public const int COPYOUTPUTDEVICEINFORMATIONBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetAudioInputDeviceByIndex" /> API.
		/// </summary>
		public const int GETAUDIOINPUTDEVICEBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetAudioInputDevicesCount" /> API.
		/// </summary>
		public const int GETAUDIOINPUTDEVICESCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetAudioOutputDeviceByIndex" /> API.
		/// </summary>
		public const int GETAUDIOOUTPUTDEVICEBYINDEX_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetAudioOutputDevicesCount" /> API.
		/// </summary>
		public const int GETAUDIOOUTPUTDEVICESCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetInputDevicesCount" /> API.
		/// </summary>
		public const int GETINPUTDEVICESCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="GetOutputDevicesCount" /> API.
		/// </summary>
		public const int GETOUTPUTDEVICESCOUNT_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="InputDeviceInformation" /> struct.
		/// </summary>
		public const int INPUTDEVICEINFORMATION_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="OutputDeviceInformation" /> struct.
		/// </summary>
		public const int OUTPUTDEVICEINFORMATION_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="QueryInputDevicesInformation" /> API.
		/// </summary>
		public const int QUERYINPUTDEVICESINFORMATION_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="QueryOutputDevicesInformation" /> API.
		/// </summary>
		public const int QUERYOUTPUTDEVICESINFORMATION_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="RegisterPlatformAudioUser" /> API.
		/// </summary>
		public const int REGISTERPLATFORMAUDIOUSER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="RegisterPlatformUser" /> API.
		/// </summary>
		public const int REGISTERPLATFORMUSER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="SendAudio" /> API.
		/// </summary>
		public const int SENDAUDIO_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="SetAudioInputSettings" /> API.
		/// </summary>
		public const int SETAUDIOINPUTSETTINGS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="SetAudioOutputSettings" /> API.
		/// </summary>
		public const int SETAUDIOOUTPUTSETTINGS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="SetInputDeviceSettings" /> API.
		/// </summary>
		public const int SETINPUTDEVICESETTINGS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="SetOutputDeviceSettings" /> API.
		/// </summary>
		public const int SETOUTPUTDEVICESETTINGS_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UnregisterPlatformAudioUser" /> API.
		/// </summary>
		public const int UNREGISTERPLATFORMAUDIOUSER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UnregisterPlatformUser" /> API.
		/// </summary>
		public const int UNREGISTERPLATFORMUSER_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UpdateParticipantVolume" /> API.
		/// </summary>
		public const int UPDATEPARTICIPANTVOLUME_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UpdateReceivingVolume" /> API.
		/// </summary>
		public const int UPDATERECEIVINGVOLUME_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UpdateReceiving" /> API.
		/// </summary>
		public const int UPDATERECEIVING_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UpdateSendingVolume" /> API.
		/// </summary>
		public const int UPDATESENDINGVOLUME_API_LATEST = 1;
		/// <summary>
		/// The most recent version of the <see cref="UpdateSending" /> API.
		/// </summary>
		public const int UPDATESENDING_API_LATEST = 1;

		/// <summary>
		/// Register to receive notifications with remote audio buffers before they are rendered.
		/// 
		/// This gives you access to the audio data received, allowing for example the implementation of custom filters/effects.
		/// 
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyAudioBeforeRender" /> when you no longer wish to
		/// have your CompletionDelegate called.
		/// The CompletionDelegate may be called from a thread other than the one from which the SDK is ticking.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyAudioBeforeRender" />
		/// </summary>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when remote audio buffers are about to be rendered
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyAudioBeforeRender(ref AddNotifyAudioBeforeRenderOptions options, object clientData, OnAudioBeforeRenderCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AddNotifyAudioBeforeRenderOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			var callResult = Bindings.EOS_RTCAudio_AddNotifyAudioBeforeRender(InnerHandle, ref optionsInternal, clientDataPointer, OnAudioBeforeRenderCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Register to receive notifications when local audio buffers are about to be encoded and sent.
		/// 
		/// This gives you access to the audio data about to be sent, allowing for example the implementation of custom filters/effects.
		/// 
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyAudioBeforeSend" /> when you no longer wish to
		/// have your CompletionDelegate called.
		/// The CompletionDelegate may be called from a thread other than the one from which the SDK is ticking.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyAudioBeforeSend" />
		/// </summary>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when local audio buffers are about to be encoded and sent
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyAudioBeforeSend(ref AddNotifyAudioBeforeSendOptions options, object clientData, OnAudioBeforeSendCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AddNotifyAudioBeforeSendOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			var callResult = Bindings.EOS_RTCAudio_AddNotifyAudioBeforeSend(InnerHandle, ref optionsInternal, clientDataPointer, OnAudioBeforeSendCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Register to receive notifications when an audio device is added or removed to the system.
		/// 
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyAudioDevicesChanged" /> when you no longer wish
		/// to have your CompletionDelegate called.
		/// 
		/// The library will try to use user selected audio device while following these rules:
		/// - if none of the audio devices has been available and connected before - the library will try to use it;
		/// - if user selected device failed for some reason, default device will be used instead (and user selected device will be memorized);
		/// - if user selected a device but it was not used for some reason (and default was used instead), when devices selection is triggered we will try to use user selected device again;
		/// - triggers to change a device: when new audio device appears or disappears - library will try to use previously user selected;
		/// - if for any reason, a device cannot be used - the library will fallback to using default;
		/// - if a configuration of the current audio device has been changed, it will be restarted.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyAudioDevicesChanged" />
		/// <see cref="SetAudioInputSettingsOptions" />
		/// <see cref="SetAudioOutputSettingsOptions" />
		/// </summary>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when an audio device change occurs
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyAudioDevicesChanged(ref AddNotifyAudioDevicesChangedOptions options, object clientData, OnAudioDevicesChangedCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AddNotifyAudioDevicesChangedOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			var callResult = Bindings.EOS_RTCAudio_AddNotifyAudioDevicesChanged(InnerHandle, ref optionsInternal, clientDataPointer, OnAudioDevicesChangedCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Register to receive notifications when audio input state changed.
		/// 
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyAudioInputState" /> when you no longer wish to
		/// have your CompletionDelegate called.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyAudioInputState" />
		/// </summary>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when audio input state changes
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyAudioInputState(ref AddNotifyAudioInputStateOptions options, object clientData, OnAudioInputStateCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AddNotifyAudioInputStateOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			var callResult = Bindings.EOS_RTCAudio_AddNotifyAudioInputState(InnerHandle, ref optionsInternal, clientDataPointer, OnAudioInputStateCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Register to receive notifications when audio output state changed.
		/// 
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyAudioOutputState" /> when you no longer wish to
		/// have your CompletionDelegate called.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyAudioOutputState" />
		/// </summary>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when audio output state changes
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyAudioOutputState(ref AddNotifyAudioOutputStateOptions options, object clientData, OnAudioOutputStateCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AddNotifyAudioOutputStateOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			var callResult = Bindings.EOS_RTCAudio_AddNotifyAudioOutputState(InnerHandle, ref optionsInternal, clientDataPointer, OnAudioOutputStateCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Register to receive notifications when a room participant audio status is updated (f.e when mute state changes or speaking flag changes).
		/// 
		/// The notification is raised when the participant's audio status is updated. In order not to miss any participant status changes, applications need to add the notification before joining a room.
		/// 
		/// If the returned NotificationId is valid, you must call <see cref="RemoveNotifyParticipantUpdated" /> when you no longer wish
		/// to have your CompletionDelegate called.
		/// <see cref="Common.INVALID_NOTIFICATIONID" />
		/// <see cref="RemoveNotifyParticipantUpdated" />
		/// <see cref="ParticipantUpdatedCallbackInfo" />
		/// <see cref="RTCAudioStatus" />
		/// </summary>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when a participant changes audio status
		/// </param>
		/// <returns>
		/// Notification ID representing the registered callback if successful, an invalid NotificationId if not
		/// </returns>
		public ulong AddNotifyParticipantUpdated(ref AddNotifyParticipantUpdatedOptions options, object clientData, OnParticipantUpdatedCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(AddNotifyParticipantUpdatedOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			var callResult = Bindings.EOS_RTCAudio_AddNotifyParticipantUpdated(InnerHandle, ref optionsInternal, clientDataPointer, OnParticipantUpdatedCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);

			Helper.AssignNotificationIdToCallback(clientDataPointer, callResult);

			return callResult;
		}

		/// <summary>
		/// Fetches an audio input device's information from then given index that are cached locally.
		/// <see cref="Release" />
		/// <see cref="GetAudioInputDevicesCount" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the index being accessed
		/// </param>
		/// <param name="outInputDeviceInformation">
		/// The audio input device's information for the given index, if it exists and is valid, use <see cref="Release" /> when finished
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutInputDeviceInformation
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the audio input device's information is not found
		/// </returns>
		public Result CopyInputDeviceInformationByIndex(ref CopyInputDeviceInformationByIndexOptions options, out InputDeviceInformation? outInputDeviceInformation)
		{
			var optionsInternal = default(CopyInputDeviceInformationByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outInputDeviceInformationPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_RTCAudio_CopyInputDeviceInformationByIndex(InnerHandle, ref optionsInternal, out outInputDeviceInformationPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<InputDeviceInformationInternal, InputDeviceInformation>(outInputDeviceInformationPointer, out outInputDeviceInformation);
			if (outInputDeviceInformationPointer != IntPtr.Zero)
			{
				Bindings.EOS_RTCAudio_InputDeviceInformation_Release(outInputDeviceInformationPointer);
			}

			return callResult;
		}

		/// <summary>
		/// Fetches an audio output device's information from then given index that are cached locally.
		/// <see cref="Release" />
		/// <see cref="GetAudioOutputDevicesCount" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the index being accessed
		/// </param>
		/// <param name="outOutputDeviceInformation">
		/// The audio output device's information for the given index, if it exists and is valid, use <see cref="Release" /> when finished
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutOutputDeviceInformation
		/// <see cref="Result.InvalidParameters" /> if you pass a <see langword="null" /> <see cref="IntPtr" /> for the out parameter
		/// <see cref="Result.NotFound" /> if the audio output device's information is not found
		/// </returns>
		public Result CopyOutputDeviceInformationByIndex(ref CopyOutputDeviceInformationByIndexOptions options, out OutputDeviceInformation? outOutputDeviceInformation)
		{
			var optionsInternal = default(CopyOutputDeviceInformationByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var outOutputDeviceInformationPointer = IntPtr.Zero;

			var callResult = Bindings.EOS_RTCAudio_CopyOutputDeviceInformationByIndex(InnerHandle, ref optionsInternal, out outOutputDeviceInformationPointer);

			Helper.Dispose(ref optionsInternal);

			Helper.Get<OutputDeviceInformationInternal, OutputDeviceInformation>(outOutputDeviceInformationPointer, out outOutputDeviceInformation);
			if (outOutputDeviceInformationPointer != IntPtr.Zero)
			{
				Bindings.EOS_RTCAudio_OutputDeviceInformation_Release(outOutputDeviceInformationPointer);
			}

			return callResult;
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="QueryInputDevicesInformation" />, <see cref="CopyInputDeviceInformationByIndex" /> instead.
		/// 
		/// Fetches an audio input device's info from then given index. The returned value should not be cached and important
		/// information should be copied off of the result object immediately.
		/// <see cref="GetAudioInputDevicesCount" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the index being accessed
		/// </param>
		/// <returns>
		/// A <see cref="IntPtr" /> to the device information, or <see langword="null" /> on error. You should NOT keep hold of this <see cref="IntPtr" />.
		/// </returns>
		public AudioInputDeviceInfo? GetAudioInputDeviceByIndex(ref GetAudioInputDeviceByIndexOptions options)
		{
			var optionsInternal = default(GetAudioInputDeviceByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_GetAudioInputDeviceByIndex(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			AudioInputDeviceInfo? callResultReturn;
			Helper.Get<AudioInputDeviceInfoInternal, AudioInputDeviceInfo>(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="QueryInputDevicesInformation" />, <see cref="GetInputDevicesCount" /> instead.
		/// 
		/// Returns the number of audio input devices available in the system.
		/// 
		/// The returned value should not be cached and should instead be used immediately with the <see cref="GetAudioInputDeviceByIndex" />
		/// function.
		/// <see cref="GetAudioInputDeviceByIndex" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <returns>
		/// The number of audio input devices
		/// </returns>
		public uint GetAudioInputDevicesCount(ref GetAudioInputDevicesCountOptions options)
		{
			var optionsInternal = default(GetAudioInputDevicesCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_GetAudioInputDevicesCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="QueryOutputDevicesInformation" />, <see cref="CopyOutputDeviceInformationByIndex" /> instead.
		/// 
		/// Fetches an audio output device's info from then given index.
		/// 
		/// The returned value should not be cached and important information should be copied off of the result object immediately.
		/// <see cref="GetAudioOutputDevicesCount" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the index being accessed
		/// </param>
		/// <returns>
		/// A <see cref="IntPtr" /> to the device information, or <see langword="null" /> on error. You should NOT keep hold of this <see cref="IntPtr" />.
		/// </returns>
		public AudioOutputDeviceInfo? GetAudioOutputDeviceByIndex(ref GetAudioOutputDeviceByIndexOptions options)
		{
			var optionsInternal = default(GetAudioOutputDeviceByIndexOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_GetAudioOutputDeviceByIndex(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			AudioOutputDeviceInfo? callResultReturn;
			Helper.Get<AudioOutputDeviceInfoInternal, AudioOutputDeviceInfo>(callResult, out callResultReturn);
			return callResultReturn;
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="QueryOutputDevicesInformation" />, <see cref="GetOutputDevicesCount" /> instead.
		/// 
		/// Returns the number of audio output devices available in the system.
		/// 
		/// The returned value should not be cached and should instead be used immediately with the <see cref="GetAudioOutputDeviceByIndex" />
		/// function.
		/// <see cref="GetAudioOutputDeviceByIndex" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <returns>
		/// The number of audio output devices
		/// </returns>
		public uint GetAudioOutputDevicesCount(ref GetAudioOutputDevicesCountOptions options)
		{
			var optionsInternal = default(GetAudioOutputDevicesCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_GetAudioOutputDevicesCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Fetch the number of audio input devices available in the system that are cached locally.
		/// 
		/// The returned value should not be cached and should instead be used immediately with
		/// the <see cref="CopyInputDeviceInformationByIndex" /> function.
		/// <see cref="CopyInputDeviceInformationByIndex" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <returns>
		/// The number of audio input devices available in the system or 0 if there is an error
		/// </returns>
		public uint GetInputDevicesCount(ref GetInputDevicesCountOptions options)
		{
			var optionsInternal = default(GetInputDevicesCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_GetInputDevicesCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Fetch the number of audio output devices available in the system that are cached locally.
		/// 
		/// The returned value should not be cached and should instead be used immediately with
		/// the <see cref="CopyOutputDeviceInformationByIndex" /> function.
		/// <see cref="CopyOutputDeviceInformationByIndex" />
		/// <see cref="AddNotifyAudioDevicesChanged" />
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <returns>
		/// The number of audio output devices available in the system or 0 if there is an error
		/// </returns>
		public uint GetOutputDevicesCount(ref GetOutputDevicesCountOptions options)
		{
			var optionsInternal = default(GetOutputDevicesCountOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_GetOutputDevicesCount(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Query for a list of audio input devices available in the system together with their specifications.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// </returns>
		public void QueryInputDevicesInformation(ref QueryInputDevicesInformationOptions options, object clientData, OnQueryInputDevicesInformationCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryInputDevicesInformationOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_QueryInputDevicesInformation(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryInputDevicesInformationCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Query for a list of audio output devices available in the system together with their specifications.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// </returns>
		public void QueryOutputDevicesInformation(ref QueryOutputDevicesInformationOptions options, object clientData, OnQueryOutputDevicesInformationCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(QueryOutputDevicesInformationOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_QueryOutputDevicesInformation(InnerHandle, ref optionsInternal, clientDataPointer, OnQueryOutputDevicesInformationCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="RegisterPlatformUser" /> instead.
		/// 
		/// Use this function to inform the audio system of a user.
		/// 
		/// This function is only necessary for some platforms.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the user was successfully registered, <see cref="Result.UnexpectedError" /> otherwise.
		/// </returns>
		public Result RegisterPlatformAudioUser(ref RegisterPlatformAudioUserOptions options)
		{
			var optionsInternal = default(RegisterPlatformAudioUserOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_RegisterPlatformAudioUser(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Use this function to inform the audio system of a user.
		/// 
		/// This function is only necessary for some platforms.
		/// <see cref="UnregisterPlatformUser" />
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the user was successfully registered
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.UnexpectedError" /> otherwise
		/// </returns>
		public void RegisterPlatformUser(ref RegisterPlatformUserOptions options, object clientData, OnRegisterPlatformUserCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(RegisterPlatformUserOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_RegisterPlatformUser(InnerHandle, ref optionsInternal, clientDataPointer, OnRegisterPlatformUserCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving remote audio buffers before they are rendered.
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyAudioBeforeRender(ulong notificationId)
		{
			Bindings.EOS_RTCAudio_RemoveNotifyAudioBeforeRender(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving local audio buffers before they are encoded and sent.
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyAudioBeforeSend(ulong notificationId)
		{
			Bindings.EOS_RTCAudio_RemoveNotifyAudioBeforeSend(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving audio devices notifications
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyAudioDevicesChanged(ulong notificationId)
		{
			Bindings.EOS_RTCAudio_RemoveNotifyAudioDevicesChanged(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving notifications on audio input state changed.
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyAudioInputState(ulong notificationId)
		{
			Bindings.EOS_RTCAudio_RemoveNotifyAudioInputState(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving notifications on audio output state changed.
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyAudioOutputState(ulong notificationId)
		{
			Bindings.EOS_RTCAudio_RemoveNotifyAudioOutputState(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Unregister a previously bound notification handler from receiving participant updated notifications
		/// </summary>
		/// <param name="notificationId">
		/// The Notification ID representing the registered callback
		/// </param>
		public void RemoveNotifyParticipantUpdated(ulong notificationId)
		{
			Bindings.EOS_RTCAudio_RemoveNotifyParticipantUpdated(InnerHandle, notificationId);

			Helper.RemoveCallbackByNotificationId(notificationId);
		}

		/// <summary>
		/// Use this function to push a new audio buffer to be sent to the participants of a room.
		/// 
		/// This should only be used if Manual Audio Input was enabled locally for the specified room.
		/// <see cref="RTC.JoinRoomOptions" />
		/// <see cref="Lobby.LocalRTCOptions" />
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the buffer was successfully queued for sending
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.NotFound" /> if the specified room was not found
		/// <see cref="Result.InvalidState" /> if manual recording was not enabled when joining the room.
		/// </returns>
		public Result SendAudio(ref SendAudioOptions options)
		{
			var optionsInternal = default(SendAudioOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_SendAudio(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="SetInputDeviceSettings" /> instead.
		/// 
		/// Use this function to set audio input settings, such as the active input device, volume, or platform AEC.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the setting was successful
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// </returns>
		public Result SetAudioInputSettings(ref SetAudioInputSettingsOptions options)
		{
			var optionsInternal = default(SetAudioInputSettingsOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_SetAudioInputSettings(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="SetOutputDeviceSettings" /> instead.
		/// 
		/// Use this function to set audio output settings, such as the active output device or volume.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the setting was successful
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// </returns>
		public Result SetAudioOutputSettings(ref SetAudioOutputSettingsOptions options)
		{
			var optionsInternal = default(SetAudioOutputSettingsOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_SetAudioOutputSettings(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Use this function to set audio input device settings, such as the active input device, or platform AEC.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the setting was successful
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// </returns>
		public void SetInputDeviceSettings(ref SetInputDeviceSettingsOptions options, object clientData, OnSetInputDeviceSettingsCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(SetInputDeviceSettingsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_SetInputDeviceSettings(InnerHandle, ref optionsInternal, clientDataPointer, OnSetInputDeviceSettingsCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Use this function to set audio output device settings, such as the active output device.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the setting was successful
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// </returns>
		public void SetOutputDeviceSettings(ref SetOutputDeviceSettingsOptions options, object clientData, OnSetOutputDeviceSettingsCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(SetOutputDeviceSettingsOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_SetOutputDeviceSettings(InnerHandle, ref optionsInternal, clientDataPointer, OnSetOutputDeviceSettingsCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// DEPRECATED! Use <see cref="UnregisterPlatformUser" /> instead.
		/// 
		/// Use this function to remove a user that was added with <see cref="RegisterPlatformAudioUser" />.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the user was successfully unregistered, <see cref="Result.UnexpectedError" /> otherwise.
		/// </returns>
		public Result UnregisterPlatformAudioUser(ref UnregisterPlatformAudioUserOptions options)
		{
			var optionsInternal = default(UnregisterPlatformAudioUserOptionsInternal);
			optionsInternal.Set(ref options);

			var callResult = Bindings.EOS_RTCAudio_UnregisterPlatformAudioUser(InnerHandle, ref optionsInternal);

			Helper.Dispose(ref optionsInternal);

			return callResult;
		}

		/// <summary>
		/// Use this function to remove a user that was added with <see cref="RegisterPlatformUser" />.
		/// 
		/// This function is only necessary for some platforms.
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the user was successfully unregistered
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.UnexpectedError" /> otherwise
		/// </returns>
		public void UnregisterPlatformUser(ref UnregisterPlatformUserOptions options, object clientData, OnUnregisterPlatformUserCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UnregisterPlatformUserOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_UnregisterPlatformUser(InnerHandle, ref optionsInternal, clientDataPointer, OnUnregisterPlatformUserCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Use this function to change participant audio volume for a room.
		/// Due to internal implementation details, this function requires that you first register to any notification for room
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.NotFound" /> if either the local user or specified participant are not in the room
		/// </returns>
		public void UpdateParticipantVolume(ref UpdateParticipantVolumeOptions options, object clientData, OnUpdateParticipantVolumeCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UpdateParticipantVolumeOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_UpdateParticipantVolume(InnerHandle, ref optionsInternal, clientDataPointer, OnUpdateParticipantVolumeCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Use this function to tweak incoming audio options for a room.
		/// Due to internal implementation details, this function requires that you first register to any notification for room
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.NotFound" /> if either the local user or specified participant are not in the room
		/// </returns>
		public void UpdateReceiving(ref UpdateReceivingOptions options, object clientData, OnUpdateReceivingCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UpdateReceivingOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_UpdateReceiving(InnerHandle, ref optionsInternal, clientDataPointer, OnUpdateReceivingCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Use this function to change incoming audio volume for a room.
		/// Due to internal implementation details, this function requires that you first register to any notification for room
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or on error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.NotFound" /> if the local user is not in the room
		/// </returns>
		public void UpdateReceivingVolume(ref UpdateReceivingVolumeOptions options, object clientData, OnUpdateReceivingVolumeCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UpdateReceivingVolumeOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_UpdateReceivingVolume(InnerHandle, ref optionsInternal, clientDataPointer, OnUpdateReceivingVolumeCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Use this function to tweak outgoing audio options for a room.
		/// Due to internal implementation details, this function requires that you first register to any notification for room
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.NotFound" /> if the local user is not in the room
		/// </returns>
		public void UpdateSending(ref UpdateSendingOptions options, object clientData, OnUpdateSendingCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UpdateSendingOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_UpdateSending(InnerHandle, ref optionsInternal, clientDataPointer, OnUpdateSendingCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}

		/// <summary>
		/// Use this function to change outgoing audio volume for a room.
		/// Due to internal implementation details, this function requires that you first register to any notification for room
		/// </summary>
		/// <param name="options">
		/// structure containing the parameters for the operation.
		/// </param>
		/// <param name="clientData">
		/// Arbitrary data that is passed back in the CompletionDelegate
		/// </param>
		/// <param name="completionDelegate">
		/// The callback to be fired when the operation completes, either successfully or in error
		/// </param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation succeeded
		/// <see cref="Result.InvalidParameters" /> if any of the parameters are incorrect
		/// <see cref="Result.NotFound" /> if the local user is not in the room
		/// </returns>
		public void UpdateSendingVolume(ref UpdateSendingVolumeOptions options, object clientData, OnUpdateSendingVolumeCallback completionDelegate)
		{
			if (completionDelegate == null)
			{
				throw new ArgumentNullException("completionDelegate");
			}

			var optionsInternal = default(UpdateSendingVolumeOptionsInternal);
			optionsInternal.Set(ref options);

			var clientDataPointer = IntPtr.Zero;

			Helper.AddCallback(out clientDataPointer, clientData, completionDelegate);

			Bindings.EOS_RTCAudio_UpdateSendingVolume(InnerHandle, ref optionsInternal, clientDataPointer, OnUpdateSendingVolumeCallbackInternalImplementation.Delegate);

			Helper.Dispose(ref optionsInternal);
		}
	}
}

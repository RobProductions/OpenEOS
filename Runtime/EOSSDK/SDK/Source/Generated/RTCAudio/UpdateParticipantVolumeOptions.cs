// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTCAudio
{
	/// <summary>
	/// This struct is passed in with a call to <see cref="RTCAudioInterface.UpdateParticipantVolume" />
	/// </summary>
	public struct UpdateParticipantVolumeOptions
	{
		/// <summary>
		/// The Product User ID of the user trying to request this operation.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The room this settings should be applied on.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// The participant to modify or <see langword="null" /> to update the global configuration
		/// </summary>
		public ProductUserId ParticipantId { get; set; }

		/// <summary>
		/// The volume to be set for received audio (range 0.0 to 100.0). Volume 50 means that the audio volume is not modified
		/// </summary>
		public float Volume { get; set; }
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct UpdateParticipantVolumeOptionsInternal : ISettable<UpdateParticipantVolumeOptions>
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_RoomName;
		private IntPtr m_ParticipantId;
		private float m_Volume;

		public void Set(ref UpdateParticipantVolumeOptions other)
		{
			Dispose();

			m_ApiVersion = RTCAudioInterface.UPDATEPARTICIPANTVOLUME_API_LATEST;
			Helper.Set(other.LocalUserId, ref m_LocalUserId);
			Helper.Set(other.RoomName, ref m_RoomName);
			Helper.Set(other.ParticipantId, ref m_ParticipantId);
			m_Volume = other.Volume;
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_RoomName);
			Helper.Dispose(ref m_ParticipantId);
		}
	}
}

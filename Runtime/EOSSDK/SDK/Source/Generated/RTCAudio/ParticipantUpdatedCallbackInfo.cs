// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.RTCAudio
{
	/// <summary>
	/// This struct is passed in with a call to <see cref="RTCAudioInterface.AddNotifyParticipantUpdated" /> registered event.
	/// </summary>
	public struct ParticipantUpdatedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into <see cref="RTCAudioInterface.AddNotifyParticipantUpdated" />.
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the user who initiated this request.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The room associated with this event.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// The participant updated.
		/// </summary>
		public ProductUserId ParticipantId { get; set; }

		/// <summary>
		/// The participant speaking / non-speaking status.
		/// </summary>
		public bool Speaking { get; set; }

		/// <summary>
		/// The participant audio status (enabled, disabled).
		/// </summary>
		public RTCAudioStatus AudioStatus { get; set; }

		public object GetClientData()
		{
			return ClientData;
		}

		public Result? GetResultCode()
		{
			return null;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	internal struct ParticipantUpdatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<ParticipantUpdatedCallbackInfo>
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_RoomName;
		private IntPtr m_ParticipantId;
		private int m_Speaking;
		private RTCAudioStatus m_AudioStatus;

		public IntPtr ClientDataPointer
		{
			get
			{
				return m_ClientData;
			}
		}

		public void Get(out ParticipantUpdatedCallbackInfo other)
		{
			other = default;
			
			object ClientDataPublic;
			Helper.Get(m_ClientData, out ClientDataPublic);
			other.ClientData = ClientDataPublic;
			ProductUserId LocalUserIdPublic;
			Helper.Get(m_LocalUserId, out LocalUserIdPublic);
			other.LocalUserId = LocalUserIdPublic;
			Utf8String RoomNamePublic;
			Helper.Get(m_RoomName, out RoomNamePublic);
			other.RoomName = RoomNamePublic;
			ProductUserId ParticipantIdPublic;
			Helper.Get(m_ParticipantId, out ParticipantIdPublic);
			other.ParticipantId = ParticipantIdPublic;
			bool SpeakingPublic;
			Helper.Get(m_Speaking, out SpeakingPublic);
			other.Speaking = SpeakingPublic;
			other.AudioStatus = m_AudioStatus;
		}
	}
}
